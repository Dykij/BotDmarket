"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å Telegram-–±–æ—Ç–æ–º.
"""

import os
from typing import Dict, Any, Optional
import asyncio
from datetime import datetime

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, CallbackContext
)

from src.utils.logging_utils import get_logger, log_exceptions
from src.utils.exception_handling import (
    handle_exceptions, APIError, ValidationError, BusinessLogicError, ErrorCode
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_TOKEN_HERE")

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
bot_logger = get_logger("demo_bot", {"component": "telegram_bot"})


class DemoBot:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Telegram-–±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.
    """

    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞.

        Args:
            token: –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞.
        """
        self.token = token
        # –õ–æ–≥–≥–µ—Ä —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –±–æ—Ç–∞
        self.logger = get_logger("demo_bot.instance", {
            "component": "bot_instance",
            "bot_start_time": datetime.now().isoformat()
        })

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()

    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("demo", self.demo_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤
        self.application.add_handler(
            CallbackQueryHandler(self.handle_demo_callback, pattern=r"^demo_")
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        self.logger.info("–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")
        await self.application.initialize()
        await self.application.start()
        await self.application.run_polling()

    @log_exceptions
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
        self.logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞")
        await self.application.stop()

    @handle_exceptions(default_error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start")
    async def start_command(self, update: Update, context: CallbackContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
        """
        user = update.message.from_user
        user_id = user.id

        # –õ–æ–≥–∏—Ä—É–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞",
            extra={"context": {"user_id": user_id, "username": user.username}}
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è "
            "–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/demo - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞"
        )

    @handle_exceptions(default_error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help")
    async def help_command(self, update: Update, context: CallbackContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
        """
        user_id = update.message.from_user.id

        # –õ–æ–≥–∏—Ä—É–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        self.logger.info(
            "–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞",
            extra={"context": {"user_id": user_id}}
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –±–æ—Ç—É\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/demo - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."
        )

    @handle_exceptions(default_error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /demo")
    async def demo_command(self, update: Update, context: CallbackContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /demo.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
        """
        user_id = update.message.from_user.id

        # –õ–æ–≥–∏—Ä—É–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        self.logger.info(
            "–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è",
            extra={"context": {"user_id": user_id}}
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton(
                    "–£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
                    callback_data="demo_success"
                ),
                InlineKeyboardButton(
                    "–û—à–∏–±–∫–∞ API",
                    callback_data="demo_api_error"
                ),
            ],
            [
                InlineKeyboardButton(
                    "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                    callback_data="demo_validation_error"
                ),
                InlineKeyboardButton(
                    "–ë–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–∞",
                    callback_data="demo_business_error"
                ),
            ],
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            "üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    @handle_exceptions(default_error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞")
    async def handle_demo_callback(self, update: Update, context: CallbackContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –æ—Ç –∫–Ω–æ–ø–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
        """
        query = update.callback_query
        user_id = query.from_user.id
        callback_data = query.data

        # –õ–æ–≥–∏—Ä—É–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        self.logger.info(
            f"–ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫: {callback_data}",
            extra={"context": {"user_id": user_id, "callback_data": callback_data}}
        )

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
        await query.answer()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–ª–±—ç–∫–æ–≤
        try:
            if callback_data == "demo_success":
                await self._handle_success_demo(query, context)
            elif callback_data == "demo_api_error":
                await self._handle_api_error_demo(query, context)
            elif callback_data == "demo_validation_error":
                await self._handle_validation_error_demo(query, context)
            elif callback_data == "demo_business_error":
                await self._handle_business_error_demo(query, context)
            else:
                self.logger.warning(
                    f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–ª–±—ç–∫: {callback_data}",
                    extra={"context": {"user_id": user_id}}
                )
                await query.edit_message_text(
                    "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."
                )
        except Exception as e:
            # –≠—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ handle_exceptions,
            # –Ω–æ –º—ã —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.edit_message_text(
                f"‚ùå –í –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )
            raise

    async def _handle_success_demo(self, query: Any, context: CallbackContext) -> None:
        """
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.

        Args:
            query: –û–±—ä–µ–∫—Ç CallbackQuery.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
        """
        user_id = query.from_user.id

        self.logger.info(
            "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏",
            extra={"context": {"user_id": user_id}}
        )

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
        await asyncio.sleep(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await query.edit_message_text(
            "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."
        )

    async def _handle_api_error_demo(self, query: Any, context: CallbackContext) -> None:
        """
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É API.

        Args:
            query: –û–±—ä–µ–∫—Ç CallbackQuery.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
        """
        user_id = query.from_user.id

        self.logger.info(
            "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏ API",
            extra={"context": {"user_id": user_id}}
        )

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ API
        await asyncio.sleep(1)

        # –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É API
        raise APIError(
            message="API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É",
            status_code=429,
            details={"retry_after": 30}
        )

    async def _handle_validation_error_demo(self, query: Any, context: CallbackContext) -> None:
        """
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏.

        Args:
            query: –û–±—ä–µ–∫—Ç CallbackQuery.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
        """
        user_id = query.from_user.id

        self.logger.info(
            "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
            extra={"context": {"user_id": user_id}}
        )

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö
        await asyncio.sleep(1)

        # –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        raise ValidationError(
            message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞",
            field="price",
            details={"value": -10, "valid_range": [0, 1000]}
        )

    async def _handle_business_error_demo(self, query: Any, context: CallbackContext) -> None:
        """
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏.

        Args:
            query: –û–±—ä–µ–∫—Ç CallbackQuery.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
        """
        user_id = query.from_user.id

        self.logger.info(
            "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏",
            extra={"context": {"user_id": user_id}}
        )

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–æ–ø–µ—Ä–∞—Ü–∏—é
        await asyncio.sleep(1)

        # –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        raise BusinessLogicError(
            message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
            operation="purchase",
            details={"required": 100, "available": 50}
        )

    async def error_handler(self, update: Update, context: CallbackContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        error = context.error

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        error_context = {"update_id": update.update_id if update else None}

        if isinstance(error, BaseException):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            error_context["error_type"] = error.__class__.__name__

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        if isinstance(error, APIError):
            self.logger.error(
                f"–û—à–∏–±–∫–∞ API: {error.message}",
                extra={"context": {**error_context, **error.details}}
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å API
            message = f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å API: {error.message}"
            if error.status_code == 429:
                message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."

        elif isinstance(error, ValidationError):
            self.logger.warning(
                f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error.message}",
                extra={"context": {**error_context, **error.details}}
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –¥–∞–Ω–Ω—ã–º–∏
            field = error.details.get("field", "")
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {field}: {error.message}"

        elif isinstance(error, BusinessLogicError):
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏: {error.message}",
                extra={"context": {**error_context, **error.details}}
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–µ
            operation = error.details.get("operation", "")
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation}: {error.message}"

        else:
            # –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            self.logger.error(
                f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(error)}",
                extra={"context": error_context}
            )
            message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if update and update.effective_message:
            await update.effective_message.reply_text(message)


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot_logger.info("–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not TOKEN or TOKEN == "YOUR_TOKEN_HERE":
        bot_logger.error(
            "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ"
        )
        return

    bot = DemoBot(TOKEN)

    try:
        await bot.start()
    except KeyboardInterrupt:
        bot_logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await bot.stop()
    except Exception as e:
        bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
