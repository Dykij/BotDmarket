.. _codebase:

Структура кодовой базы
===================

Этот раздел описывает структуру кодовой базы проекта DMarket Bot.

Организация проекта
----------------

Проект организован в следующие основные директории:

* ``src/`` - исходный код проекта
* ``tests/`` - тесты
* ``docs/`` - документация
* ``scripts/`` - вспомогательные скрипты
* ``config/`` - конфигурационные файлы
* ``logs/`` - директория для логов
* ``data/`` - директория для данных

Основные модули
------------

Проект разделен на несколько основных модулей:

**DMarket API (src/dmarket/)**

* ``dmarket_api.py`` - основной клиент для работы с DMarket API
  * Аутентификация с использованием API ключей
  * Подписание запросов с использованием HMAC
  * Обработка ошибок и повторные попытки запросов
  * Методы для получения, покупки и продажи предметов
  * Работа с балансом пользователя и транзакциями

* ``auto_arbitrage.py`` - модуль для автоматического арбитража
  * Алгоритмы поиска арбитражных возможностей
  * Режимы "Разгон баланса", "Средний трейдер" и "Trade Pro"
  * Управление рисками и лимитами
  * Демонстрационный режим для обучения
  * Расчет потенциальной прибыли и комиссий

* ``models/`` - модели данных
  * Структуры данных для предметов, балансов и транзакций
  * Преобразование данных API в удобные объекты Python
  * Валидация данных и обработка ошибок

**Telegram Bot (src/telegram_bot/)**

* ``bot_v2.py`` - основной файл Telegram-бота
  * Инициализация и конфигурация бота
  * Настройка обработчиков команд и ошибок
  * Основной цикл обработки сообщений
  * Интеграция с DMarket API

* ``handlers/`` - обработчики команд и сообщений
  * ``commands.py`` - обработчики для стандартных команд (/start, /help, /balance и т.д.)
  * ``market.py`` - обработчики для работы с маркетом предметов
  * ``arbitrage.py`` - обработчики для работы с функциями арбитража
  * ``admin.py`` - админский функционал и статистика
  * ``callback.py`` - обработчики для callback запросов (кнопки)

* ``utils/`` - вспомогательные функции
  * ``formatters.py`` - форматирование сообщений и данных
  * ``pagination.py`` - постраничный вывод для длинных списков
  * ``validation.py`` - проверка и валидация пользовательского ввода
  * ``state.py`` - управление состоянием пользовательских сессий

* ``keyboards.py`` - настройка клавиатур
  * Основные меню и подменю
  * Инлайн-клавиатуры для интерактивных элементов
  * Динамические клавиатуры на основе данных

**Утилиты (src/utils/)**

* ``rate_limiter.py`` - ограничение частоты запросов
  * Реализация алгоритма токенного ведра (token bucket)
  * Асинхронная обработка лимитов
  * Обработка 429 ошибок от API

* ``logger.py`` - настройка логирования
  * Структурированная система логов с ротацией
  * Раздельные логи для разных компонентов
  * Фильтрация и форматирование логов

* ``config.py`` - работа с конфигурацией
  * Загрузка переменных окружения из .env
  * Управление конфигурацией в разных окружениях
  * Валидация конфигурационных параметров

* ``analytics.py`` - сбор и анализ данных
  * Отслеживание производительности арбитражных стратегий
  * Расчет статистики успешности операций
  * Визуализация данных в Telegram-боте

Файлы в корне проекта
------------------

* ``run_bot.py`` - основной скрипт запуска бота
  * Инициализация всех компонентов
  * Обработка сигналов (SIGTERM, SIGINT)
  * Режимы запуска (стандартный, отладочный, демонстрационный)

* ``setup.py`` - настройка установки пакета
  * Метаданные пакета
  * Зависимости (основные и для разработки)
  * Entry points для консольных команд

* ``pyproject.toml`` - конфигурация проекта и инструментов
  * Настройки для ruff, black, mypy и pytest
  * Метаданные пакета (в формате PEP 621)
  * Конфигурация сборки

* ``requirements.txt`` - зависимости проекта
  * Основные библиотеки с привязкой к версиям
  * Разделение на основные и опциональные зависимости

* ``Dockerfile`` и ``docker-compose.yml`` - настройка Docker
  * Многоэтапная сборка для оптимизации размера образа
  * Управление переменными окружения
  * Персистентные тома для данных и логов

Тесты
----

Тесты организованы в соответствии со структурой проекта:

* ``tests/dmarket/`` - тесты для модуля DMarket
  * ``test_api_unified.py`` - тесты API клиента
  * ``test_models.py`` - тесты моделей данных

* ``tests/telegram_bot/`` - тесты для Telegram-бота
  * ``test_bot_unified.py`` - тесты для функциональности бота
  * ``handlers/test_commands.py`` - тесты для обработчиков команд
  * ``test_keyboards.py`` - тесты для клавиатур

* ``tests/utils/`` - тесты для утилит
  * ``test_rate_limiter.py`` - тесты лимитера запросов
  * ``test_config.py`` - тесты конфигурационных функций

* ``tests/fixtures/`` - общие фикстуры для тестов
  * ``api_responses.py`` - моки ответов API
  * ``telegram_fixtures.py`` - фикстуры для Telegram

* ``test_arbitrage_unified.py`` - комплексные тесты арбитражных функций

Стиль кода
--------

Проект следует следующим соглашениям по стилю кода:

* PEP 8 для общего стиля Python
* Максимальная длина строки - 100 символов
* Документирование в формате docstrings (Google style)
* Типизация с использованием аннотаций типов
* Чистый код с соблюдением принципов SOLID

Инструменты разработки
------------------

Для разработки используются следующие инструменты:

* ``ruff`` - быстрый линтер Python
  * Проверка стиля кода
  * Исправление простых ошибок
  * Интеграция с редакторами через Language Server Protocol

* ``mypy`` - статический анализатор типов
  * Проверка аннотаций типов
  * Предотвращение ошибок типизации
  * Интеграция с CI/CD

* ``pytest`` - фреймворк для тестирования
  * Юнит-тесты и интеграционные тесты
  * Асинхронное тестирование
  * Измерение покрытия кода

* ``black`` - форматтер кода
  * Унифицированное форматирование
  * Детерминированный результат
  * Интеграция с pre-commit

Все инструменты настроены в ``pyproject.toml``.

CI/CD Pipeline
-----------

Проект использует GitHub Actions для автоматизации:

* Проверка стиля кода при каждом push и pull request
* Запуск тестов в разных версиях Python
* Сборка и публикация документации
* Автоматическое развертывание бота при релизе

Подробности можно найти в ``.github/workflows/`` директории. 