.. _telegram-bot-module:

–ú–æ–¥—É–ª—å Telegram Bot
=================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã DMarket.

–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞
-----------------

–§–∞–π–ª ``bot_v2.py`` —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞. –ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, 
—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API DMarket.

–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
-------------------

–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:

.. code-block:: python

    from telegram.ext import Application
    
    def create_application():
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞."""
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        application = Application.builder().token(token).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        setup_command_handlers(application)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
        setup_error_handlers(application)
        
        return application
    
    async def main():
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
        application = create_application()
        await application.run_polling()

–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
---------------

–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

.. code-block:: python

    def setup_command_handlers(application):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("balance", balance_command))
        application.add_handler(CommandHandler("market", market_command))
        application.add_handler(CommandHandler("arbitrage", arbitrage_command))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("settings", settings_command))
        application.add_handler(CommandHandler("notifications", notifications_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
        application.add_handler(CallbackQueryHandler(callback_handler))

–ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥:

.. code-block:: python

    async def start_command(update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
        user = update.effective_user
        welcome_message = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üëã\n\n"
            "–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π DMarket.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        await update.message.reply_text(welcome_message, reply_markup=create_main_keyboard())
    
    async def balance_command(update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /balance."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        if not is_api_configured():
            await update.message.reply_text(
                "–ö–ª—é—á–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ /settings."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ API DMarket
        try:
            api = get_dmarket_api()
            balance_data = await api.get_user_balance()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º
            message = format_balance_message(balance_data)
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
-------------

–ë–æ—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫:

.. code-block:: python

    def setup_error_handlers(application):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫."""
        application.add_error_handler(handle_error)
    
    async def handle_error(update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        error = context.error
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}", exc_info=context.error)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and update.effective_chat:
            if isinstance(error, ApiError):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–û—à–∏–±–∫–∞ API: {error.message}"
                )
            elif isinstance(error, NetworkError):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º."
                )

–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
---------------------

–î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

.. code-block:: python

    def format_balance_message(balance_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–ª–∞–Ω—Å–µ."""
        usd_amount = balance_data.get("usd", {}).get("amount", 0) / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω—Ç–æ–≤ –≤ –¥–æ–ª–ª–∞—Ä—ã
        available_balance = balance_data.get("available_balance", 0)
        has_funds = balance_data.get("has_funds", False)
        
        message = (
            "üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*\n\n"
            f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: *${usd_amount:.2f}*\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: *${available_balance:.2f}*\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ï—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞' if has_funds else '‚ùå –ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤'}"
        )
        
        return message
    
    def format_market_item(item):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–∞."""
        title = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        price_usd = item.get("price", {}).get("USD", 0) / 100
        category = item.get("categoryPath", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        wear = item.get("extra", {}).get("wear", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        
        message = (
            f"üéÆ *{title}*\n"
            f"üíµ –¶–µ–Ω–∞: *${price_usd:.2f}*\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"üëï –°–æ—Å—Ç–æ—è–Ω–∏–µ: {wear}\n"
            f"üÜî ID: `{item.get('itemId', '–ù–µ—Ç ID')}`"
        )
        
        return message

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
-----------------------------

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞:

.. code-block:: python

    async def market_command(update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /market –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤."""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        context.user_data["search_state"] = "awaiting_game"
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:",
            reply_markup=create_game_selection_keyboard()
        )
    
    async def message_handler(update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_state = context.user_data.get("search_state")
        
        if user_state == "awaiting_game":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä—ã
            game = update.message.text.lower()
            if game in SUPPORTED_GAMES:
                context.user_data["selected_game"] = game
                context.user_data["search_state"] = "awaiting_query"
                
                await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
                    reply_markup=create_game_selection_keyboard()
                )
                
        elif user_state == "awaiting_query":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = update.message.text
            game = context.user_data.get("selected_game")
            
            await update.message.reply_text(f"–ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è {game}: {query}...")
            
            try:
                api = get_dmarket_api()
                items = await api.get_market_items(
                    game=game,
                    title=query,
                    limit=5
                )
                
                if not items.get("objects"):
                    await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                for item in items.get("objects", []):
                    message = format_market_item(item)
                    await update.message.reply_text(
                        message,
                        parse_mode="Markdown"
                    )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data["search_state"] = None
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
                "–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help",
                reply_markup=create_main_keyboard()
            )

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DMarket API
---------------------

–ë–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å DMarket API —á–µ—Ä–µ–∑ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

.. code-block:: python

    def get_dmarket_api():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä DMarket API —Å –∫–ª—é—á–∞–º–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        public_key = os.getenv("DMARKET_PUBLIC_KEY")
        secret_key = os.getenv("DMARKET_SECRET_KEY")
        
        if not public_key or not secret_key:
            raise ValueError("API –∫–ª—é—á–∏ DMarket –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        return DMarketAPI(public_key, secret_key)
    
    def is_api_configured():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –∫–ª—é—á–∏ API."""
        public_key = os.getenv("DMARKET_PUBLIC_KEY")
        secret_key = os.getenv("DMARKET_SECRET_KEY")
        
        return bool(public_key and secret_key)

–ú–æ–¥—É–ª—å —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. 