name: Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  lint:
    name: Linting and Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Check for composite action
        id: check-action
        run: |
          echo "Проверка наличия композитного экшена setup-python-env..."
          if [ -d ".github/actions/setup-python-env" ]; then
            echo "action_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Композитный экшен найден"
          else
            echo "action_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ Композитный экшен не найден, используем стандартную установку"
          fi
      
      - name: Setup Python with composite action
        if: steps.check-action.outputs.action_exists == 'true'
        uses: ./.github/actions/setup-python-env
        with:
          python-version: '3.11'
          install-poetry: ${{ hashFiles('poetry.lock') != '' && 'true' || 'false' }}
          install-dev-deps: 'true'
          create-env-file: 'false'
      
      - name: Install dependencies manually
        if: steps.check-action.outputs.action_exists != 'true'
        run: |
          echo "Установка зависимостей для линтинга..."
          python -m pip install --upgrade pip
          
          if [ -f poetry.lock ]; then
            echo "Обнаружен poetry.lock, устанавливаем Poetry..."
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH
            export PATH="$HOME/.local/bin:$PATH"
            
            echo "Установка зависимостей через Poetry..."
            poetry config virtualenvs.create true
            poetry config virtualenvs.in-project true
            poetry install --no-interaction
            echo "POETRY_AVAILABLE=true" >> $GITHUB_ENV
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          elif [ -f pyproject.toml ]; then
            pip install .
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          fi
          
          # Всегда устанавливаем основные инструменты для проверки кода
          pip install black ruff mypy
          echo "✅ Зависимости для линтинга установлены"
      
      - name: Run Black
        run: |
          echo "Проверка форматирования с помощью Black..."
          if [ -f poetry.lock ] && [ "${{ env.POETRY_AVAILABLE }}" == "true" ]; then
            poetry run black . --check || echo "::warning::Black выявил проблемы форматирования"
          else
            black . --check || echo "::warning::Black выявил проблемы форматирования"
          fi
      
      - name: Run Ruff
        run: |
          echo "Проверка стиля кода с помощью Ruff..."
          if [ -f poetry.lock ] && [ "${{ env.POETRY_AVAILABLE }}" == "true" ]; then
            poetry run ruff check . || echo "::warning::Ruff выявил проблемы стиля кода"
          else
            ruff check . || echo "::warning::Ruff выявил проблемы стиля кода"
          fi
      
      - name: Run MyPy
        run: |
          echo "Проверка типов с помощью MyPy..."
          if [ -f poetry.lock ] && [ "${{ env.POETRY_AVAILABLE }}" == "true" ]; then
            poetry run mypy . || echo "::warning::MyPy выявил проблемы с типами"
          else
            mypy . || echo "::warning::MyPy выявил проблемы с типами"
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Check for composite action
        id: check-action
        run: |
          echo "Проверка наличия композитного экшена setup-python-env..."
          if [ -d ".github/actions/setup-python-env" ]; then
            echo "action_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Композитный экшен найден"
          else
            echo "action_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ Композитный экшен не найден, используем стандартную установку"
          fi
      
      - name: Setup Python with composite action
        if: steps.check-action.outputs.action_exists == 'true'
        uses: ./.github/actions/setup-python-env
        with:
          python-version: '3.11'
          install-poetry: ${{ hashFiles('poetry.lock') != '' && 'true' || 'false' }}
          install-dev-deps: 'true'
          create-env-file: 'true'
      
      - name: Install dependencies manually
        if: steps.check-action.outputs.action_exists != 'true'
        run: |
          echo "Установка зависимостей для тестирования..."
          python -m pip install --upgrade pip
          
          if [ -f poetry.lock ]; then
            echo "Обнаружен poetry.lock, устанавливаем Poetry..."
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH
            export PATH="$HOME/.local/bin:$PATH"
            
            echo "Установка зависимостей через Poetry..."
            poetry config virtualenvs.create true
            poetry config virtualenvs.in-project true
            poetry install --no-interaction
            echo "POETRY_AVAILABLE=true" >> $GITHUB_ENV
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip install pytest pytest-cov pytest-asyncio pytest-mock
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          elif [ -f pyproject.toml ]; then
            pip install .
            pip install pytest pytest-cov pytest-asyncio pytest-mock
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          fi
          
          # Создание .env файла для тестов, если нужно
          if [ -f .env.example ] && [ ! -f .env ]; then
            echo "Создание .env из .env.example для тестов..."
            cp .env.example .env
          fi
          
          echo "✅ Зависимости для тестирования установлены"
      
      - name: Run tests with coverage
        run: |
          echo "Запуск тестов с анализом покрытия..."
          if [ -f poetry.lock ] && [ "${{ env.POETRY_AVAILABLE }}" == "true" ]; then
            poetry run pytest --cov=src --cov-report=xml --cov-report=term --cov-fail-under=50 || echo "::warning::Тесты покрытия имели проблемы или не достигли минимального уровня покрытия (50%)"
          else
            pytest --cov=src --cov-report=xml --cov-report=term --cov-fail-under=50 || echo "::warning::Тесты покрытия имели проблемы или не достигли минимального уровня покрытия (50%)"
          fi
        env:
          DMARKET_PUBLIC_KEY: ${{ secrets.DMARKET_PUBLIC_KEY || 'test_public_key' }}
          DMARKET_SECRET_KEY: ${{ secrets.DMARKET_SECRET_KEY || 'test_secret_key' }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || 'test_token' }}
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Check if docs directory exists
        id: check-docs
        run: |
          echo "Проверка наличия директории docs..."
          if [ -d "docs" ]; then
            echo "docs_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Директория docs найдена"
          else
            echo "docs_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ Директория docs не найдена, документация не будет собрана"
          fi
      
      - name: Install dependencies
        if: steps.check-docs.outputs.docs_exists == 'true'
        run: |
          echo "Установка зависимостей для сборки документации..."
          python -m pip install --upgrade pip
          
          # Установка зависимостей проекта
          if [ -f poetry.lock ]; then
            echo "Обнаружен poetry.lock, устанавливаем Poetry..."
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH
            export PATH="$HOME/.local/bin:$PATH"
            
            echo "Установка зависимостей через Poetry..."
            poetry config virtualenvs.create true
            poetry config virtualenvs.in-project true
            poetry install --no-interaction
            echo "POETRY_AVAILABLE=true" >> $GITHUB_ENV
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          elif [ -f pyproject.toml ]; then
            pip install .
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          fi
          
          # Установка зависимостей для документации
          pip install sphinx sphinx-rtd-theme
          
          # Если есть requirements-docs.txt, установим его тоже
          if [ -f "docs/requirements-docs.txt" ]; then
            pip install -r docs/requirements-docs.txt
          fi
          
          echo "✅ Зависимости для документации установлены"
      
      - name: Build documentation
        if: steps.check-docs.outputs.docs_exists == 'true'
        run: |
          echo "Сборка документации Sphinx..."
          cd docs
          if [ -f "Makefile" ]; then
            make html
          else
            sphinx-build -b html source build/html
          fi
          touch build/html/.nojekyll  # Добавляем .nojekyll для правильной работы с GitHub Pages
          echo "✅ Документация успешно собрана"
      
      - name: Deploy to GitHub Pages
        if: steps.check-docs.outputs.docs_exists == 'true'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: docs/build/html
          branch: gh-pages 