name: Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allow manual triggering

# Управление параллелизмом для предотвращения одновременных запусков
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Ограничение прав доступа GITHUB_TOKEN
permissions:
  contents: read
  checks: write  # Для публикации результатов проверок

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Linting and Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          install-poetry: ${{ hashFiles('poetry.lock') != '' && 'true' || 'false' }}
          install-dev-deps: 'true'
          create-env-file: 'false'
        continue-on-error: true
      
      - name: Fallback Python setup
        if: ${{ failure() }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Fallback dependencies installation
        if: ${{ failure() }}
        run: |
          echo "Установка зависимостей для линтинга..."
          python -m pip install --upgrade pip
          
          if [ -f poetry.lock ]; then
            echo "✅ Обнаружен poetry.lock, устанавливаем Poetry..."
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH
            export PATH="$HOME/.local/bin:$PATH"
            
            poetry config virtualenvs.create true
            poetry config virtualenvs.in-project true
            poetry install --no-interaction
            echo "POETRY_AVAILABLE=true" >> $GITHUB_ENV
          elif [ -f requirements.txt ]; then
            echo "✅ Установка из requirements.txt..."
            pip install -r requirements.txt
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          elif [ -f pyproject.toml ]; then
            echo "✅ Установка из pyproject.toml..."
            pip install .
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          else
            echo "⚠️ Не найдены файлы зависимостей"
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          fi
          
          # Всегда устанавливаем основные инструменты для проверки кода
          pip install black ruff mypy
          echo "✅ Зависимости для линтинга установлены"
      
      - name: Run Black
        run: |
          echo "Проверка форматирования с помощью Black..."
          if [ -f poetry.lock ] && [ "${{ env.POETRY_AVAILABLE }}" == "true" ]; then
            poetry run black . --check || echo "::warning::Black выявил проблемы форматирования"
          else
            black . --check || echo "::warning::Black выявил проблемы форматирования"
          fi
      
      - name: Run Ruff
        run: |
          echo "Проверка стиля кода с помощью Ruff..."
          if [ -f poetry.lock ] && [ "${{ env.POETRY_AVAILABLE }}" == "true" ]; then
            poetry run ruff check . --output-format=github || echo "::warning::Ruff выявил проблемы стиля кода"
          else
            ruff check . --output-format=github || echo "::warning::Ruff выявил проблемы стиля кода"
          fi
      
      - name: Run MyPy
        run: |
          echo "Проверка типов с помощью MyPy..."
          if [ -f poetry.lock ] && [ "${{ env.POETRY_AVAILABLE }}" == "true" ]; then
            poetry run mypy . || echo "::warning::MyPy выявил проблемы с типами"
          else
            mypy . || echo "::warning::MyPy выявил проблемы с типами"
          fi
      
      - name: Generate code quality report
        if: always()
        run: |
          echo "Генерация отчета о качестве кода..."
          
          # Создаем директорию для отчетов
          mkdir -p reports
          
          # Сохраняем результаты проверок
          if [ -f poetry.lock ] && [ "${{ env.POETRY_AVAILABLE }}" == "true" ]; then
            poetry run black . --check > reports/black-report.txt 2>&1 || true
            poetry run ruff check . > reports/ruff-report.txt 2>&1 || true
            poetry run mypy . > reports/mypy-report.txt 2>&1 || true
          else
            black . --check > reports/black-report.txt 2>&1 || true
            ruff check . > reports/ruff-report.txt 2>&1 || true
            mypy . > reports/mypy-report.txt 2>&1 || true
          fi
          
          echo "✅ Отчеты о качестве кода сохранены"
      
      - name: Upload code quality report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: reports/
          retention-days: 7

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install security tools
        run: |
          echo "Установка инструментов для проверки безопасности..."
          python -m pip install --upgrade pip
          pip install safety bandit
          echo "✅ Инструменты для проверки безопасности установлены"
      
      - name: Check dependencies with Safety
        run: |
          echo "Проверка зависимостей на уязвимости с помощью Safety..."
          
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt || echo "::warning::Safety обнаружил уязвимости в зависимостях"
          elif [ -f poetry.lock ]; then
            pip install poetry
            poetry export -f requirements.txt --output requirements-export.txt
            safety check -r requirements-export.txt || echo "::warning::Safety обнаружил уязвимости в зависимостях"
          else
            echo "::warning::Не найдены файлы зависимостей для проверки безопасности"
          fi
      
      - name: Scan code with Bandit
        run: |
          echo "Сканирование кода на уязвимости с помощью Bandit..."
          bandit -r ./src || echo "::warning::Bandit обнаружил потенциальные уязвимости в коде"
      
      - name: Generate security report
        if: always()
        run: |
          echo "Генерация отчета о безопасности..."
          
          # Создаем директорию для отчетов
          mkdir -p security-reports
          
          # Сохраняем результаты проверок
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --json > security-reports/safety-report.json 2>&1 || true
          elif [ -f poetry.lock ]; then
            pip install poetry
            poetry export -f requirements.txt --output requirements-export.txt
            safety check -r requirements-export.txt --json > security-reports/safety-report.json 2>&1 || true
          fi
          
          bandit -r ./src -f json -o security-reports/bandit-report.json || true
          
          echo "✅ Отчеты о безопасности сохранены"
      
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: security-reports/
          retention-days: 7

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          install-poetry: ${{ hashFiles('poetry.lock') != '' && 'true' || 'false' }}
          install-dev-deps: 'true'
        continue-on-error: true
      
      - name: Fallback Python setup
        if: ${{ failure() }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Fallback dependencies installation
        if: ${{ failure() }}
        run: |
          echo "Установка зависимостей для сборки документации..."
          python -m pip install --upgrade pip
          
          # Установка зависимостей проекта
          if [ -f poetry.lock ]; then
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH
            export PATH="$HOME/.local/bin:$PATH"
            poetry config virtualenvs.create true
            poetry config virtualenvs.in-project true
            poetry install --no-interaction
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f pyproject.toml ]; then
            pip install .
          fi
          
          # Установка зависимостей для документации
          pip install sphinx sphinx-rtd-theme
          
          # Если есть requirements-docs.txt, установим его тоже
          if [ -f "docs/requirements-docs.txt" ]; then
            pip install -r docs/requirements-docs.txt
          fi
      
      - name: Build documentation
        run: |
          if [ -d "docs" ]; then
            echo "Сборка документации..."
            cd docs
            make html || python -m sphinx.cmd.build -b html source build/html
            echo "✅ Документация успешно собрана"
          else
            echo "::warning::Директория docs не найдена, документация не будет собрана"
          fi
      
      - name: Upload documentation
        if: success() && hashFiles('docs/build/html/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/build/html
          retention-days: 7 