name: Python Tests

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/python-tests.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/python-tests.yml'
  workflow_dispatch:  # Allow manual triggering

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ GITHUB_TOKEN
permissions:
  contents: read
  checks: write  # –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤

jobs:
  test:
    name: Run Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ setup-python-env
      - name: Check for composite action
        id: check-action
        run: |
          if [ -d ".github/actions/setup-python-env" ] && [ -f ".github/actions/setup-python-env/action.yml" ]; then
            echo "action_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —ç–∫—à–µ–Ω –Ω–∞–π–¥–µ–Ω"
          else
            echo "::warning::–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —ç–∫—à–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .github/actions/setup-python-env, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"
            echo "action_exists=false" >> $GITHUB_OUTPUT
          fi
      
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à composite action, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
      - name: Setup Python environment using composite action
        if: steps.check-action.outputs.action_exists == 'true'
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ matrix.python-version }}
          install-poetry: ${{ hashFiles('poetry.lock') != '' && 'true' || 'false' }}
          install-dev-deps: 'true'
          create-env-file: 'true'
      
      # –†–µ–∑–µ—Ä–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ composite action –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      - name: Fallback Python setup
        if: steps.check-action.outputs.action_exists != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      # –†–µ–∑–µ—Ä–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –µ—Å–ª–∏ composite action –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      - name: Fallback dependencies setup
        if: steps.check-action.outputs.action_exists != 'true'
        run: |
          python -m pip install --upgrade pip
          
          # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
          if [ -f poetry.lock ]; then
            echo "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω poetry.lock, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Poetry..."
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH
            export PATH="$HOME/.local/bin:$PATH"
            
            poetry config virtualenvs.create true
            poetry config virtualenvs.in-project true
            poetry install --no-interaction
            echo "POETRY_AVAILABLE=true" >> $GITHUB_ENV
          elif [ -f requirements.txt ]; then
            echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ requirements.txt..."
            pip install -r requirements.txt
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          elif [ -f pyproject.toml ]; then
            echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ pyproject.toml..."
            pip install .
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
            echo "POETRY_AVAILABLE=false" >> $GITHUB_ENV
          fi
          
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
          pip install pytest pytest-asyncio pytest-cov pytest-mock
          
          # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
          if [ -f .env.example ] && [ ! -f .env ]; then
            echo "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞..."
            cp .env.example .env
          fi
          
          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PYTHONPATH
          echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PYTHONPATH..."
          echo "PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH" >> $GITHUB_ENV
      
      - name: Run tests with pytest
        run: |
          echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
          if [ "${{ env.POETRY_AVAILABLE }}" == "true" ] || [ -f poetry.lock ]; then
            poetry run python -m pytest -xvs --cov=src --cov-report=xml
          else
            python -m pytest -xvs --cov=src --cov-report=xml
          fi
        env:
          DMARKET_PUBLIC_KEY: ${{ secrets.DMARKET_PUBLIC_KEY || 'test_public_key' }}
          DMARKET_SECRET_KEY: ${{ secrets.DMARKET_SECRET_KEY || 'test_secret_key' }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || 'test_token' }}
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            .coverage
            pytest-report.xml
          retention-days: 7
      
      - name: Debug info
        if: always()
        run: |
          echo "üíª –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
          echo "Python version: $(python --version)"
          echo "System: $(uname -a)"
          echo "Working directory: $(pwd)"
          echo "SHA: ${{ github.sha }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
