name: CI

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at 00:00 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better metrics
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Set up Poetry cache
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-venv-
      
      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
          poetry install --no-interaction
      
      - name: Lint with Ruff
        run: |
          poetry run ruff check . --output-format=github
      
      - name: Check formatting with Black
        run: |
          poetry run black . --check
      
      - name: Type check with mypy
        run: |
          poetry run mypy .
      
      - name: Create .env file from example
        run: |
          if [ -f .env.example ]; then
            cp .env.example .env
          fi
      
      - name: Run simplified tests
        run: |
          # Set PYTHONPATH for correct imports
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          # Run simplified test suite that uses mocks
          poetry run pytest tests/dmarket/test_dmarket_api_simplified.py tests/telegram_bot/test_arbitrage_scanner_simplified.py -v
      
      - name: Run tests with pytest and coverage
        run: |
          # Set PYTHONPATH for correct imports
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          # Run tests with coverage
          poetry run pytest --cov=src --cov-report=xml --cov-report=term
        env:
          DMARKET_PUBLIC_KEY: ${{ secrets.DMARKET_PUBLIC_KEY || 'test_public_key' }}
          DMARKET_SECRET_KEY: ${{ secrets.DMARKET_SECRET_KEY || 'test_secret_key' }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || 'test_token' }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          
      - name: Archive test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            .coverage
            coverage.xml
          retention-days: 7
