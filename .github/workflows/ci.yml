name: CI

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at 00:00 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better metrics
      
      - name: Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ matrix.python-version }}
          install-poetry: ${{ hashFiles('poetry.lock') != '' && 'true' || 'false' }}
          install-dev-deps: 'true'
          create-env-file: 'true'
      
      - name: Check for Poetry vs pip installation
        id: check-poetry
        run: |
          if [ -f poetry.lock ]; then
            echo "uses_poetry=true" >> $GITHUB_OUTPUT
          else
            echo "uses_poetry=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Lint with Ruff
        run: |
          if [ "${{ steps.check-poetry.outputs.uses_poetry }}" == "true" ]; then
            poetry run python -m ruff check . --output-format=github
          else
            python -m ruff check . --output-format=github
          fi
      
      - name: Check formatting with Black
        run: |
          if [ "${{ steps.check-poetry.outputs.uses_poetry }}" == "true" ]; then
            poetry run black . --check
          else
            black . --check
          fi
      
      - name: Type check with mypy
        run: |
          if [ "${{ steps.check-poetry.outputs.uses_poetry }}" == "true" ]; then
            poetry run mypy .
          else
            mypy .
          fi
      
      - name: Check for test files
        id: check-tests
        run: |
          if [ -f tests/dmarket/test_dmarket_api_simplified.py ] && [ -f tests/telegram_bot/test_arbitrage_scanner_simplified.py ]; then
            echo "simplified_tests=true" >> $GITHUB_OUTPUT
          else
            echo "simplified_tests=false" >> $GITHUB_OUTPUT
            echo "Simplified test files not found, will run alternative tests"
          fi
      
      - name: Run simplified tests
        if: steps.check-tests.outputs.simplified_tests == 'true'
        run: |
          # Run simplified test suite that uses mocks
          if [ "${{ steps.check-poetry.outputs.uses_poetry }}" == "true" ]; then
            poetry run pytest tests/dmarket/test_dmarket_api_simplified.py tests/telegram_bot/test_arbitrage_scanner_simplified.py -v
          else
            pytest tests/dmarket/test_dmarket_api_simplified.py tests/telegram_bot/test_arbitrage_scanner_simplified.py -v
          fi
        env:
          DMARKET_PUBLIC_KEY: ${{ secrets.DMARKET_PUBLIC_KEY || 'test_public_key' }}
          DMARKET_SECRET_KEY: ${{ secrets.DMARKET_SECRET_KEY || 'test_secret_key' }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || 'test_token' }}
      
      - name: Run alternative tests
        if: steps.check-tests.outputs.simplified_tests == 'false'
        run: |
          # Look for general test files in the expected locations
          if [ "${{ steps.check-poetry.outputs.uses_poetry }}" == "true" ]; then
            poetry run pytest tests/dmarket/ tests/telegram_bot/ -k "not integration and not slow" -v --maxfail=3
          else
            pytest tests/dmarket/ tests/telegram_bot/ -k "not integration and not slow" -v --maxfail=3
          fi
        env:
          DMARKET_PUBLIC_KEY: ${{ secrets.DMARKET_PUBLIC_KEY || 'test_public_key' }}
          DMARKET_SECRET_KEY: ${{ secrets.DMARKET_SECRET_KEY || 'test_secret_key' }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || 'test_token' }}
      
      - name: Run tests with pytest and coverage
        run: |
          # Run tests with coverage
          if [ "${{ steps.check-poetry.outputs.uses_poetry }}" == "true" ]; then
            poetry run pytest --cov=src --cov-report=xml --cov-report=term
          else
            pytest --cov=src --cov-report=xml --cov-report=term
          fi
        env:
          DMARKET_PUBLIC_KEY: ${{ secrets.DMARKET_PUBLIC_KEY || 'test_public_key' }}
          DMARKET_SECRET_KEY: ${{ secrets.DMARKET_SECRET_KEY || 'test_secret_key' }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || 'test_token' }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          
      - name: Archive test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            .coverage
            coverage.xml
          retention-days: 7
