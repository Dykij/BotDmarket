name: 'Security Check'
description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'

inputs:
  python-version:
    description: '–í–µ—Ä—Å–∏—è Python –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
    required: false
    default: '3.11'
  scan-dependencies:
    description: '–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏'
    required: false
    default: 'true'
  scan-code:
    description: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏'
    required: false
    default: 'true'
  src-directory:
    description: '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
    required: false
    default: './src'
  fail-on-high:
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π'
    required: false
    default: 'false'
  generate-report:
    description: '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: 'pip'
    
    - name: Install security tools
      shell: bash
      run: |
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
        python -m pip install --upgrade pip
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        pip install safety bandit pip-audit
        
        echo "‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    - name: Check for dependency files
      id: check-deps
      shell: bash
      run: |
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        
        if [ -f "requirements.txt" ]; then
          echo "has_requirements=true" >> $GITHUB_OUTPUT
          echo "‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª requirements.txt"
        else
          echo "has_requirements=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        if [ -f "poetry.lock" ]; then
          echo "has_poetry=true" >> $GITHUB_OUTPUT
          echo "‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª poetry.lock"
        else
          echo "has_poetry=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è –§–∞–π–ª poetry.lock –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    
    - name: Export dependencies from Poetry
      if: steps.check-deps.outputs.has_poetry == 'true' && inputs.scan-dependencies == 'true'
      shell: bash
      run: |
        echo "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ poetry.lock..."
        pip install poetry
        poetry export -f requirements.txt --output requirements-export.txt
        echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ requirements-export.txt"
    
    - name: Run Safety check
      if: inputs.scan-dependencies == 'true'
      shell: bash
      run: |
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é Safety..."
        mkdir -p security-reports
        
        if [ "${{ steps.check-deps.outputs.has_requirements }}" == "true" ]; then
          SAFETY_EXIT_CODE=0
          safety check -r requirements.txt --output json > security-reports/safety-requirements.json || SAFETY_EXIT_CODE=$?
          safety check -r requirements.txt --output text > security-reports/safety-requirements.txt || true
          
          if [ $SAFETY_EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è Safety –æ–±–Ω–∞—Ä—É–∂–∏–ª —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ requirements.txt"
            if [ "${{ inputs.fail-on-high }}" == "true" ]; then
              exit $SAFETY_EXIT_CODE
            fi
          else
            echo "‚úÖ Safety –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ requirements.txt"
          fi
        fi
        
        if [ "${{ steps.check-deps.outputs.has_poetry }}" == "true" ]; then
          SAFETY_EXIT_CODE=0
          safety check -r requirements-export.txt --output json > security-reports/safety-poetry.json || SAFETY_EXIT_CODE=$?
          safety check -r requirements-export.txt --output text > security-reports/safety-poetry.txt || true
          
          if [ $SAFETY_EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è Safety –æ–±–Ω–∞—Ä—É–∂–∏–ª —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö Poetry"
            if [ "${{ inputs.fail-on-high }}" == "true" ]; then
              exit $SAFETY_EXIT_CODE
            fi
          else
            echo "‚úÖ Safety –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö Poetry"
          fi
        fi
        
        if [ "${{ steps.check-deps.outputs.has_requirements }}" != "true" ] && [ "${{ steps.check-deps.outputs.has_poetry }}" != "true" ]; then
          echo "‚ö†Ô∏è –§–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É Safety"
        fi
    
    - name: Run pip-audit check
      if: inputs.scan-dependencies == 'true'
      shell: bash
      run: |
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é pip-audit..."
        mkdir -p security-reports
        
        if [ "${{ steps.check-deps.outputs.has_requirements }}" == "true" ]; then
          pip-audit -r requirements.txt -o json > security-reports/pip-audit-requirements.json || echo "‚ö†Ô∏è pip-audit –æ–±–Ω–∞—Ä—É–∂–∏–ª —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ requirements.txt"
        fi
        
        if [ "${{ steps.check-deps.outputs.has_poetry }}" == "true" ]; then
          pip-audit -r requirements-export.txt -o json > security-reports/pip-audit-poetry.json || echo "‚ö†Ô∏è pip-audit –æ–±–Ω–∞—Ä—É–∂–∏–ª —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö Poetry"
        fi
        
        if [ "${{ steps.check-deps.outputs.has_requirements }}" != "true" ] && [ "${{ steps.check-deps.outputs.has_poetry }}" != "true" ]; then
          echo "‚ö†Ô∏è –§–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É pip-audit"
        fi
    
    - name: Run Bandit code scan
      if: inputs.scan-code == 'true'
      shell: bash
      run: |
        echo "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é Bandit..."
        mkdir -p security-reports
        
        if [ -d "${{ inputs.src-directory }}" ]; then
          BANDIT_EXIT_CODE=0
          bandit -r ${{ inputs.src-directory }} -f json -o security-reports/bandit-results.json || BANDIT_EXIT_CODE=$?
          bandit -r ${{ inputs.src-directory }} -f txt -o security-reports/bandit-results.txt || true
          
          if [ $BANDIT_EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è Bandit –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ"
            if [ "${{ inputs.fail-on-high }}" == "true" ]; then
              exit $BANDIT_EXIT_CODE
            fi
          else
            echo "‚úÖ Bandit –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∫–æ–¥–µ"
          fi
        else
          echo "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${{ inputs.src-directory }} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"
        fi
    
    - name: Generate security report
      if: inputs.generate-report == 'true'
      shell: bash
      run: |
        echo "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
        mkdir -p security-reports
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Markdown
        echo "# üîí –û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" > security-reports/security-summary.md
        echo "" >> security-reports/security-summary.md
        echo "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: $(date)" >> security-reports/security-summary.md
        echo "" >> security-reports/security-summary.md
        
        echo "## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π" >> security-reports/security-summary.md
        echo "" >> security-reports/security-summary.md
        
        # Safety —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        echo "### Safety Check" >> security-reports/security-summary.md
        if [ -f security-reports/safety-requirements.json ] || [ -f security-reports/safety-poetry.json ]; then
          echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" >> security-reports/security-summary.md
          echo "" >> security-reports/security-summary.md
          
          if grep -q "\"vulnerabilities\": \[\]" security-reports/safety-*.json 2>/dev/null; then
            echo "‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ" >> security-reports/security-summary.md
          else
            echo "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö" >> security-reports/security-summary.md
          fi
        else
          echo "‚ö†Ô∏è –§–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞" >> security-reports/security-summary.md
        fi
        echo "" >> security-reports/security-summary.md
        
        # Bandit —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        echo "## –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞" >> security-reports/security-summary.md
        echo "" >> security-reports/security-summary.md
        echo "### Bandit Scan" >> security-reports/security-summary.md
        if [ -f security-reports/bandit-results.json ]; then
          echo "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" >> security-reports/security-summary.md
          echo "" >> security-reports/security-summary.md
          
          if grep -q "\"metrics\": \{\}, \"results\": \[\]" security-reports/bandit-results.json; then
            echo "‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ" >> security-reports/security-summary.md
          else
            echo "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ" >> security-reports/security-summary.md
          fi
        else
          echo "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" >> security-reports/security-summary.md
        fi
        
        echo "‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: security-reports/security-summary.md" 