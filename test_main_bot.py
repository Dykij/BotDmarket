"""Modified version of the main Telegram bot for DMarket."""

# Fix APScheduler timezone issues
import importlib.util

if importlib.util.find_spec("tzlocal") is not None:
    import tzlocal.unix
    original_get_localzone = tzlocal.unix.get_localzone

    def patched_get_localzone():
        import pytz
        return pytz.timezone("Europe/Moscow")

    tzlocal.unix.get_localzone = patched_get_localzone

import logging
import os
import traceback

from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è APScheduler
os.environ["TZ"] = "Europe/Moscow"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user = update.effective_user

    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DMarket.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –º–µ–∂–¥—É –ø–ª–æ—â–∞–¥–∫–∞–º–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API DMarket\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞", callback_data="arbitrage"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(welcome_message, reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API DMarket\n"
        "/arbitrage - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n"
        "/price_alerts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –æ —Ü–µ–Ω–∞—Ö"
    )

    await update.message.reply_text(help_text)


async def dmarket_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å API DMarket."""
    message = await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API DMarket...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π API
    public_key = os.getenv("DMARKET_PUBLIC_KEY")
    secret_key = os.getenv("DMARKET_SECRET_KEY")

    if public_key and secret_key:
        status_text = (
            "‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
            "API endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        )
    else:
        status_text = (
            "‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DMARKET_PUBLIC_KEY –∏ DMARKET_SECRET_KEY –≤ .env —Ñ–∞–π–ª–µ."
        )

    await message.edit_text(status_text)


async def arbitrage_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /arbitrage."""
    keyboard = [
        [
            InlineKeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É", callback_data="arbitrage_game_selection"),
        ],
        [
            InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂", callback_data="arbitrage_auto"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
        reply_markup=reply_markup,
    )


async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()  # –£–±–∏—Ä–∞–µ–º —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏

    callback_data = query.data

    if callback_data == "arbitrage":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        keyboard = [
            [
                InlineKeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É", callback_data="arbitrage_game_selection"),
            ],
            [
                InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂", callback_data="arbitrage_auto"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=reply_markup,
        )

    elif callback_data.startswith("arbitrage_"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        arb_type = callback_data.replace("arbitrage_", "")

        if arb_type == "game_selection":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä—ã
            keyboard = [
                [
                    InlineKeyboardButton("üéÆ CS:GO", callback_data="select_game_csgo"),
                    InlineKeyboardButton("üéÆ DOTA 2", callback_data="select_game_dota2"),
                ],
                [
                    InlineKeyboardButton("üéÆ RUST", callback_data="select_game_rust"),
                    InlineKeyboardButton("üéÆ TF2", callback_data="select_game_tf2"),
                ],
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="arbitrage"),
                ],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
                reply_markup=reply_markup,
            )

        elif arb_type == "auto":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            keyboard = [
                [
                    InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="auto_start:best"),
                    InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="auto_stop"),
                ],
                [
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="auto_stats"),
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="arbitrage"),
                ],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂:",
                reply_markup=reply_markup,
            )

    elif callback_data.startswith("select_game_"):
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
        game = callback_data.replace("select_game_", "")
        context.user_data["current_game"] = game

        # –°–ª–æ–≤–∞—Ä—å –ø–æ–ª–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏–≥—Ä
        games = {
            "csgo": "CS:GO",
            "dota2": "DOTA 2",
            "rust": "RUST",
            "tf2": "Team Fortress 2",
        }

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å–Ω–æ–≤–∞
        keyboard = [
            [
                InlineKeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É", callback_data="arbitrage_game_selection"),
            ],
            [
                InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂", callback_data="arbitrage_auto"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞: {games.get(game, game)}\n\n"
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=reply_markup,
        )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞."""
    if update is None:
        # –ï—Å–ª–∏ update None, –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.error(f"Exception: {context.error}")
        logger.error(traceback.format_exc())
        return

    error = context.error

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger.error(f"Exception while handling an update: {error}")
    logger.error(traceback.format_exc())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
    error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    if update.effective_message:
        await update.effective_message.reply_text(error_message)


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    token = os.getenv("TELEGRAM_BOT_TOKEN")

    if not token:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —è–≤–Ω—ã–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º job_queue
    application = Application.builder().token(token).job_queue(None).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", dmarket_status))
    application.add_handler(CommandHandler("arbitrage", arbitrage_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
    application.add_handler(CallbackQueryHandler(button_callback_handler))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ polling-—Ä–µ–∂–∏–º–µ
    try:
        logger.info("Starting bot...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")


if __name__ == "__main__":
    main()
