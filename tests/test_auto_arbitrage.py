"""
–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext

from src.telegram_bot.auto_arbitrage import (
    format_results, 
    show_auto_stats_with_pagination, 
    handle_pagination,
    start_auto_trading,
    stop_auto_trading
)


@pytest.fixture
def mock_query():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ callback query."""
    query = MagicMock()
    query.from_user = MagicMock()
    query.from_user.id = 12345
    query.edit_message_text = AsyncMock()
    return query


@pytest.fixture
def mock_context():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    context = MagicMock(spec=CallbackContext)
    context.user_data = {"current_game": "csgo"}
    return context


@pytest.mark.asyncio
async def test_format_results():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    items = [
        {
            "title": "AK-47 | Redline (Field-Tested)",
            "price": {"amount": 1000},
            "profit": 100,
            "profit_percent": 10.0
        },
        {
            "title": "AWP | Asiimov (Field-Tested)",
            "price": {"amount": 3000},
            "profit": 300,
            "profit_percent": 10.0
        }
    ]
    
    result = await format_results(items, "auto_medium", "csgo")
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
    assert "ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞" in result
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    assert "AK-47 | Redline" in result
    assert "AWP | Asiimov" in result
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ –ø—Ä–∏–±—ã–ª–∏
    assert "$10.00" in result  # –¶–µ–Ω–∞ AK-47
    assert "$30.00" in result  # –¶–µ–Ω–∞ AWP
    assert "$1.00" in result   # –ü—Ä–∏–±—ã–ª—å AK-47
    assert "$3.00" in result   # –ü—Ä–∏–±—ã–ª—å AWP
    assert "10.0%" in result   # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏


@pytest.mark.asyncio
@patch("src.telegram_bot.auto_arbitrage.pagination_manager")
async def test_handle_pagination_next(mock_pagination_manager, mock_query, mock_context):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ - —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
    mock_pagination_manager.next_page = MagicMock()
    
    # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é show_auto_stats_with_pagination
    with patch("src.telegram_bot.auto_arbitrage.show_auto_stats_with_pagination", new=AsyncMock()) as mock_show:
        await handle_pagination(mock_query, mock_context, "next", "auto_medium")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ next_page –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        mock_pagination_manager.next_page.assert_called_once_with(mock_query.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        mock_show.assert_called_once_with(mock_query, mock_context)


@pytest.mark.asyncio
@patch("src.telegram_bot.auto_arbitrage.pagination_manager")
async def test_handle_pagination_prev(mock_pagination_manager, mock_query, mock_context):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
    mock_pagination_manager.prev_page = MagicMock()
    
    # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é show_auto_stats_with_pagination
    with patch("src.telegram_bot.auto_arbitrage.show_auto_stats_with_pagination", new=AsyncMock()) as mock_show:
        await handle_pagination(mock_query, mock_context, "prev", "auto_medium")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ prev_page –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        mock_pagination_manager.prev_page.assert_called_once_with(mock_query.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        mock_show.assert_called_once_with(mock_query, mock_context)


@pytest.mark.asyncio
@patch("src.telegram_bot.auto_arbitrage.format_results")
@patch("src.telegram_bot.auto_arbitrage.pagination_manager")
@patch("src.telegram_bot.auto_arbitrage.InlineKeyboardMarkup")
@patch("src.telegram_bot.auto_arbitrage.InlineKeyboardButton")
@patch("src.telegram_bot.auto_arbitrage.get_back_to_arbitrage_keyboard")
async def test_show_auto_stats_with_pagination_with_items(
    mock_get_keyboard, 
    mock_button, 
    mock_markup,
    mock_pagination_manager, 
    mock_format_results, 
    mock_query, 
    mock_context
):
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π - —Å –¥–∞–Ω–Ω—ã–º–∏."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
    mock_pagination_manager.get_page.return_value = (
        [{"title": "Test Item"}], 
        0,  # current_page
        2   # total_pages
    )
    
    mock_pagination_manager.get_mode.return_value = "auto_medium"
    mock_format_results.return_value = "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
    mock_markup.return_value = "keyboard_markup"
    mock_get_keyboard.return_value = "back_keyboard"
    
    # –í—ã–∑–æ–≤ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    await show_auto_stats_with_pagination(mock_query, mock_context)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_pagination_manager.get_page.assert_called_once_with(mock_query.from_user.id)
    mock_format_results.assert_called_once()
    mock_query.edit_message_text.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –≤—ã–∑–æ–≤–µ edit_message_text
    call_kwargs = mock_query.edit_message_text.call_args[1]
    assert "text" in call_kwargs
    assert "reply_markup" in call_kwargs


@pytest.mark.asyncio
@patch("src.telegram_bot.auto_arbitrage.format_results")
@patch("src.telegram_bot.auto_arbitrage.pagination_manager")
@patch("src.telegram_bot.auto_arbitrage.get_back_to_arbitrage_keyboard")
async def test_show_auto_stats_with_pagination_no_items(
    mock_get_keyboard, 
    mock_pagination_manager, 
    mock_format_results, 
    mock_query, 
    mock_context
):
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π - –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
    mock_pagination_manager.get_page.return_value = (
        [],   # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        0,    # current_page
        0     # total_pages
    )
    
    mock_pagination_manager.get_mode.return_value = "auto_medium"
    mock_get_keyboard.return_value = "back_keyboard"
    
    # –í—ã–∑–æ–≤ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    await show_auto_stats_with_pagination(mock_query, mock_context)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_pagination_manager.get_page.assert_called_once_with(mock_query.from_user.id)
    mock_format_results.assert_not_called()  # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–æ–≤–∞, —Ç.–∫. –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ edit_message_text
    mock_query.edit_message_text.assert_called_once()
    call_kwargs = mock_query.edit_message_text.call_args[1]
    assert "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ" in call_kwargs["text"]
    assert call_kwargs["reply_markup"] == "back_keyboard"
