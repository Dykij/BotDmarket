"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏–∑ –º–æ–¥—É–ª—è commands.py
"""
import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import Update, User

from src.telegram_bot.handlers.commands import (
    start,
    help_command,
    dmarket_status,
    arbitrage_command
)


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.commands.get_localized_text")
@patch("src.telegram_bot.handlers.commands.get_arbitrage_keyboard")
async def test_start_command(mock_get_keyboard, mock_get_localized_text):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏
    mock_keyboard = MagicMock()
    mock_get_keyboard.return_value = mock_keyboard
    mock_get_localized_text.return_value = "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è update –∏ context
    user = MagicMock(spec=User)
    user.id = 12345
    user.mention_html.return_value = "<i>@test_user</i>"

    update = MagicMock(spec=Update)
    update.effective_user = user
    update.message = AsyncMock()

    context = MagicMock()

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await start(update, context)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_get_localized_text.assert_called_once_with(12345, "welcome", user="<i>@test_user</i>")
    mock_get_keyboard.assert_called_once()
    update.message.reply_html.assert_called_once_with(
        "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_markup=mock_keyboard
    )


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.commands.get_localized_text")
async def test_help_command(mock_get_localized_text):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏
    mock_get_localized_text.return_value = "–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è update –∏ context
    user = MagicMock(spec=User)
    user.id = 12345

    update = MagicMock(spec=Update)
    update.effective_user = user
    update.message = AsyncMock()

    context = MagicMock()

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await help_command(update, context)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_get_localized_text.assert_called_once_with(12345, "help")
    update.message.reply_text.assert_called_once_with("–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.dmarket_status.dmarket_status_impl")
async def test_dmarket_status(mock_dmarket_status_impl):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /dmarket –∏–ª–∏ /status."""
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è update –∏ context
    update = MagicMock(spec=Update)
    context = MagicMock()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∫–∞
    mock_dmarket_status_impl.return_value = None

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await dmarket_status(update, context)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_dmarket_status_impl.assert_called_once_with(update, context)


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.commands.get_arbitrage_keyboard")
async def test_arbitrage_command(mock_get_keyboard):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /arbitrage."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏
    mock_keyboard = MagicMock()
    mock_get_keyboard.return_value = mock_keyboard

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è update –∏ context
    update = MagicMock(spec=Update)
    update.message = AsyncMock()

    context = MagicMock()

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await arbitrage_command(update, context)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_get_keyboard.assert_called_once()
    update.message.reply_text.assert_called_once_with(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
        reply_markup=mock_keyboard
    )
