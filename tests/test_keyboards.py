"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è keyboards, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram-–±–æ—Ç–∞.
"""

import pytest
from unittest.mock import patch

from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from src.telegram_bot.keyboards import (
    get_arbitrage_keyboard,
    get_game_selection_keyboard,
    get_auto_arbitrage_keyboard,
    get_back_to_arbitrage_keyboard
)


def test_get_arbitrage_keyboard():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    keyboard = get_arbitrage_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    assert isinstance(keyboard, InlineKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    assert len(keyboard.inline_keyboard) == 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–≥–æ–Ω–∞ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞)
    first_row = keyboard.inline_keyboard[0]
    assert len(first_row) == 2
    assert first_row[0].text == "üöÄ –†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞"
    assert first_row[0].callback_data == "arbitrage_boost"
    assert first_row[1].text == "üíº –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä"
    assert first_row[1].callback_data == "arbitrage_mid"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É (–≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é)
    last_row = keyboard.inline_keyboard[-1]
    assert len(last_row) == 1
    assert "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" in last_row[0].text
    assert last_row[0].callback_data == "back_to_menu"


def test_get_game_selection_keyboard():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã."""
    # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–≥—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    mock_games = {
        "csgo": "CS:GO",
        "dota2": "Dota 2",
        "rust": "Rust",
        "tf2": "Team Fortress 2"
    }
    
    with patch('src.telegram_bot.keyboards.GAMES', mock_games):
        keyboard = get_game_selection_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    assert isinstance(keyboard, InlineKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ (2 —Å—Ç—Ä–æ–∫–∏ —Å –∏–≥—Ä–∞–º–∏ + 1 —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥)
    assert len(keyboard.inline_keyboard) == 3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    all_buttons = [button for row in keyboard.inline_keyboard for button in row]
    
    # –ò—Å–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    game_buttons = [button for button in all_buttons if button.callback_data != "arbitrage"]
    assert len(game_buttons) == 4
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏ callback_data
    game_texts = [button.text for button in game_buttons]
    game_callbacks = [button.callback_data for button in game_buttons]
    
    assert "CS:GO" in game_texts
    assert "Dota 2" in game_texts
    assert "Rust" in game_texts
    assert "Team Fortress 2" in game_texts
    
    assert "game:csgo" in game_callbacks
    assert "game:dota2" in game_callbacks
    assert "game:rust" in game_callbacks
    assert "game:tf2" in game_callbacks
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_button = [button for button in all_buttons if button.callback_data == "arbitrage"][0]
    assert "–ù–∞–∑–∞–¥" in back_button.text


def test_get_auto_arbitrage_keyboard():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    keyboard = get_auto_arbitrage_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    assert isinstance(keyboard, InlineKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    assert len(keyboard.inline_keyboard) == 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
    all_buttons = [button for row in keyboard.inline_keyboard for button in row]
    callback_data = [button.callback_data for button in all_buttons]
    
    assert "auto_start:auto_low" in callback_data
    assert "auto_start:auto_medium" in callback_data
    assert "auto_start:auto_high" in callback_data
    assert "auto_stats" in callback_data
    assert "arbitrage" in callback_data


def test_get_back_to_arbitrage_keyboard():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    keyboard = get_back_to_arbitrage_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    assert isinstance(keyboard, InlineKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    assert len(keyboard.inline_keyboard) == 1
    assert len(keyboard.inline_keyboard[0]) == 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É
    button = keyboard.inline_keyboard[0][0]
    assert "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞" in button.text
    assert button.callback_data == "arbitrage"
