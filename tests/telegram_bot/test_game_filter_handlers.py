"""–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è game_filter_handlers.py.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–≥—Ä –¥–ª—è Telegram-–±–æ—Ç–∞.
"""

from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from telegram import Message, Update
from telegram.ext import CallbackContext

from src.telegram_bot.game_filter_handlers import (
    GAMES_MAPPING,
    handle_back_to_filters_callback,
    handle_change_game_filter,
    handle_filter_callback,
    handle_float_filter,
    handle_game_filters,
    handle_price_filter,
    handle_reset_filters,
    handle_search_with_filters,
    handle_select_game_filter_callback,
)


@pytest.fixture
def mock_update():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ Update –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    update = MagicMock(spec=Update)
    update.message = MagicMock(spec=Message)
    update.message.reply_text = AsyncMock()
    update.callback_query = MagicMock()
    update.callback_query.answer = AsyncMock()
    update.callback_query.edit_message_text = AsyncMock()
    update.callback_query.edit_message_reply_markup = AsyncMock()
    update.callback_query.data = "filter:price:csgo"
    return update


@pytest.fixture
def mock_context():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ CallbackContext –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    context = MagicMock(spec=CallbackContext)
    context.user_data = {"current_game": "csgo", "game_filters": {}}
    return context


@pytest.mark.asyncio
async def test_handle_game_filters_csgo(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /filters –¥–ª—è CS2."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–≥—Ä—É
    mock_context.user_data["current_game"] = "csgo"

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è FilterFactory.get_filter
    mock_filter = MagicMock()
    mock_filter.get_filter_description.return_value = (
        "–¶–µ–Ω–∞: $1.00 - $500.00\nFloat: 0.0 - 1.0"
    )

    with patch(
        "src.telegram_bot.game_filter_handlers.FilterFactory.get_filter",
        return_value=mock_filter,
    ):
        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_game_filters(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        mock_update.message.reply_text.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        args, kwargs = mock_update.message.reply_text.call_args
        message_text = args[0]
        assert "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã" in message_text
        assert "CS2" in message_text  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏–≥—Ä—ã

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = kwargs["reply_markup"].inline_keyboard
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è CS2
        assert any(
            button.text == "üîç Float" and "filter:float:csgo" in button.callback_data
            for row in keyboard
            for button in row
        )
        assert any(
            button.text == "üî∂ –í–Ω–µ—à–Ω–∏–π –≤–∏–¥"
            and "filter:exterior:csgo" in button.callback_data
            for row in keyboard
            for button in row
        )


@pytest.mark.asyncio
async def test_handle_game_filters_dota2(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /filters –¥–ª—è Dota 2."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–≥—Ä—É
    mock_context.user_data["current_game"] = "dota2"

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è FilterFactory.get_filter
    mock_filter = MagicMock()
    mock_filter.get_filter_description.return_value = (
        "–¶–µ–Ω–∞: $1.00 - $500.00\n–ì–µ—Ä–æ–∏: –õ—é–±—ã–µ"
    )

    with patch(
        "src.telegram_bot.game_filter_handlers.FilterFactory.get_filter",
        return_value=mock_filter,
    ):
        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_game_filters(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        args, kwargs = mock_update.message.reply_text.call_args
        message_text = args[0]
        assert "Dota 2" in message_text  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏–≥—Ä—ã

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è Dota 2
        keyboard = kwargs["reply_markup"].inline_keyboard
        assert any(
            button.text == "ü¶∏‚Äç‚ôÇÔ∏è –ì–µ—Ä–æ–π" and "filter:hero:dota2" in button.callback_data
            for row in keyboard
            for button in row
        )


@pytest.mark.asyncio
async def test_handle_filter_callback_price(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω—ã."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    mock_update.callback_query.data = "filter:price:csgo"

    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_price_filter
    with patch(
        "src.telegram_bot.game_filter_handlers.handle_price_filter"
    ) as mock_price_filter:
        mock_price_filter.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_filter_callback(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_price_filter.assert_called_once_with(mock_update, mock_context, "csgo")


@pytest.mark.asyncio
async def test_handle_filter_callback_float(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ float."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    mock_update.callback_query.data = "filter:float:csgo"

    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_float_filter
    with patch(
        "src.telegram_bot.game_filter_handlers.handle_float_filter"
    ) as mock_float_filter:
        mock_float_filter.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_filter_callback(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_float_filter.assert_called_once_with(mock_update, mock_context)


@pytest.mark.asyncio
async def test_handle_filter_callback_reset(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    mock_update.callback_query.data = "filter:reset:csgo"

    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_reset_filters
    with patch(
        "src.telegram_bot.game_filter_handlers.handle_reset_filters"
    ) as mock_reset:
        mock_reset.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_filter_callback(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_reset.assert_called_once_with(mock_update, mock_context, "csgo")


@pytest.mark.asyncio
async def test_handle_filter_callback_search(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    mock_update.callback_query.data = "filter:search:csgo"

    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_search_with_filters
    with patch(
        "src.telegram_bot.game_filter_handlers.handle_search_with_filters"
    ) as mock_search:
        mock_search.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_filter_callback(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_search.assert_called_once_with(mock_update, mock_context, "csgo")


@pytest.mark.asyncio
async def test_handle_filter_callback_change_game(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback –¥–ª—è —Å–º–µ–Ω—ã –∏–≥—Ä—ã."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    mock_update.callback_query.data = "filter:change_game"

    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_change_game_filter
    with patch(
        "src.telegram_bot.game_filter_handlers.handle_change_game_filter"
    ) as mock_change:
        mock_change.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_filter_callback(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
        mock_change.assert_called_once_with(mock_update, mock_context)


@pytest.mark.asyncio
async def test_handle_price_filter(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω—ã."""
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_price_filter(mock_update, mock_context, "csgo")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ edit_message_text
    mock_update.callback_query.edit_message_text.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    args, kwargs = mock_update.callback_query.edit_message_text.call_args
    message_text = args[0]
    assert "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω—ã" in message_text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–µ–Ω
    keyboard = kwargs["reply_markup"].inline_keyboard
    assert any("$1-$50" in button.text for row in keyboard for button in row)


@pytest.mark.asyncio
async def test_handle_float_filter(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ float."""
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_float_filter(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ edit_message_text
    mock_update.callback_query.edit_message_text.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    args, kwargs = mock_update.callback_query.edit_message_text.call_args
    message_text = args[0]
    assert "float" in message_text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã float
    keyboard = kwargs["reply_markup"].inline_keyboard
    assert any(
        "0.00-0.07" in button.text for row in keyboard for button in row  # Factory New
    )


@pytest.mark.asyncio
async def test_handle_reset_filters(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    mock_context.user_data["game_filters"] = {
        "csgo": {
            "min_price": 10.0,
            "max_price": 100.0,
            "float_min": 0.1,
            "float_max": 0.5,
        },
    }

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_reset_filters(mock_update, mock_context, "csgo")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã
    assert "csgo" not in mock_context.user_data["game_filters"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ edit_message_text
    mock_update.callback_query.edit_message_text.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    args, kwargs = mock_update.callback_query.edit_message_text.call_args
    message_text = args[0]
    assert "—Å–±—Ä–æ—à–µ–Ω—ã" in message_text.lower()


@pytest.mark.asyncio
async def test_handle_change_game_filter(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–º–µ–Ω—É –∏–≥—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_change_game_filter(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ edit_message_text
    mock_update.callback_query.edit_message_text.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    args, kwargs = mock_update.callback_query.edit_message_text.call_args
    message_text = args[0]
    assert "–≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É" in message_text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –µ—Å—Ç—å –≤—Å–µ –∏–≥—Ä—ã
    keyboard = kwargs["reply_markup"].inline_keyboard
    games = ["csgo", "dota2", "tf2", "rust"]

    for game in games:
        game_display = GAMES_MAPPING.get(game, game)
        assert any(game_display in button.text for row in keyboard for button in row)


@pytest.mark.asyncio
@patch("src.telegram_bot.game_filter_handlers.execute_api_request")
async def test_handle_search_with_filters(mock_execute_api, mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    mock_context.user_data["game_filters"] = {
        "csgo": {"min_price": 10.0, "max_price": 100.0},
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
    mock_items = [
        {"market_hash_name": "AWP | Asiimov", "price": {"USD": 50.0}},
        {"market_hash_name": "AK-47 | Redline", "price": {"USD": 30.0}},
    ]
    mock_execute_api.return_value = mock_items

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_search_with_filters(mock_update, mock_context, "csgo")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ edit_message_text –±—ã–ª –≤—ã–∑–≤–∞–Ω
    assert mock_update.callback_query.edit_message_text.call_count >= 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    final_call = mock_update.callback_query.edit_message_text.call_args_list[-1]
    args, kwargs = final_call
    message_text = args[0]

    # –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    assert (
        "–Ω–∞–π–¥–µ–Ω–æ 2 –ø—Ä–µ–¥–º–µ—Ç" in message_text.lower()
        or "–Ω–∞–π–¥–µ–Ω–æ: 2" in message_text.lower()
    )


@pytest.mark.asyncio
async def test_handle_select_game_filter_callback(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö callback
    mock_update.callback_query.data = "select_game:dota2"

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_select_game_filter_callback(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    assert mock_context.user_data["current_game"] == "dota2"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_game_filters
    # (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —á–µ—Ä–µ–∑ edit_message_text)
    mock_update.callback_query.edit_message_text.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    args, kwargs = mock_update.callback_query.edit_message_text.call_args
    message_text = args[0]
    assert "dota 2" in message_text.lower()


@pytest.mark.asyncio
async def test_handle_back_to_filters_callback(mock_update, mock_context):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –¥–ª—è handle_game_filters
    with patch(
        "src.telegram_bot.game_filter_handlers.handle_game_filters"
    ) as mock_game_filters:
        mock_game_filters.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_back_to_filters_callback(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω handle_game_filters
        mock_game_filters.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answer
        mock_update.callback_query.answer.assert_called_once()

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º–µ—Ç–æ–¥ delete_message –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_update.callback_query.message.delete.assert_called_once()
