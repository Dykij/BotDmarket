"""–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤ src.telegram_bot.handlers.arbitrage_callback_impl.
"""

from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from src.telegram_bot.handlers.arbitrage_callback_impl import (
    handle_best_opportunities_impl,
    handle_dmarket_arbitrage_impl,
)
from src.utils.api_error_handling import APIError


@pytest.fixture
def mock_query():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ callback_query."""
    query = MagicMock()
    query.edit_message_text = AsyncMock()
    query.from_user = MagicMock()
    query.from_user.id = 12345
    return query


@pytest.fixture
def mock_context():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ context."""
    context = MagicMock()
    context.user_data = {"current_game": "csgo"}
    return context


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.arbitrage_callback_impl.execute_api_request")
async def test_handle_dmarket_arbitrage_impl_success(
    mock_execute_api_request,
    mock_query,
    mock_context,
):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    mock_results = [
        {"market_hash_name": "Item1", "profit": 1.50},
        {"market_hash_name": "Item2", "profit": 2.00},
    ]
    mock_execute_api_request.return_value = mock_results

    # –ú–æ–∫–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    with patch(
        "src.telegram_bot.handlers.arbitrage_callback_impl.pagination_manager",
    ) as mock_pagination:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è get_page
        mock_pagination.get_page.return_value = (mock_results, 0, 1)

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_dmarket_arbitrage_impl(mock_query, mock_context, "boost")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤
        mock_query.edit_message_text.assert_called()
        mock_pagination.add_items_for_user.assert_called_once_with(
            mock_query.from_user.id,
            mock_results,
            "boost",
        )
        mock_pagination.get_page.assert_called_once_with(mock_query.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ user_data
        assert mock_context.user_data["last_arbitrage_mode"] == "boost"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ edit_message_text
        args, kwargs = mock_query.edit_message_text.call_args_list[-1]
        assert "reply_markup" in kwargs
        assert "parse_mode" in kwargs
        assert kwargs["parse_mode"] == "HTML"


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.arbitrage_callback_impl.execute_api_request")
async def test_handle_dmarket_arbitrage_impl_pagination(
    mock_execute_api_request,
    mock_query,
    mock_context,
):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    mock_results = [{"market_hash_name": f"Item{i}", "profit": i} for i in range(1, 21)]
    mock_execute_api_request.return_value = mock_results

    # –ú–æ–∫–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    with patch(
        "src.telegram_bot.handlers.arbitrage_callback_impl.pagination_manager",
    ) as mock_pagination:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è get_page - –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        mock_pagination.get_page.return_value = (mock_results[:5], 0, 4)

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_dmarket_arbitrage_impl(mock_query, mock_context, "boost")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ edit_message_text
        args, kwargs = mock_query.edit_message_text.call_args_list[-1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        keyboard = kwargs["reply_markup"].inline_keyboard
        assert any(
            button.text == "–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è" and "paginate:next:boost" in button.callback_data
            for row in keyboard
            for button in row
        )


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.arbitrage_callback_impl.execute_api_request")
async def test_handle_dmarket_arbitrage_impl_no_results(
    mock_execute_api_request,
    mock_query,
    mock_context,
):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    mock_execute_api_request.return_value = []

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_dmarket_arbitrage_impl(mock_query, mock_context, "boost")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ edit_message_text
    mock_query.edit_message_text.assert_called()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è format_dmarket_results —Å –ø—É—Å—Ç—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    with patch(
        "src.telegram_bot.handlers.arbitrage_callback_impl.format_dmarket_results",
    ) as mock_format:
        mock_format.return_value = "–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"

        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        await handle_dmarket_arbitrage_impl(mock_query, mock_context, "boost")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ format_dmarket_results
        mock_format.assert_called_once_with([], "boost", "csgo")


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.arbitrage_callback_impl.execute_api_request")
async def test_handle_dmarket_arbitrage_impl_api_error(
    mock_execute_api_request,
    mock_query,
    mock_context,
):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ API
    mock_execute_api_request.side_effect = APIError(
        "Rate limit exceeded",
        status_code=429,
    )

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_dmarket_arbitrage_impl(mock_query, mock_context, "boost")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ edit_message_text
    args, kwargs = mock_query.edit_message_text.call_args
    message_text = args[0] if args else kwargs.get("text", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ç–µ–∫—Å—Ç–µ
    assert "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in message_text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    keyboard = kwargs.get("reply_markup")
    assert keyboard is not None
    assert any(
        button.text == "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞" and button.callback_data == "arbitrage"
        for row in keyboard.inline_keyboard
        for button in row
    )


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.arbitrage_callback_impl.execute_api_request")
async def test_handle_dmarket_arbitrage_impl_authorization_error(
    mock_execute_api_request,
    mock_query,
    mock_context,
):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    mock_execute_api_request.side_effect = APIError(
        "Unauthorized",
        status_code=401,
    )

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_dmarket_arbitrage_impl(mock_query, mock_context, "mid")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ edit_message_text
    args, kwargs = mock_query.edit_message_text.call_args
    message_text = args[0] if args else kwargs.get("text", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    assert "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" in message_text


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.arbitrage_callback_impl.execute_api_request")
async def test_handle_dmarket_arbitrage_impl_generic_exception(
    mock_execute_api_request,
    mock_query,
    mock_context,
):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—â–µ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–∏
    mock_execute_api_request.side_effect = Exception("Unexpected error")

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_dmarket_arbitrage_impl(mock_query, mock_context, "boost")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ edit_message_text
    args, kwargs = mock_query.edit_message_text.call_args
    message_text = args[0] if args else kwargs.get("text", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ –≤ —Ç–µ–∫—Å—Ç–µ
    assert "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" in message_text
    assert "Unexpected error" in message_text


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.arbitrage_callback_impl.find_arbitrage_opportunities")
async def test_handle_best_opportunities_impl_success(
    mock_find_opportunities,
    mock_query,
    mock_context,
):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    mock_opportunities = [
        {"name": "Item1", "profit": 10.5, "percentage": 5.2},
        {"name": "Item2", "profit": 8.3, "percentage": 4.1},
    ]
    mock_find_opportunities.return_value = mock_opportunities

    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with patch(
        "src.telegram_bot.handlers.arbitrage_callback_impl.format_best_opportunities",
    ) as mock_format:
        mock_format.return_value = "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await handle_best_opportunities_impl(mock_query, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_find_opportunities.assert_called_once_with(
            game="csgo",
            min_profit_percentage=5.0,
            max_items=10,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        mock_format.assert_called_once_with(mock_opportunities, "csgo")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ edit_message_text —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        args, kwargs = mock_query.edit_message_text.call_args_list[-1]
        assert kwargs.get("text") == "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        assert "reply_markup" in kwargs


@pytest.mark.asyncio
@patch("src.telegram_bot.handlers.arbitrage_callback_impl.find_arbitrage_opportunities")
async def test_handle_best_opportunities_impl_error(
    mock_find_opportunities,
    mock_query,
    mock_context,
):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏
    mock_find_opportunities.side_effect = Exception("Search error")

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_best_opportunities_impl(mock_query, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ edit_message_text
    args, kwargs = mock_query.edit_message_text.call_args
    message_text = args[0] if args else kwargs.get("text", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ç–µ–∫—Å—Ç–µ
    assert "–û—à–∏–±–∫–∞" in message_text
    assert "Search error" in message_text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    keyboard = kwargs.get("reply_markup")
    assert keyboard is not None
    assert any(
        button.text == "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞" and button.callback_data == "arbitrage"
        for row in keyboard.inline_keyboard
        for button in row
    )
