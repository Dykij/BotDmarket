"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram.
"""
# mypy: disable-error-code="attr-defined"

import logging
import traceback
import asyncio
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Tuple, Optional, Union, cast, TypedDict, MutableMapping

# Define os.environ type to fix linter errors
class _Environ(TypedDict, total=False):
    DMARKET_PUBLIC_KEY: str
    DMARKET_SECRET_KEY: str
    DMARKET_API_URL: str
    # Add any other environment variables used in this module

# Type hint for os module (suppress mypy errors)
# This ensures os.environ is treated as a dictionary with string keys and values
environ_type: MutableMapping[str, str] = os.environ  # type: ignore

from telegram import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import CallbackContext
from telegram.constants import ParseMode

from src.telegram_bot.pagination import pagination_manager
from src.dmarket.arbitrage import GAMES, ArbitrageTrader
from src.telegram_bot.auto_arbitrage_scanner import (
    scan_multiple_games,
    auto_trade_items,
    check_user_balance
)
from src.telegram_bot.keyboards import (
    get_back_to_arbitrage_keyboard,
    get_modern_arbitrage_keyboard,
    get_auto_arbitrage_keyboard,
)
from src.dmarket.dmarket_api_fixed import DMarketAPI
from src.utils.api_error_handling import APIError, handle_api_error, RetryStrategy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
ARBITRAGE_MODES = {
    "boost_low": {
        "name": "—Ä–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞ (–Ω–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å, –±—ã—Å—Ç—Ä—ã–π –æ–±–æ—Ä–æ—Ç)",
        "min_price": 1.0,
        "max_price": 50.0,
        "min_profit_percent": 5.0,
        "min_profit_amount": 0.5,
        "trade_strategy": "fast_turnover"
    },
    "mid_medium": {
        "name": "—Å—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä (—Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫)",
        "min_price": 10.0,
        "max_price": 200.0,
        "min_profit_percent": 10.0,
        "min_profit_amount": 2.0,
        "trade_strategy": "balanced"
    },
    "pro_high": {
        "name": "Trade Pro (–≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å, –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)",
        "min_price": 50.0,
        "max_price": 1000.0,
        "min_profit_percent": 15.0,
        "min_profit_amount": 5.0,
        "trade_strategy": "high_profit"
    }
}


async def format_results(
    items: List[Dict[str, Any]],
    mode: str,
    default_game: str = "csgo"
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        items: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        mode: –†–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (auto_low, auto_medium, auto_high)
        default_game: –ö–æ–¥ –∏–≥—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–µ–∂–∏–º–∞
    mode_parts = mode.split('_')
    mode_type = mode_parts[0] if len(mode_parts) > 0 else mode
    mode_level = mode_parts[1] if len(mode_parts) > 1 else "medium"
    
    mode_key = f"{mode_type}_{mode_level}"
    mode_display = ARBITRAGE_MODES.get(mode_key, {}).get("name", mode)
    
    if not items:
        return f"‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ ({mode_display})"
    
    header = f"ü§ñ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ ({mode_display}):</b>\n\n"
    items_text = []
    for i, item in enumerate(items, start=1):
        name = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        price_value = item.get("price", {})
        if isinstance(price_value, dict):
            price = float(price_value.get("amount", 0)) / 100
        else:
            try:
                price_str = str(item.get("price", "0"))
                price_str = price_str.replace('$', '').strip()
                price = float(price_str)
            except (ValueError, TypeError):
                price = float(price_value) / 100 if isinstance(price_value, (int, float)) else 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
        profit_value = item.get("profit", 0)
        if isinstance(profit_value, str) and '$' in profit_value:
            profit = float(profit_value.replace('$', '').strip())
        else:
            profit = float(profit_value) / 100 if isinstance(profit_value, (int, float)) else 0
            
        profit_percent = item.get("profit_percent", 0)
        
        game = item.get("game", default_game)
        game_display = GAMES.get(game, game)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–µ
        risk_level = "—Å—Ä–µ–¥–Ω–∏–π"
        if profit > 10 and profit_percent > 20:
            risk_level = "–≤—ã—Å–æ–∫–∏–π"
        elif profit < 2 or profit_percent < 5:
            risk_level = "–Ω–∏–∑–∫–∏–π"
            
        liquidity = item.get("liquidity", "medium")
        liquidity_display = {
            "high": "–≤—ã—Å–æ–∫–∞—è",
            "medium": "—Å—Ä–µ–¥–Ω—è—è",
            "low": "–Ω–∏–∑–∫–∞—è"
        }.get(liquidity, "—Å—Ä–µ–¥–Ω—è—è")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        item_text = (
            f"{i}. <b>{name}</b>\n"
            f"   üéÆ –ò–≥—Ä–∞: <b>{game_display}</b>\n"
            f"   üí∞ –¶–µ–Ω–∞: <b>${price:.2f}</b>\n"
            f"   üíµ –ü—Ä–∏–±—ã–ª—å: <b>${profit:.2f}</b> (<b>{profit_percent:.1f}%</b>)\n"
            f"   üîÑ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: <b>{liquidity_display}</b>\n"
            f"   ‚ö†Ô∏è –†–∏—Å–∫: <b>{risk_level}</b>\n"
        )
        items_text.append(item_text)
    
    return header + "\n".join(items_text)


async def show_auto_stats_with_pagination(query: CallbackQuery, context: CallbackContext) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    items, current_page, total_pages = pagination_manager.get_page(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    mode = pagination_manager.get_mode(user_id)
    game = context.user_data.get("current_game", "csgo") if hasattr(context, "user_data") else "csgo"
    
    if not items:
        await query.edit_message_text(
            text="‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ",
            reply_markup=get_back_to_arbitrage_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_text = await format_results(items, mode, game)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    if current_page > 0:
        pagination_row.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"paginate:prev:{mode}")
        )
    
    if total_pages > 1:
        pagination_row.append(
            InlineKeyboardButton(f"{current_page + 1}/{total_pages}", callback_data="page_info")
        )
    
    if current_page < total_pages - 1:
        pagination_row.append(
            InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"paginate:next:{mode}")
        )
    
    if pagination_row:
        keyboard.append(pagination_row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É", callback_data="arbitrage")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if total_pages <= 1:
        page_status = f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}"
        formatted_text += f"\n\n{page_status}"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=formatted_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )


async def handle_pagination(
    query: CallbackQuery,
    context: CallbackContext,
    direction: str,
    mode: str = "auto"
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (next/prev)
        mode: –†–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    user_id = query.from_user.id
    
    if direction == "next":
        pagination_manager.next_page(user_id)
    else:
        pagination_manager.prev_page(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_auto_stats_with_pagination(query, context)


async def create_dmarket_api_client(context: CallbackContext) -> Optional[DMarketAPI]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç DMarket API.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç DMarketAPI –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ DMarket API –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞ –∏–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    public_key = context.bot_data.get('dmarket_public_key', '')
    secret_key = context.bot_data.get('dmarket_secret_key', '')
    
    if not public_key or not secret_key:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        try:
            # Use the properly typed environ_type
            public_key = environ_type.get('DMARKET_PUBLIC_KEY', '')
            secret_key = environ_type.get('DMARKET_SECRET_KEY', '')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π API –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return None

    if not public_key or not secret_key:
        logger.error("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        retry_strategy = RetryStrategy(
            max_retries=3,
            initial_delay=1.0,
            max_delay=30.0,
            backoff_factor=2.0,
            status_codes_to_retry=[429, 500, 502, 503, 504]
        )
        
        # Use the properly typed environ_type
        api_url = environ_type.get('DMARKET_API_URL', 'https://api.dmarket.com')
        
        api_client = DMarketAPI(
            public_key=public_key,
            secret_key=secret_key,
            api_url=api_url,
            max_retries=3
        )
        
        logger.info("API –∫–ª–∏–µ–Ω—Ç DMarket —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        return api_client
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None


async def start_auto_trading(
    query: CallbackQuery,
    context: CallbackContext,
    mode: str
) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        mode: –†–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞:
            - boost_low: –†–µ–∂–∏–º —Ä–∞–∑–≥–æ–Ω–∞ –±–∞–ª–∞–Ω—Å–∞ —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º –ø—Ä–∏–±—ã–ª–∏
            - mid_medium: –†–µ–∂–∏–º —Å—Ä–µ–¥–Ω–µ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å–æ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª—å—é
            - pro_high: –†–µ–∂–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞ —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª—å—é
    """
    user_id = query.from_user.id
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.edit_message_text(
        text=(
            "üîç <b>–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä...</b>\n\n"
            "üìä –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –¥–ª—è CS2, Dota 2, "
            "Rust –∏ TF2..."
        ),
        parse_mode=ParseMode.HTML
    )
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        mode_parts = mode.split('_')
        if len(mode_parts) < 2:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            mode_type = "mid"
            profit_level = "medium"
        else:
            mode_type, profit_level = mode_parts
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞
        mode_key = f"{mode_type}_{profit_level}"
        mode_settings = ARBITRAGE_MODES.get(mode_key, ARBITRAGE_MODES["mid_medium"])
        
        min_price = mode_settings["min_price"]
        max_price = mode_settings["max_price"]
        min_profit_percent = mode_settings["min_profit_percent"]
        min_profit_amount = mode_settings["min_profit_amount"]
        trade_strategy = mode_settings["trade_strategy"]
        display_mode = mode_settings["name"]
        
        # –í—Å–µ–≥–¥–∞ —Å–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∏–≥—Ä—ã
        games_to_scan = list(GAMES.keys())  # ["csgo", "dota2", "rust", "tf2"]
        
        await query.edit_message_text(
            text=(
                f"üîç <b>–ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ {display_mode}...</b>\n\n"
                f"üíº –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∏–≥—Ä—ã (CS2, Dota 2, Rust, TF2)\n"
                f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
            ),
            parse_mode=ParseMode.HTML
        )
        
        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        api_client = await create_dmarket_api_client(context)
        if not api_client:
            await query.edit_message_text(
                text="‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API-–∫–ª–∏–µ–Ω—Ç DMarket.</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π.",
                reply_markup=get_back_to_arbitrage_keyboard(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            balance_info = await check_user_balance(api_client)
            available_balance = balance_info.get('balance', 0)
            
            if available_balance < min_price:
                await query.edit_message_text(
                    text=(
                        f"‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ DMarket.</b>\n"
                        f"–î–æ—Å—Ç—É–ø–Ω–æ: <b>${available_balance:.2f}</b>\n"
                        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º: <b>${min_price:.2f}</b>"
                    ),
                    reply_markup=get_back_to_arbitrage_keyboard(),
                    parse_mode=ParseMode.HTML
                )
                return
        except APIError as e:
            error_message = await handle_api_error(e)
            await query.edit_message_text(
                text=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n{error_message}",
                reply_markup=get_back_to_arbitrage_keyboard(),
                parse_mode=ParseMode.HTML
            )
            return
        except Exception as e:
            await query.edit_message_text(
                text=f"‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n{str(e)}",
                reply_markup=get_back_to_arbitrage_keyboard(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂ DMarket
        try:
            from src.dmarket.intramarket_arbitrage import (
                find_price_anomalies,
                find_trending_items,
                find_mispriced_rare_items,
                scan_for_intramarket_opportunities
            )
        except ImportError:
            logger.warning("–ú–æ–¥—É–ª—å intramarket_arbitrage –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –º–µ–∂–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –ø–ª–æ—â–∞–¥–∫–∞–º–∏
        tasks.append(
            scan_multiple_games(
                games=games_to_scan,
                mode=profit_level,
                max_items_per_game=20,
                price_from=min_price,
                price_to=max_price
            )
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ DMarket –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if 'find_price_anomalies' in locals():
            if mode_type == "boost":
                # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–≥–æ–Ω–∞ –∏—â–µ–º —Ü–µ–Ω–æ–≤—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
                tasks.append(
                    find_price_anomalies(
                        game="csgo",
                        similarity_threshold=0.9,
                        price_diff_percent=min_profit_percent,
                        max_results=30,
                        min_price=min_price,
                        max_price=max_price,
                        dmarket_api=api_client
                    )
                )
                
                for game in games_to_scan[1:]:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã –∫—Ä–æ–º–µ csgo
                    tasks.append(
                        find_price_anomalies(
                            game=game,
                            similarity_threshold=0.9,
                            price_diff_percent=min_profit_percent,
                            max_results=10,
                            min_price=min_price,
                            max_price=max_price,
                            dmarket_api=api_client
                        )
                    )
            
            elif mode_type == "mid":
                # –î–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—â–µ–º –∫–∞–∫ –∞–Ω–æ–º–∞–ª–∏–∏, —Ç–∞–∫ –∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                for game in games_to_scan:
                    tasks.append(
                        find_price_anomalies(
                            game=game,
                            similarity_threshold=0.85,
                            price_diff_percent=min_profit_percent,
                            max_results=10,
                            min_price=min_price,
                            max_price=max_price,
                            dmarket_api=api_client
                        )
                    )
                    
                    if 'find_trending_items' in locals():
                        tasks.append(
                            find_trending_items(
                                game=game,
                                min_price=min_price,
                                max_price=max_price,
                                max_results=10,
                                dmarket_api=api_client
                            )
                        )
            
            elif mode_type == "pro" and 'scan_for_intramarket_opportunities' in locals():
                # –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—â–µ–º –≤—Å–µ —Ç–∏–ø—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                tasks.append(
                    scan_for_intramarket_opportunities(
                        games=games_to_scan,
                        max_results_per_game=10,
                        min_price=min_price,
                        max_price=max_price,
                        include_anomalies=True,
                        include_trending=True,
                        include_rare=True,
                        dmarket_api=api_client
                    )
                )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_msg = await query.edit_message_text(
            text=(
                f"üîç <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ ({len(tasks)} –∑–∞–¥–∞—á)...</b>\n\n"
                f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: 0% - –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."
            ),
            parse_mode=ParseMode.HTML
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        start_time = datetime.now()
        results = await asyncio.gather(*tasks, return_exceptions=True)
        end_time = datetime.now()
        execution_time = (end_time - start_time).total_seconds()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_items = []
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ–∂–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        platform_arbitrage_results = results[0]
        if isinstance(platform_arbitrage_results, list):
            all_items.extend(platform_arbitrage_results)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        for result in results[1:]:
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {result}")
                continue
                
            if isinstance(result, dict):
                # –†–µ–∑—É–ª—å—Ç–∞—Ç scan_for_intramarket_opportunities
                for game, game_results in result.items():
                    for category, items in game_results.items():
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        for item in items:
                            if category == "price_anomalies":
                                # –¶–µ–Ω–æ–≤—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
                                all_items.append({
                                    "title": item.get("item_to_buy", {}).get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"),
                                    "price": item.get("buy_price", 0) * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã
                                    "profit": item.get("profit_after_fee", 0) * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã
                                    "profit_percent": item.get("profit_percentage", 0),
                                    "game": item.get("game", "csgo"),
                                    "source": "dmarket_internal",
                                    "strategy": "price_anomaly",
                                    "item_id": item.get("item_to_buy", {}).get("itemId", ""),
                                    "liquidity": "high"
                                })
                            elif category == "trending_items":
                                # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                                all_items.append({
                                    "title": item.get("item", {}).get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"),
                                    "price": item.get("current_price", 0) * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã
                                    "profit": (item.get("projected_price", 0) - item.get("current_price", 0)) * 100,
                                    "profit_percent": item.get("potential_profit_percent", 0),
                                    "game": item.get("game", "csgo"),
                                    "source": "dmarket_internal",
                                    "strategy": "trending",
                                    "item_id": item.get("item", {}).get("itemId", ""),
                                    "liquidity": "medium"
                                })
                            elif category == "rare_mispriced":
                                # –†–µ–¥–∫–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                                all_items.append({
                                    "title": item.get("item", {}).get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"),
                                    "price": item.get("current_price", 0) * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã
                                    "profit": (item.get("estimated_value", 0) - item.get("current_price", 0)) * 100,
                                    "profit_percent": item.get("price_difference_percent", 0),
                                    "game": item.get("game", "csgo"),
                                    "source": "dmarket_internal",
                                    "strategy": "rare_item",
                                    "item_id": item.get("item", {}).get("itemId", ""),
                                    "liquidity": "low",
                                    "rare_traits": item.get("rare_traits", [])
                                })
            elif isinstance(result, list):
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã find_price_anomalies –∏–ª–∏ find_trending_items
                for item in result:
                    if "item_to_buy" in item:
                        # –¶–µ–Ω–æ–≤—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
                        all_items.append({
                            "title": item.get("item_to_buy", {}).get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"),
                            "price": item.get("buy_price", 0) * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã
                            "profit": item.get("profit_after_fee", 0) * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã
                            "profit_percent": item.get("profit_percentage", 0),
                            "game": item.get("game", "csgo"),
                            "source": "dmarket_internal",
                            "strategy": "price_anomaly",
                            "item_id": item.get("item_to_buy", {}).get("itemId", ""),
                            "liquidity": "high"
                        })
                    elif "item" in item and "projected_price" in item:
                        # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                        all_items.append({
                            "title": item.get("item", {}).get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"),
                            "price": item.get("current_price", 0) * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã
                            "profit": (item.get("projected_price", 0) - item.get("current_price", 0)) * 100,
                            "profit_percent": item.get("potential_profit_percent", 0),
                            "game": item.get("game", "csgo"),
                            "source": "dmarket_internal",
                            "strategy": "trending",
                            "item_id": item.get("item", {}).get("itemId", ""),
                            "liquidity": "medium"
                        })
                    elif "item" in item and "estimated_value" in item:
                        # –†–µ–¥–∫–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                        all_items.append({
                            "title": item.get("item", {}).get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"),
                            "price": item.get("current_price", 0) * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã
                            "profit": (item.get("estimated_value", 0) - item.get("current_price", 0)) * 100,
                            "profit_percent": item.get("price_difference_percent", 0),
                            "game": item.get("game", "csgo"),
                            "source": "dmarket_internal",
                            "strategy": "rare_item",
                            "item_id": item.get("item", {}).get("itemId", ""),
                            "liquidity": "low",
                            "rare_traits": item.get("rare_traits", [])
                        })
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—É
        filtered_items = [
            item for item in all_items 
            if (item.get("profit", 0) / 100 >= min_profit_amount and 
                item.get("profit_percent", 0) >= min_profit_percent)
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø—Ä–∏–±—ã–ª–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        filtered_items.sort(key=lambda x: x.get("profit_percent", 0), reverse=True)
        
        if not filtered_items:
            await query.edit_message_text(
                text=(
                    f"‚ÑπÔ∏è <b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ {display_mode}.</b>\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º."
                ),
                reply_markup=get_back_to_arbitrage_keyboard(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_manager.add_items_for_user(user_id, filtered_items, mode)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        items, current_page, total_pages = pagination_manager.get_page(user_id)
        formatted_results = await format_results(items, mode)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            pagination_row = []
            if current_page > 0:
                pagination_row.append(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"paginate:prev:{mode}")
                )
            
            pagination_row.append(
                InlineKeyboardButton(f"{current_page + 1}/{total_pages}", callback_data="page_info")
            )
            
            if current_page < total_pages - 1:
                pagination_row.append(
                    InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"paginate:next:{mode}")
                )
            
            keyboard.append(pagination_row)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        public_key = context.bot_data.get('dmarket_public_key', '')
        secret_key = context.bot_data.get('dmarket_secret_key', '')
        if not public_key or not secret_key:
            try:
                # Use the properly typed environ_type
                public_key = environ_type.get('DMARKET_PUBLIC_KEY', '')
                secret_key = environ_type.get('DMARKET_SECRET_KEY', '')
            except Exception:
                pass
                
        if (mode_type in ["mid", "pro"] and
            public_key and secret_key and 
            available_balance >= min_price):
            
            keyboard.append([
                InlineKeyboardButton(
                    "ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-—Ç–æ—Ä–≥–æ–≤–ª—é", 
                    callback_data=f"auto_trade:{mode}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞", callback_data="auto_arbitrage")
        ])
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        info_text = (
            f"üîç <b>–ù–∞–π–¥–µ–Ω–æ {len(filtered_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ {display_mode}.</b>\n"
            f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${available_balance:.2f}</b>\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{execution_time:.1f}—Å</b>\n\n"
        )
        
        await query.edit_message_text(
            text=info_text + formatted_results,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
        logger.error(traceback.format_exc())
        
        await query.edit_message_text(
            text=(
                f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b>\n\n"
                f"{str(e)}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            ),
            reply_markup=get_back_to_arbitrage_keyboard(),
            parse_mode=ParseMode.HTML
        )


async def check_balance_command(message: Union[CallbackQuery, Update], context: CallbackContext) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å DMarket –∏ —Å–≤—è–∑—å —Å API, –∞ —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞.
    
    Args:
        message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ message –æ–±—ä–µ–∫—Ç–æ–º CallbackQuery –∏–ª–∏ Update
    is_callback = isinstance(message, CallbackQuery)
    
    if is_callback:
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        await message.edit_message_text(
            text="üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DMarket API...</b>",
            parse_mode=ParseMode.HTML
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        processing_message = await message.reply_text(
            text="üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DMarket API...</b>",
            parse_mode=ParseMode.HTML
        )
    
    try:
        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        api_client = await create_dmarket_api_client(context)
        
        if not api_client:
            error_text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç DMarket API. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–ª—é—á–∏ API –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
            )
            
            if is_callback:
                await message.edit_message_text(
                    text=error_text,
                    reply_markup=get_back_to_arbitrage_keyboard(),
                    parse_mode=ParseMode.HTML
                )
            else:
                await processing_message.edit_text(
                    text=error_text,
                    parse_mode=ParseMode.HTML
                )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_text = "üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ DMarket...</b>"
        if is_callback:
            await message.edit_message_text(
                text=status_text, 
                parse_mode=ParseMode.HTML
            )
        else:
            await processing_message.edit_text(
                text=status_text, 
                parse_mode=ParseMode.HTML
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–∞–ª–∞–Ω—Å–∞
            balance_result = await api_client.get_user_balance()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API
            if balance_result.get("error", False):
                error_msg = balance_result.get("error_message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                error_code = balance_result.get("status_code", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥")
                
                error_text = (
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n"
                    f"–ö–æ–¥: {error_code}\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_msg}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                
                if is_callback:
                    await message.edit_message_text(
                        text=error_text,
                        reply_markup=get_back_to_arbitrage_keyboard(),
                        parse_mode=ParseMode.HTML
                    )
                else:
                    await processing_message.edit_text(
                        text=error_text,
                        parse_mode=ParseMode.HTML
                    )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ
            available_balance = balance_result.get("available_balance", 0)
            total_balance = balance_result.get("total_balance", 0)
            has_funds = balance_result.get("has_funds", False)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = await api_client.get_account_details()
            username = account_info.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            offers_info = await api_client.get_active_offers(limit=1)
            total_offers = offers_info.get("total", 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            min_required_balance = ARBITRAGE_MODES["boost_low"]["min_price"]
            
            if available_balance < min_required_balance:
                warning_text = (
                    f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> –ë–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ "
                    f"—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (${min_required_balance:.2f}) –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."
                )
            else:
                warning_text = ""
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–ª–∞–Ω—Å–∞
            if has_funds and available_balance >= 5.0:
                balance_status = "‚úÖ <b>–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>"
            elif has_funds:
                balance_status = "‚ö†Ô∏è <b>–ù–∏–∑–∫–∏–π, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</b>"
            else:
                balance_status = "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_text = (
                f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DMarket –∞–∫–∫–∞—É–Ω—Ç–µ</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}\n"
                f"üí∞ <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> ${available_balance:.2f}\n"
                f"üíµ <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${total_balance:.2f}\n"
                f"üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b> {total_offers}\n"
                f"üîã <b>–°—Ç–∞—Ç—É—Å –±–∞–ª–∞–Ω—Å–∞:</b> {balance_status}\n\n"
            )
            
            if warning_text:
                response_text += f"{warning_text}\n\n"
            
            current_time = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
            response_text += f"‚è±Ô∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {current_time}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥
            logger.info(
                f"–ë–∞–ª–∞–Ω—Å DMarket: ${available_balance:.2f} –¥–æ—Å—Ç—É–ø–Ω–æ, "
                f"${total_balance:.2f} –≤—Å–µ–≥–æ. "
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}. "
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_offers}."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            reply_markup = get_back_to_arbitrage_keyboard() if is_callback else None
            
            if is_callback:
                await message.edit_message_text(
                    text=response_text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
            else:
                await processing_message.edit_text(
                    text=response_text,
                    parse_mode=ParseMode.HTML
                )
            
        except APIError as e:
            error_message = await handle_api_error(e)
            error_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n{error_message}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ DMarket API. "
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            )
            
            if is_callback:
                await message.edit_message_text(
                    text=error_text,
                    reply_markup=get_back_to_arbitrage_keyboard(),
                    parse_mode=ParseMode.HTML
                )
            else:
                await processing_message.edit_text(
                    text=error_text,
                    parse_mode=ParseMode.HTML
                )
                
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        logger.error(traceback.format_exc())
        
        error_text = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n"
            f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        if is_callback:
            await message.edit_message_text(
                text=error_text,
                reply_markup=get_back_to_arbitrage_keyboard(),
                parse_mode=ParseMode.HTML
            )
        else:
            await processing_message.edit_text(
                text=error_text,
                parse_mode=ParseMode.HTML
            )


async def show_auto_stats(query: CallbackQuery, context: CallbackContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    await show_auto_stats_with_pagination(query, context)


async def stop_auto_trading(query: CallbackQuery, context: CallbackContext) -> None:
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    user_id = query.from_user.id
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if hasattr(context, "user_data"):
        context.user_data["auto_trading_enabled"] = False
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="arbitrage")]
    ])
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    await query.edit_message_text(
        text=(
            "üõë <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.</b>\n\n"
            "–í—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –Ω–æ –Ω–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ "
            "–≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç."
        ),
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    
    logger.info(f"–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


async def handle_auto_trade(query, context, mode: str):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        mode: –†–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (low, medium, high)
    """
    from src.telegram_bot.utils.api_client import setup_api_client
    from src.utils.api_error_handling import APIError, handle_api_error
    from telegram.constants import ChatAction
    from telegram import ParseMode
    from src.telegram_bot.keyboards import get_back_to_arbitrage_keyboard
    from src.telegram_bot.auto_arbitrage_scanner import scan_multiple_games, check_user_balance
    from src.telegram_bot.pagination import pagination_manager
    from src.dmarket.arbitrage import GAMES
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    api_client = setup_api_client()
    if not api_client:
        await query.edit_message_text(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API-–∫–ª–∏–µ–Ω—Ç.</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_arbitrage_keyboard()
        )
        return
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance_data = await check_user_balance(api_client)
        
        if not balance_data.get("has_funds", False):
            available = balance_data.get("available_balance", 0.0)
            await query.edit_message_text(
                f"‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: ${available:.2f} USD\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º: $1.00 USD",
                parse_mode=ParseMode.HTML,
                reply_markup=get_back_to_arbitrage_keyboard()
            )
            return
            
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        await query.message.chat.send_action(ChatAction.TYPING)
        
        # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        games = ["csgo", "dota2", "rust", "tf2"]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if mode == "low":
            min_profit = 5.0
            max_price = 20.0
            risk_level = "low"
        elif mode == "high":
            min_profit = 20.0
            max_price = 100.0
            risk_level = "high"
        else:  # medium
            min_profit = 10.0
            max_price = 50.0
            risk_level = "medium"
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.edit_message_text(
            f"üîç <b>–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ DMarket...</b>\n\n"
            f"üéÆ –ò–≥—Ä—ã: {', '.join(GAMES.get(g, g) for g in games)}\n"
            f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {min_profit}%\n"
            f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
            parse_mode=ParseMode.HTML
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = await scan_multiple_games(
            games=games,
            mode=mode,
            max_items_per_game=15,
            price_from=1.0,
            price_to=max_price
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_items = sum(len(items) for items in results.values())
        
        if total_items == 0:
            await query.edit_message_text(
                "‚ÑπÔ∏è <b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML,
                reply_markup=get_back_to_arbitrage_keyboard()
            )
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        all_items = []
        for game, items in results.items():
            for item in items:
                item["game"] = game  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –∏–≥—Ä—ã –≤ —ç–ª–µ–º–µ–Ω—Ç
                all_items.append(item)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_manager.add_items(query.from_user.id, all_items, mode)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await show_auto_stats_with_pagination(query, context)
        
    except APIError as e:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ API
        error_message = await handle_api_error(e)
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ API DMarket –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:</b>\n\n{error_message}",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_arbitrage_keyboard()
        )
    except Exception as e:
        import logging
        import traceback
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")
        tb_string = traceback.format_exc()
        logger.error(f"Traceback: {tb_string}")
        
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n{str(e)}",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_arbitrage_keyboard()
        )

# Export all functions
__all__ = [
    'start_auto_trading',
    'stop_auto_trading',
    'check_balance_command',
    'handle_pagination',
    'show_auto_stats_with_pagination',
    'handle_auto_trade',
]
