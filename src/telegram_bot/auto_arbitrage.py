"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
"""

import logging
import traceback
import asyncio
from typing import List, Dict, Any, Tuple, Optional

from telegram import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext

from src.telegram_bot.pagination import pagination_manager
from src.dmarket.arbitrage import GAMES, ArbitrageTrader
from src.telegram_bot.auto_arbitrage_scanner import (
    scan_multiple_games,
    auto_trade_items,
    check_user_balance
)
from src.telegram_bot.keyboards import get_back_to_arbitrage_keyboard
from src.dmarket.dmarket_api import DMarketAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


async def format_results(
    items: List[Dict[str, Any]],
    mode: str,
    default_game: str = "csgo"
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        items: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        mode: –†–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (auto_low, auto_medium, auto_high)
        default_game: –ö–æ–¥ –∏–≥—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    mode_display = {
        "auto_low": "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å",
        "auto_medium": "—Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å",
        "auto_high": "–≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å",
    }.get(mode, mode)
    
    if not items:
        return f"‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ ({mode_display})"
    
    header = f"ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ ({mode_display}):\n\n"
    items_text = []
    for i, item in enumerate(items, start=1):
        name = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        price_value = item.get("price", {})
        if isinstance(price_value, dict):
            price = float(price_value.get("amount", 0)) / 100
        else:
            price_str = str(item.get("price", "0"))
            price_str = price_str.replace('$', '').strip()
            price = float(price_str)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
        profit_value = item.get("profit", 0)
        if isinstance(profit_value, str) and '$' in profit_value:
            profit = float(profit_value.replace('$', '').strip())
        else:
            profit = float(profit_value)
            
        profit_percent = item.get("profit_percent", 0)
        
        game = item.get("game", default_game)
        game_display = GAMES.get(game, game)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–µ
        risk_level = "—Å—Ä–µ–¥–Ω–∏–π"
        if profit > 10 and profit_percent > 20:
            risk_level = "–≤—ã—Å–æ–∫–∏–π"
        elif profit < 2 or profit_percent < 5:
            risk_level = "–Ω–∏–∑–∫–∏–π"
            
        liquidity = item.get("liquidity", "medium")
        liquidity_display = {
            "high": "–≤—ã—Å–æ–∫–∞—è",
            "medium": "—Å—Ä–µ–¥–Ω—è—è",
            "low": "–Ω–∏–∑–∫–∞—è"
        }.get(liquidity, "—Å—Ä–µ–¥–Ω—è—è")
        
        item_text = (
            f"{i}. {name}\n"
            f"   üéÆ –ò–≥—Ä–∞: {game_display}\n"
            f"   üí∞ –¶–µ–Ω–∞: ${price:.2f}\n"
            f"   üíµ –ü—Ä–∏–±—ã–ª—å: ${profit:.2f} ({profit_percent:.1f}%)\n"
            f"   üîÑ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {liquidity_display}\n"
            f"   ‚ö†Ô∏è –†–∏—Å–∫: {risk_level}\n"
        )
        items_text.append(item_text)
    
    return header + "\n".join(items_text)


async def show_auto_stats_with_pagination(query: CallbackQuery, context: CallbackContext) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    items, current_page, total_pages = pagination_manager.get_page(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    mode = pagination_manager.get_mode(user_id)
    game = context.user_data.get("current_game", "csgo") if hasattr(context, "user_data") else "csgo"
    
    if not items:
        await query.edit_message_text(
            text="‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ",
            reply_markup=get_back_to_arbitrage_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_text = await format_results(items, mode, game)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    if current_page > 0:
        pagination_row.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"paginate:prev:{mode}")
        )
    
    if current_page < total_pages - 1:
        pagination_row.append(
            InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"paginate:next:{mode}")
        )
    
    if pagination_row:
        keyboard.append(pagination_row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É", callback_data="arbitrage")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_status = f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}"
    formatted_text += f"\n\n{page_status}"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=formatted_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


async def handle_pagination(
    query: CallbackQuery,
    context: CallbackContext,
    direction: str,
    mode: str = "auto"
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (next/prev)
        mode: –†–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    user_id = query.from_user.id
    
    if direction == "next":
        pagination_manager.next_page(user_id)
    else:
        pagination_manager.prev_page(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_auto_stats_with_pagination(query, context)


async def start_auto_trading(
    query: CallbackQuery,
    context: CallbackContext,
    mode: str
) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        mode: –†–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (auto_low, auto_medium, auto_high)
    """
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    selected_game = context.user_data.get(
        "current_game", "csgo"
    ) if hasattr(context, "user_data") else "csgo"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.edit_message_text(
        text=(
            "üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä...\n\n"
            "üìä –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –¥–ª—è CS2, Dota 2, "
            "Rust –∏ TF2..."
        ),
        reply_markup=None
    )
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        search_mode = (
            "low" if mode == "auto_low" 
            else "medium" if mode == "auto_medium" 
            else "high"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
        risk_level = (
            "low" if mode == "auto_low"
            else "medium" if mode == "auto_medium"
            else "high"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä –∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
        if selected_game in GAMES:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–≥—Ä—É
            games_to_scan = [selected_game]
            await query.edit_message_text(
                text=(
                    f"üîç –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è "
                    f"{GAMES.get(selected_game, selected_game)}..."
                ),
                reply_markup=None
            )
        else:
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä—ã
            games_to_scan = list(GAMES.keys())  # ["csgo", "dota2", "tf2", "rust"]
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
        max_items_per_game = 10
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        
        public_key = context.user_data.get("api_key", "") if hasattr(context, "user_data") else ""
        secret_key = context.user_data.get("api_secret", "") if hasattr(context, "user_data") else ""
        
        if not public_key or not secret_key:
            public_key = os.environ.get("DMARKET_PUBLIC_KEY", "")
            secret_key = os.environ.get("DMARKET_SECRET_KEY", "")
        
        if not public_key or not secret_key:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ DMarket")
            await query.edit_message_text(
                text=(
                    "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á–∏ DMarket –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n\n"
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                    "—É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á–∏ DMarket —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setup."
                ),
                reply_markup=get_back_to_arbitrage_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º API-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        api_client = DMarketAPI(
            public_key,
            secret_key,
            "https://api.dmarket.com",
            max_retries=3,
            connection_timeout=10.0,
            pool_limits=10
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        has_funds, balance = await check_user_balance(api_client)
        
        if not has_funds:
            await query.edit_message_text(
                text=(
                    f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
                    f"–î–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º $1.00"
                ),
                reply_markup=get_back_to_arbitrage_keyboard()
            )
            return
            
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        await query.edit_message_text(
            text=(
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π..."
            ),
            reply_markup=None
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏–≥—Ä
        items_by_game = await scan_multiple_games(
            games=games_to_scan,
            mode=search_mode,
            max_items_per_game=max_items_per_game
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        found_count = sum(len(items) for items in items_by_game.values())
        
        if found_count == 0:
            await query.edit_message_text(
                text=(
                    "‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É."
                ),
                reply_markup=get_back_to_arbitrage_keyboard()
            )
            return
            
        await query.edit_message_text(
            text=(
                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {found_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.\n"
                f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≥–æ—Ç–æ–≤–∏–º –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ..."
            ),
            reply_markup=None
        )
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–∞—Ö
        all_items = []
        for game, items in items_by_game.items():
            for item in items:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É –∫ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                if "game" not in item:
                    item["game"] = game
                all_items.append(item)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        min_profit = 0.5  # USD (–Ω–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å)
        max_price = 50.0  # USD (–º–∞–∫—Å. —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏)
        max_trades = 2    # –ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º)
        
        if mode == "auto_medium":
            min_profit = 2.0  # USD (—Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å)
            max_price = 100.0
            max_trades = 5
        elif mode == "auto_high":
            min_profit = 5.0  # USD (–≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å)
            max_price = 200.0
            max_trades = 10
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(context, "user_data") and "trade_settings" in context.user_data:
            settings = context.user_data["trade_settings"]
            min_profit = settings.get("min_profit", min_profit)
            max_price = settings.get("max_price", max_price)
            max_trades = settings.get("max_trades", max_trades)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        purchases = 0
        sales = 0
        total_profit = 0.0
        
        if all_items:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª
            # –í —É—á–µ–±–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if context.user_data.get("auto_trading_enabled", False) if hasattr(context, "user_data") else False:
                purchases, sales, total_profit = await auto_trade_items(
                    items_by_game,
                    min_profit=min_profit,
                    max_price=max_price,
                    dmarket_api=api_client,
                    max_trades=max_trades,
                    risk_level=risk_level
                )
            else:
                # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                await query.edit_message_text(
                    text=(
                        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {found_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.\n\n"
                        f"üìà –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\n"
                        f"–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –∏ –≤–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏."
                    ),
                    reply_markup=None
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        pagination_manager.add_items_for_user(user_id, all_items, mode)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_text(
            text=(
                f"‚úÖ {'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à–µ–Ω!' if context.user_data.get('auto_trading_enabled', False) else '–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!'}\n\n"
                f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"- –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {found_count}\n"
                f"- –ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {purchases}\n"
                f"- –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {sales}\n"
                f"- –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}\n\n"
                f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."
            ),
            reply_markup=None
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        await show_auto_stats_with_pagination(query, context)
        
    except Exception as e:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        error_traceback = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_auto_trading: {str(e)}\n{error_traceback}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        error_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="auto_arbitrage")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="arbitrage")]
        ])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        error_message = str(e)
        # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        if len(error_message) > 200:
            error_message = error_message[:200] + "..."
            
        await query.edit_message_text(
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ:\n{error_message}",
            reply_markup=error_keyboard
        )


async def check_balance_command(query: CallbackQuery, context: CallbackContext) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ DMarket.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import os
    
    public_key = context.user_data.get("api_key", "") if hasattr(context, "user_data") else ""
    secret_key = context.user_data.get("api_secret", "") if hasattr(context, "user_data") else ""
    
    if not public_key or not secret_key:
        public_key = os.environ.get("DMARKET_PUBLIC_KEY", "")
        secret_key = os.environ.get("DMARKET_SECRET_KEY", "")
    
    if not public_key or not secret_key:
        await query.edit_message_text(
            text=(
                "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á–∏ DMarket –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n\n"
                "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á–∏ DMarket "
                "—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setup."
            ),
            reply_markup=get_back_to_arbitrage_keyboard()
        )
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await query.edit_message_text(
        text="‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ DMarket...",
        reply_markup=None
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º API-–∫–ª–∏–µ–Ω—Ç
        api_client = DMarketAPI(
            public_key,
            secret_key,
            "https://api.dmarket.com",
            max_retries=3
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        has_funds, balance = await check_user_balance(api_client)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="arbitrage")]
        ])
          # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if has_funds:
            await query.edit_message_text(
                text=(
                    f"‚úÖ –ë–∞–ª–∞–Ω—Å –Ω–∞ DMarket: ${balance:.2f}\n\n"
                    f"{'‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏' if balance >= 1.0 else '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–∏–Ω. $1.00)'}"
                ),
                reply_markup=keyboard
            )
        elif balance > 0:
            # –ï—Å—Ç—å –±–∞–ª–∞–Ω—Å, –Ω–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
            await query.edit_message_text(
                text=(
                    f"‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–∞ DMarket: ${balance:.2f}\n\n"
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏. "
                    f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ DMarket."
                ),
                reply_markup=keyboard
            )
        else:
            # –ë–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0, –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å API
            api_error_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á–∏", callback_data="setup")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="arbitrage")]
            ])
            
            await query.edit_message_text(
                text=(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å DMarket\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "1. –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏ DMarket\n"
                    "2. –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è API –∫–ª—é—á–µ–π\n"
                    "3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —É API –∫–ª—é—á–µ–π\n\n"
                    "–û–±–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
                ),
                reply_markup=api_error_keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        error_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_balance")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="arbitrage")]
        ])
        
        await query.edit_message_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:\n{str(e)}",
            reply_markup=error_keyboard
        )


async def show_auto_stats(query: CallbackQuery, context: CallbackContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    await show_auto_stats_with_pagination(query, context)


async def stop_auto_trading(query: CallbackQuery, context: CallbackContext) -> None:
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    user_id = query.from_user.id
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if hasattr(context, "user_data"):
        context.user_data["auto_trading_enabled"] = False
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="arbitrage")]
    ])
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    await query.edit_message_text(
        text=(
            "üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n\n"
            "–í—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –Ω–æ –Ω–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ "
            "–≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç."
        ),
        reply_markup=keyboard
    )
    
    logger.info(f"–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
