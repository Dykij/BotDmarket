"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∏–≥—Ä–∞–º.
"""
import logging
from typing import Dict, List, Any, Optional, Union, cast
import json

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from src.dmarket.arbitrage import find_arbitrage_items
from src.dmarket.game_filters import (
    FilterFactory, apply_filters_to_items, build_api_params_for_game
)
from src.utils.api_error_handling import APIError
from src.utils.dmarket_api_utils import execute_api_request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
GAMES_MAPPING = {
    "csgo": "CS2",
    "dota2": "Dota 2",
    "tf2": "Team Fortress 2",
    "rust": "Rust"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä
DEFAULT_FILTERS = {
    "csgo": {
        "float_min": 0.0,
        "float_max": 1.0,
        "min_price": 1.0,
        "max_price": 500.0
    },
    "dota2": {
        "min_price": 1.0,
        "max_price": 500.0
    },
    "tf2": {
        "min_price": 1.0,
        "max_price": 300.0
    },
    "rust": {
        "min_price": 1.0,
        "max_price": 200.0
    }
}

# –§–∏–ª—å—Ç—Ä—ã –ø–æ —ç–∫—Å—Ç–µ—Ä—å–µ—Ä—É –¥–ª—è CS2
CS2_EXTERIORS = [
    "Factory New", "Minimal Wear", "Field-Tested", "Well-Worn", "Battle-Scarred"
]

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ä—É–∂–∏—è –¥–ª—è CS2
CS2_CATEGORIES = [
    "knife", "pistol", "rifle", "smg", "shotgun", "sniper rifle", 
    "machinegun", "container", "sticker", "gloves"
]

# –†–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è CS2
CS2_RARITIES = [
    "Consumer", "Industrial", "Mil-Spec", "Restricted", "Classified", 
    "Covert", "Contraband"
]

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–µ—Ä–æ–∏ –¥–ª—è Dota 2
DOTA2_HEROES = [
    "Pudge", "Invoker", "Anti-Mage", "Juggernaut", "Phantom Assassin", 
    "Drow Ranger", "Crystal Maiden", "Axe", "Sniper", "Techies"
]

# –†–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è Dota 2
DOTA2_RARITIES = [
    "Common", "Uncommon", "Rare", "Mythical", "Immortal", "Legendary", 
    "Arcana", "Ancient"
]

# –ö–ª–∞—Å—Å—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è TF2
TF2_CLASSES = [
    "Scout", "Soldier", "Pyro", "Demoman", "Heavy", "Engineer", 
    "Medic", "Sniper", "Spy", "All Classes"
]


async def handle_game_filters(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /filters –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∏–≥—Ä–∞–º.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSGO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    game = "csgo"
    if hasattr(context, 'user_data') and "current_game" in context.user_data:
        game = context.user_data["current_game"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    filters = DEFAULT_FILTERS.get(game, {}).copy()
    if hasattr(context, 'user_data') and "game_filters" in context.user_data:
        user_filters = context.user_data["game_filters"].get(game, {})
        filters.update(user_filters)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    game_filter = FilterFactory.get_filter(game)
    filter_description = game_filter.get_filter_description(filters)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    game_name = GAMES_MAPPING.get(game, game)
    message_text = (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã *{game_name}*\n\n"
        f"–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n{filter_description}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–≥—Ä—ã
    if game == "csgo":
        keyboard.extend([
            [
                InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"filter:price:{game}"),
                InlineKeyboardButton("üîç Float", callback_data=f"filter:float:{game}")
            ],
            [
                InlineKeyboardButton("üß© –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"filter:category:{game}"),
                InlineKeyboardButton("‚ú® –†–µ–¥–∫–æ—Å—Ç—å", callback_data=f"filter:rarity:{game}")
            ],
            [
                InlineKeyboardButton("üî∂ –í–Ω–µ—à–Ω–∏–π –≤–∏–¥", callback_data=f"filter:exterior:{game}"),
                InlineKeyboardButton("üìä StatTrak", callback_data=f"filter:stattrak:{game}")
            ]
        ])
    elif game == "dota2":
        keyboard.extend([
            [
                InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"filter:price:{game}"),
                InlineKeyboardButton("ü¶∏‚Äç‚ôÇÔ∏è –ì–µ—Ä–æ–π", callback_data=f"filter:hero:{game}")
            ],
            [
                InlineKeyboardButton("‚ú® –†–µ–¥–∫–æ—Å—Ç—å", callback_data=f"filter:rarity:{game}"),
                InlineKeyboardButton("üß© –°–ª–æ—Ç", callback_data=f"filter:slot:{game}")
            ]
        ])
    elif game == "tf2":
        keyboard.extend([
            [
                InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"filter:price:{game}"),
                InlineKeyboardButton("üë®‚Äçüöí –ö–ª–∞—Å—Å", callback_data=f"filter:class:{game}")
            ],
            [
                InlineKeyboardButton("‚ú® –ö–∞—á–µ—Å—Ç–≤–æ", callback_data=f"filter:quality:{game}"),
                InlineKeyboardButton("üß© –¢–∏–ø", callback_data=f"filter:type:{game}")
            ]
        ])
    elif game == "rust":
        keyboard.extend([
            [
                InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"filter:price:{game}"),
                InlineKeyboardButton("üß© –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"filter:category:{game}")
            ],
            [
                InlineKeyboardButton("‚ú® –†–µ–¥–∫–æ—Å—Ç—å", callback_data=f"filter:rarity:{game}")
            ]
        ])
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä
    keyboard.extend([
        [
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"filter:reset:{game}"),
            InlineKeyboardButton("üéÆ –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data="filter:change_game")
        ],
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏", callback_data=f"filter:search:{game}")
        ]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_filter_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    # –§–æ—Ä–º–∞—Ç: "filter:action:game"
    callback_data = query.data.split(":")
    
    if len(callback_data) < 3:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback.",
            parse_mode="Markdown"
        )
        return
    
    action = callback_data[1]
    game = callback_data[2] if len(callback_data) > 2 else "csgo"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if action == "price":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
        await handle_price_filter(update, context, game)
        
    elif action == "float" and game == "csgo":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ float –¥–ª—è CS2
        await handle_float_filter(update, context)
        
    elif action == "category" and game == "csgo":
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ä—É–∂–∏—è –¥–ª—è CS2
        await handle_category_filter(update, context)
        
    elif action == "rarity":
        # –í—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        await handle_rarity_filter(update, context, game)
        
    elif action == "exterior" and game == "csgo":
        # –í—ã–±–æ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –¥–ª—è CS2
        await handle_exterior_filter(update, context)
        
    elif action == "stattrak" and game == "csgo":
        # –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ StatTrak –¥–ª—è CS2
        await handle_stattrak_filter(update, context)
        
    elif action == "hero" and game == "dota2":
        # –í—ã–±–æ—Ä –≥–µ—Ä–æ—è –¥–ª—è Dota 2
        await handle_hero_filter(update, context)
        
    elif action == "class" and game == "tf2":
        # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è TF2
        await handle_class_filter(update, context)
        
    elif action == "reset":
        # –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã
        await handle_reset_filters(update, context, game)
        
    elif action == "change_game":
        # –°–º–µ–Ω–∞ –∏–≥—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        await handle_change_game_filter(update, context)
        
    elif action == "search":
        # –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        await handle_search_with_filters(update, context, game)
        
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await query.edit_message_text(
            f"‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ '{action}' –¥–ª—è –∏–≥—Ä—ã {game} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
            parse_mode="Markdown"
        )


async def handle_price_filter(update: Update, context: CallbackContext, game: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã
    """
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    filters = DEFAULT_FILTERS.get(game, {}).copy()
    if hasattr(context, 'user_data') and "game_filters" in context.user_data:
        user_filters = context.user_data["game_filters"].get(game, {})
        filters.update(user_filters)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω
    min_price = filters.get("min_price", 1.0)
    max_price = filters.get("max_price", 500.0)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω—ã
    message_text = (
        f"üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –¥–ª—è –∏–≥—Ä—ã *{GAMES_MAPPING.get(game, game)}*\n\n"
        f"–¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${min_price:.2f} - ${max_price:.2f}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ü–µ–Ω
    keyboard = [
        [
            InlineKeyboardButton("$1-10", callback_data=f"price_range:{game}:1:10"),
            InlineKeyboardButton("$10-50", callback_data=f"price_range:{game}:10:50"),
            InlineKeyboardButton("$50-100", callback_data=f"price_range:{game}:50:100")
        ],
        [
            InlineKeyboardButton("$100-250", callback_data=f"price_range:{game}:100:250"),
            InlineKeyboardButton("$250-500", callback_data=f"price_range:{game}:250:500"),
            InlineKeyboardButton("$500+", callback_data=f"price_range:{game}:500:10000")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"back_to_filters:{game}")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_float_filter(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞ float –¥–ª—è CS2.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    game = "csgo"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è CS2 –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    filters = DEFAULT_FILTERS.get(game, {}).copy()
    if hasattr(context, 'user_data') and "game_filters" in context.user_data:
        user_filters = context.user_data["game_filters"].get(game, {})
        filters.update(user_filters)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è float
    float_min = filters.get("float_min", 0.0)
    float_max = filters.get("float_max", 1.0)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ float
    message_text = (
        f"üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Float –¥–ª—è –∏–≥—Ä—ã *CS2*\n\n"
        f"–¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {float_min:.3f} - {float_max:.3f}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω Float:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ float
    keyboard = [
        [
            InlineKeyboardButton("0.00-0.07 (FN)", callback_data="float_range:csgo:0:0.07"),
            InlineKeyboardButton("0.07-0.15 (MW)", callback_data="float_range:csgo:0.07:0.15")
        ],
        [
            InlineKeyboardButton("0.15-0.38 (FT)", callback_data="float_range:csgo:0.15:0.38"),
            InlineKeyboardButton("0.38-0.45 (WW)", callback_data="float_range:csgo:0.38:0.45")
        ],
        [
            InlineKeyboardButton("0.45-1.00 (BS)", callback_data="float_range:csgo:0.45:1.0"),
            InlineKeyboardButton("–í—Å–µ (0.00-1.00)", callback_data="float_range:csgo:0:1")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_filters:csgo")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_category_filter(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ä—É–∂–∏—è –¥–ª—è CS2.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    message_text = (
        "üß© –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è *CS2*:\n\n"
        "–¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ CS2:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = []
    row = []
    
    for i, category in enumerate(CS2_CATEGORIES):
        # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if i % 2 == 0 and i > 0:
            keyboard.append(row)
            row = []
        
        row.append(InlineKeyboardButton(
            category.capitalize(), 
            callback_data=f"set_category:csgo:{category}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_filters:csgo")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_rarity_filter(update: Update, context: CallbackContext, game: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã
    """
    query = update.callback_query
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–≥—Ä—ã
    rarities = []
    if game == "csgo":
        rarities = CS2_RARITIES
    elif game == "dota2":
        rarities = DOTA2_RARITIES
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä - –±–∞–∑–æ–≤—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
        rarities = ["Common", "Uncommon", "Rare", "Mythical", "Legendary"]
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
    message_text = (
        f"‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è *{GAMES_MAPPING.get(game, game)}*:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
    keyboard = []
    row = []
    
    for i, rarity in enumerate(rarities):
        # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if i % 2 == 0 and i > 0:
            keyboard.append(row)
            row = []
        
        row.append(InlineKeyboardButton(
            rarity, 
            callback_data=f"set_rarity:{game}:{rarity}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"back_to_filters:{game}")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_exterior_filter(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –¥–ª—è CS2.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    message_text = (
        "üî∂ –í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è *CS2*:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    keyboard = []
    
    for exterior in CS2_EXTERIORS:
        keyboard.append([
            InlineKeyboardButton(
                exterior, 
                callback_data=f"set_exterior:csgo:{exterior}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_filters:csgo")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_stattrak_filter(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ StatTrak –¥–ª—è CS2.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è CS2
    if not hasattr(context, 'user_data'):
        context.user_data = {}
        
    if "game_filters" not in context.user_data:
        context.user_data["game_filters"] = {}
        
    if "csgo" not in context.user_data["game_filters"]:
        context.user_data["game_filters"]["csgo"] = {}
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ stattrak
    current_value = context.user_data["game_filters"]["csgo"].get("stattrak", False)
    context.user_data["game_filters"]["csgo"]["stattrak"] = not current_value
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    stattrak_enabled = context.user_data["game_filters"]["csgo"]["stattrak"]
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–µ
    message_text = (
        "üìä –§–∏–ª—å—Ç—Ä StatTrak –¥–ª—è CS2\n\n"
        f"StatTrak: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if stattrak_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton(
                "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å StatTrak", 
                callback_data="filter:stattrak:csgo"
            )
        ],
        [
            InlineKeyboardButton(
                "¬´ –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", 
                callback_data="back_to_filters:csgo"
            )
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup
    )


async def handle_hero_filter(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–µ—Ä–æ—è –¥–ª—è Dota 2.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è
    message_text = (
        "ü¶∏‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –¥–ª—è Dota 2:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è –≤—Ä—É—á–Ω—É—é"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≥–µ—Ä–æ–µ–≤
    keyboard = []
    row = []
    
    for i, hero in enumerate(DOTA2_HEROES):
        # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if i % 2 == 0 and i > 0:
            keyboard.append(row)
            row = []
        
        row.append(InlineKeyboardButton(
            hero, 
            callback_data=f"set_hero:dota2:{hero}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_filters:dota2")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_class_filter(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è TF2.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
    message_text = (
        "üë®‚Äçüöí –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è Team Fortress 2:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–ª–∞—Å—Å–æ–≤
    keyboard = []
    row = []
    
    for i, tf_class in enumerate(TF2_CLASSES):
        # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if i % 2 == 0 and i > 0:
            keyboard.append(row)
            row = []
        
        row.append(InlineKeyboardButton(
            tf_class, 
            callback_data=f"set_class:tf2:{tf_class}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_filters:tf2")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_reset_filters(update: Update, context: CallbackContext, game: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã
    """
    query = update.callback_query
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    if hasattr(context, 'user_data') and "game_filters" in context.user_data:
        if game in context.user_data["game_filters"]:
            context.user_data["game_filters"][game] = {}
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    message_text = (
        f"üîÑ –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã *{GAMES_MAPPING.get(game, game)}* —Å–±—Ä–æ—à–µ–Ω—ã!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton(
                "¬´ –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", 
                callback_data=f"back_to_filters:{game}"
            )
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_change_game_filter(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É –∏–≥—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    message_text = (
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–≥—Ä
    keyboard = [
        [
            InlineKeyboardButton("üî´ CS2", callback_data="select_game_filter:csgo"),
            InlineKeyboardButton("üèÜ Dota 2", callback_data="select_game_filter:dota2")
        ],
        [
            InlineKeyboardButton("üé≠ Team Fortress 2", callback_data="select_game_filter:tf2"),
            InlineKeyboardButton("üèùÔ∏è Rust", callback_data="select_game_filter:rust")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup
    )


async def handle_search_with_filters(update: Update, context: CallbackContext, game: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã
    """
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã
    filters = DEFAULT_FILTERS.get(game, {}).copy()
    if hasattr(context, 'user_data') and "game_filters" in context.user_data:
        user_filters = context.user_data["game_filters"].get(game, {})
        filters.update(user_filters)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    game_filter = FilterFactory.get_filter(game)
    filter_description = game_filter.get_filter_description(filters)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    await query.edit_message_text(
        f"üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è {GAMES_MAPPING.get(game, game)} —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:\n"
        f"{filter_description}\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="Markdown"
    )
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API
        api_params = build_api_params_for_game(game, filters)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        async def search_items():
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ API
            items = await find_arbitrage_items(
                game=game,
                min_price=filters.get("min_price", 0),
                max_price=filters.get("max_price", 500),
                limit=50,
                extra_params=api_params
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
            filtered_items = apply_filters_to_items(items, game, filters)
            
            return filtered_items
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ API
        items = await execute_api_request(
            request_func=search_items,
            endpoint_type="market",
            max_retries=2
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not items:
            await query.edit_message_text(
                f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è {GAMES_MAPPING.get(game, game)} "
                f"—Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:\n{filter_description}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        "¬´ –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", 
                        callback_data=f"back_to_filters:{game}"
                    )]
                ]),
                parse_mode="Markdown"
            )
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_items = items[:10]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        message_text = (
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è {GAMES_MAPPING.get(game, game)} "
            f"—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:\n{filter_description}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        for i, item in enumerate(display_items, 1):
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
            title = item.get("title", item.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"))
            price = float(item.get("price", {}).get("USD", 0))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–≥—Ä—ã
            extra_info = []
            
            if game == "csgo":
                if "float" in item:
                    extra_info.append(f"Float: {item['float']:.3f}")
                if "exterior" in item:
                    extra_info.append(f"Exterior: {item['exterior']}")
                if "category" in item:
                    extra_info.append(f"Category: {item['category']}")
            
            elif game == "dota2":
                if "hero" in item:
                    extra_info.append(f"–ì–µ—Ä–æ–π: {item['hero']}")
                if "rarity" in item:
                    extra_info.append(f"–†–µ–¥–∫–æ—Å—Ç—å: {item['rarity']}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞
            extra_text = f" ({', '.join(extra_info)})" if extra_info else ""
            message_text += f"{i}. `{title}`{extra_text} - ${price:.2f}\n"
            
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —á–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        if len(items) > len(display_items):
            message_text += f"\n_–ü–æ–∫–∞–∑–∞–Ω–æ {len(display_items)} –∏–∑ {len(items)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤_\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                    callback_data=f"filter:search:{game}"
                ),
                InlineKeyboardButton(
                    "¬´ –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", 
                    callback_data=f"back_to_filters:{game}"
                )
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    except APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "¬´ –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", 
                    callback_data=f"back_to_filters:{game}"
                )]
            ]),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {str(e)}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "¬´ –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", 
                    callback_data=f"back_to_filters:{game}"
                )]
            ])
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤

async def handle_price_range_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    # –§–æ—Ä–º–∞—Ç: "price_range:game:min:max"
    callback_data = query.data.split(":")
    
    if len(callback_data) < 4:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.",
            parse_mode="Markdown"
        )
        return
    
    game = callback_data[1]
    min_price = float(callback_data[2])
    max_price = float(callback_data[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
    if not hasattr(context, 'user_data'):
        context.user_data = {}
        
    if "game_filters" not in context.user_data:
        context.user_data["game_filters"] = {}
        
    if game not in context.user_data["game_filters"]:
        context.user_data["game_filters"][game] = {}
    
    context.user_data["game_filters"][game]["min_price"] = min_price
    context.user_data["game_filters"][game]["max_price"] = max_price
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await query.edit_message_text(
        f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è {GAMES_MAPPING.get(game, game)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: "
        f"${min_price:.2f} - ${max_price:.2f}\n\n"
        "–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...",
        parse_mode="Markdown"
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    query.data = f"back_to_filters:{game}"
    await handle_back_to_filters_callback(update, context)


async def handle_float_range_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ float.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    # –§–æ—Ä–º–∞—Ç: "float_range:game:min:max"
    callback_data = query.data.split(":")
    
    if len(callback_data) < 4:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ float.",
            parse_mode="Markdown"
        )
        return
    
    game = callback_data[1]
    float_min = float(callback_data[2])
    float_max = float(callback_data[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω float
    if not hasattr(context, 'user_data'):
        context.user_data = {}
        
    if "game_filters" not in context.user_data:
        context.user_data["game_filters"] = {}
        
    if game not in context.user_data["game_filters"]:
        context.user_data["game_filters"][game] = {}
    
    context.user_data["game_filters"][game]["float_min"] = float_min
    context.user_data["game_filters"][game]["float_max"] = float_max
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É float
    exterior = "All"
    if float_min == 0.0 and float_max == 0.07:
        exterior = "Factory New"
    elif float_min == 0.07 and float_max == 0.15:
        exterior = "Minimal Wear"
    elif float_min == 0.15 and float_max == 0.38:
        exterior = "Field-Tested"
    elif float_min == 0.38 and float_max == 0.45:
        exterior = "Well-Worn"
    elif float_min == 0.45 and float_max == 1.0:
        exterior = "Battle-Scarred"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await query.edit_message_text(
        f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω Float –¥–ª—è CS2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: "
        f"{float_min:.3f} - {float_max:.3f} ({exterior})\n\n"
        "–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...",
        parse_mode="Markdown"
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    query.data = f"back_to_filters:{game}"
    await handle_back_to_filters_callback(update, context)


async def handle_set_category_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    # –§–æ—Ä–º–∞—Ç: "set_category:game:category"
    callback_data = query.data.split(":", 2)
    
    if len(callback_data) < 3:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            parse_mode="Markdown"
        )
        return
    
    game = callback_data[1]
    category = callback_data[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if not hasattr(context, 'user_data'):
        context.user_data = {}
        
    if "game_filters" not in context.user_data:
        context.user_data["game_filters"] = {}
        
    if game not in context.user_data["game_filters"]:
        context.user_data["game_filters"][game] = {}
    
    context.user_data["game_filters"][game]["category"] = category
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await query.edit_message_text(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è {GAMES_MAPPING.get(game, game)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {category}\n\n"
        "–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...",
        parse_mode="Markdown"
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    query.data = f"back_to_filters:{game}"
    await handle_back_to_filters_callback(update, context)


async def handle_set_rarity_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    # –§–æ—Ä–º–∞—Ç: "set_rarity:game:rarity"
    callback_data = query.data.split(":", 2)
    
    if len(callback_data) < 3:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏.",
            parse_mode="Markdown"
        )
        return
    
    game = callback_data[1]
    rarity = callback_data[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–µ–¥–∫–æ—Å—Ç—å
    if not hasattr(context, 'user_data'):
        context.user_data = {}
        
    if "game_filters" not in context.user_data:
        context.user_data["game_filters"] = {}
        
    if game not in context.user_data["game_filters"]:
        context.user_data["game_filters"][game] = {}
    
    context.user_data["game_filters"][game]["rarity"] = rarity
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await query.edit_message_text(
        f"‚úÖ –†–µ–¥–∫–æ—Å—Ç—å –¥–ª—è {GAMES_MAPPING.get(game, game)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {rarity}\n\n"
        "–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...",
        parse_mode="Markdown"
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    query.data = f"back_to_filters:{game}"
    await handle_back_to_filters_callback(update, context)


async def handle_set_exterior_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    # –§–æ—Ä–º–∞—Ç: "set_exterior:game:exterior"
    callback_data = query.data.split(":", 2)
    
    if len(callback_data) < 3:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞.",
            parse_mode="Markdown"
        )
        return
    
    game = callback_data[1]
    exterior = callback_data[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
    if not hasattr(context, 'user_data'):
        context.user_data = {}
        
    if "game_filters" not in context.user_data:
        context.user_data["game_filters"] = {}
        
    if game not in context.user_data["game_filters"]:
        context.user_data["game_filters"][game] = {}
    
    context.user_data["game_filters"][game]["exterior"] = exterior
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω float
    if exterior == "Factory New":
        context.user_data["game_filters"][game]["float_min"] = 0.0
        context.user_data["game_filters"][game]["float_max"] = 0.07
    elif exterior == "Minimal Wear":
        context.user_data["game_filters"][game]["float_min"] = 0.07
        context.user_data["game_filters"][game]["float_max"] = 0.15
    elif exterior == "Field-Tested":
        context.user_data["game_filters"][game]["float_min"] = 0.15
        context.user_data["game_filters"][game]["float_max"] = 0.38
    elif exterior == "Well-Worn":
        context.user_data["game_filters"][game]["float_min"] = 0.38
        context.user_data["game_filters"][game]["float_max"] = 0.45
    elif exterior == "Battle-Scarred":
        context.user_data["game_filters"][game]["float_min"] = 0.45
        context.user_data["game_filters"][game]["float_max"] = 1.0
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await query.edit_message_text(
        f"‚úÖ –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –¥–ª—è CS2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {exterior}\n\n"
        "–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...",
        parse_mode="Markdown"
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    query.data = f"back_to_filters:{game}"
    await handle_back_to_filters_callback(update, context)


async def handle_set_hero_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–µ—Ä–æ—è.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    # –§–æ—Ä–º–∞—Ç: "set_hero:game:hero"
    callback_data = query.data.split(":", 2)
    
    if len(callback_data) < 3:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ—Ä–æ—è.",
            parse_mode="Markdown"
        )
        return
    
    game = callback_data[1]
    hero = callback_data[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–µ—Ä–æ—è
    if not hasattr(context, 'user_data'):
        context.user_data = {}
        
    if "game_filters" not in context.user_data:
        context.user_data["game_filters"] = {}
        
    if game not in context.user_data["game_filters"]:
        context.user_data["game_filters"][game] = {}
    
    context.user_data["game_filters"][game]["hero"] = hero
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await query.edit_message_text(
        f"‚úÖ –ì–µ—Ä–æ–π –¥–ª—è Dota 2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {hero}\n\n"
        "–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...",
        parse_mode="Markdown"
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    query.data = f"back_to_filters:{game}"
    await handle_back_to_filters_callback(update, context)


async def handle_set_class_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    # –§–æ—Ä–º–∞—Ç: "set_class:game:class"
    callback_data = query.data.split(":", 2)
    
    if len(callback_data) < 3:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∞—Å—Å–∞.",
            parse_mode="Markdown"
        )
        return
    
    game = callback_data[1]
    tf_class = callback_data[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
    if not hasattr(context, 'user_data'):
        context.user_data = {}
        
    if "game_filters" not in context.user_data:
        context.user_data["game_filters"] = {}
        
    if game not in context.user_data["game_filters"]:
        context.user_data["game_filters"][game] = {}
    
    context.user_data["game_filters"][game]["class"] = tf_class
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await query.edit_message_text(
        f"‚úÖ –ö–ª–∞—Å—Å –¥–ª—è Team Fortress 2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tf_class}\n\n"
        "–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...",
        parse_mode="Markdown"
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    query.data = f"back_to_filters:{game}"
    await handle_back_to_filters_callback(update, context)


async def handle_select_game_filter_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–≥—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    # –§–æ—Ä–º–∞—Ç: "select_game_filter:game"
    callback_data = query.data.split(":")
    
    if len(callback_data) < 2:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã.",
            parse_mode="Markdown"
        )
        return
    
    game = callback_data[1]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    
    context.user_data["current_game"] = game
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    query.data = f"back_to_filters:{game}"
    await handle_back_to_filters_callback(update, context)


async def handle_back_to_filters_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    # –§–æ—Ä–º–∞—Ç: "back_to_filters:game"
    callback_data = query.data.split(":")
    
    if len(callback_data) < 2:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º CSGO
        game = "csgo"
    else:
        game = callback_data[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
    update.message = query.message
    await handle_game_filters(update, context)
