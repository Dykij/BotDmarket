"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä:
- CS2/CSGO: –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–¥–∫–æ—Å—Ç—å, –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥, –¥–∏–∞–ø–∞–∑–æ–Ω—ã float –∏ —Ü–µ–Ω—ã
- Dota 2: –≥–µ—Ä–æ–π, —Ä–µ–¥–∫–æ—Å—Ç—å, —Å–ª–æ—Ç, –∫–∞—á–µ—Å—Ç–≤–æ
- Team Fortress 2: –∫–ª–∞—Å—Å, –∫–∞—á–µ—Å—Ç–≤–æ, —Ç–∏–ø, —ç—Ñ—Ñ–µ–∫—Ç
- Rust: –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ç–∏–ø, —Ä–µ–¥–∫–æ—Å—Ç—å
"""

import os
import logging
from pathlib import Path
from typing import Dict, List, Any, Optional, Union, Tuple, cast

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, CallbackQuery
from telegram.ext import CallbackContext
from telegram.constants import ParseMode

# Import filters from DMarket
from src.dmarket.game_filters import (
    FilterFactory,
    CS2Filter,
    Dota2Filter,
    TF2Filter,
    RustFilter,
)

# Logger
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤

# CS2/CSGO –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CS2_CATEGORIES = [
    "Pistol", "SMG", "Rifle", "Sniper Rifle", "Shotgun", 
    "Machinegun", "Knife", "Gloves", "Sticker", "Agent", "Case"
]

CS2_RARITIES = [
    "Consumer Grade", "Industrial Grade", "Mil-Spec Grade", 
    "Restricted", "Classified", "Covert", "Contraband"
]

CS2_EXTERIORS = [
    "Factory New", "Minimal Wear", "Field-Tested", 
    "Well-Worn", "Battle-Scarred"
]

# Dota 2 –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DOTA2_HEROES = [
    "Axe", "Anti-Mage", "Crystal Maiden", "Drow Ranger", "Juggernaut", 
    "Pudge", "Lina", "Lion", "Sven", "Tiny", "Invoker", "Shadow Fiend"
    # –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
]

DOTA2_RARITIES = [
    "Common", "Uncommon", "Rare", "Mythical", 
    "Legendary", "Immortal", "Arcana"
]

DOTA2_SLOTS = [
    "Weapon", "Head", "Back", "Arms", "Shoulder", 
    "Belt", "Misc", "Taunt", "Courier", "Ward"
]

# TF2 –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TF2_CLASSES = [
    "Scout", "Soldier", "Pyro", "Demoman", 
    "Heavy", "Engineer", "Medic", "Sniper", "Spy", "All Classes"
]

TF2_QUALITIES = [
    "Normal", "Unique", "Vintage", "Genuine", 
    "Strange", "Unusual", "Haunted", "Collectors"
]

TF2_TYPES = [
    "Hat", "Weapon", "Cosmetic", "Action", "Tool", "Taunt", "Crate", "Key"
]

# Rust –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
RUST_CATEGORIES = [
    "Weapon", "Clothing", "Tool", "Construction", "Misc"
]

RUST_TYPES = [
    "Assault Rifle", "Pistol", "Shotgun", "SMG", "Jacket", 
    "Pants", "Helmet", "Boots", "Gloves", "Door", "Box"
]

RUST_RARITIES = [
    "Common", "Uncommon", "Rare", "Epic", "Legendary"
]

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
DEFAULT_FILTERS = {
    "csgo": {
        "min_price": 1.0,
        "max_price": 1000.0,
        "float_min": 0.0,
        "float_max": 1.0,
        "category": None,
        "rarity": None,
        "exterior": None,
        "stattrak": False,
        "souvenir": False
    },
    "dota2": {
        "min_price": 1.0,
        "max_price": 1000.0,
        "hero": None,
        "rarity": None,
        "slot": None,
        "quality": None,
        "tradable": True
    },
    "tf2": {
        "min_price": 1.0,
        "max_price": 1000.0,
        "class": None,
        "quality": None,
        "type": None,
        "effect": None,
        "killstreak": None,
        "australium": False
    },
    "rust": {
        "min_price": 1.0,
        "max_price": 1000.0,
        "category": None,
        "type": None,
        "rarity": None
    }
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏

def get_current_filters(context: CallbackContext, game: str) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, tf2, rust)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º user_data –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_data = context.user_data
    if not user_data:
        return DEFAULT_FILTERS.get(game, {}).copy()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ user_data
    filters = user_data.get("filters", {})
    game_filters = filters.get(game, {})
    
    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not game_filters:
        return DEFAULT_FILTERS.get(game, {}).copy()
    
    return game_filters.copy()

def update_filters(context: CallbackContext, game: str, new_filters: Dict[str, Any]) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, tf2, rust)
        new_filters: –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    # –ü–æ–ª—É—á–∞–µ–º user_data –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_data = context.user_data
    if not user_data:
        user_data = {}
        context.user_data = user_data
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = user_data.get("filters", {})
    
    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    if not filters:
        filters = {}
        user_data["filters"] = filters
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã
    game_filters = filters.get(game, {})
    
    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    if not game_filters:
        game_filters = {}
        filters[game] = game_filters
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    game_filters.update(new_filters)

def get_game_filter_keyboard(game: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–≥—Ä—ã.
    
    Args:
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, tf2, rust)
        
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    keyboard = []
    
    # –û–±—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä
    keyboard.append([
        InlineKeyboardButton("üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", callback_data=f"price_range:{game}")
    ])
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
    if game == "csgo":
        keyboard.extend([
            [InlineKeyboardButton("üî¢ –î–∏–∞–ø–∞–∑–æ–Ω Float", callback_data=f"float_range:{game}")],
            [InlineKeyboardButton("üî´ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"set_category:{game}")],
            [InlineKeyboardButton("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å", callback_data=f"set_rarity:{game}")],
            [InlineKeyboardButton("üß© –í–Ω–µ—à–Ω–∏–π –≤–∏–¥", callback_data=f"set_exterior:{game}")],
            [InlineKeyboardButton("üî¢ StatTrak‚Ñ¢", callback_data=f"filter:stattrak:{game}")],
            [InlineKeyboardButton("üèÜ –°—É–≤–µ–Ω–∏—Ä", callback_data=f"filter:souvenir:{game}")]
        ])
    elif game == "dota2":
        keyboard.extend([
            [InlineKeyboardButton("ü¶∏ –ì–µ—Ä–æ–π", callback_data=f"set_hero:{game}")],
            [InlineKeyboardButton("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å", callback_data=f"set_rarity:{game}")],
            [InlineKeyboardButton("üß© –°–ª–æ—Ç", callback_data=f"set_slot:{game}")],
            [InlineKeyboardButton("üèÜ –ö–∞—á–µ—Å—Ç–≤–æ", callback_data=f"filter:quality:{game}")],
            [InlineKeyboardButton("üîÑ –û–±–º–µ–Ω–∏–≤–∞–µ–º–æ—Å—Ç—å", callback_data=f"filter:tradable:{game}")]
        ])
    elif game == "tf2":
        keyboard.extend([
            [InlineKeyboardButton("üë§ –ö–ª–∞—Å—Å", callback_data=f"set_class:{game}")],
            [InlineKeyboardButton("‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ", callback_data=f"filter:quality:{game}")],
            [InlineKeyboardButton("üî´ –¢–∏–ø", callback_data=f"set_type:{game}")],
            [InlineKeyboardButton("‚ú® –≠—Ñ—Ñ–µ–∫—Ç", callback_data=f"filter:effect:{game}")],
            [InlineKeyboardButton("üî¢ Killstreak", callback_data=f"filter:killstreak:{game}")],
            [InlineKeyboardButton("üî∂ Australium", callback_data=f"filter:australium:{game}")]
        ])
    elif game == "rust":
        keyboard.extend([
            [InlineKeyboardButton("üî´ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"set_category:{game}")],
            [InlineKeyboardButton("üß© –¢–∏–ø", callback_data=f"set_type:{game}")],
            [InlineKeyboardButton("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å", callback_data=f"set_rarity:{game}")]
        ])
    
    # –ö–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.extend([
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data=f"filter:reset:{game}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_filters:main")]
    ])
    
    return InlineKeyboardMarkup(keyboard)

def get_filter_description(game: str, filters: Dict[str, Any]) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    
    Args:
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, tf2, rust)
        filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FilterFactory –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    game_filter = FilterFactory.get_filter(game)
    return game_filter.get_filter_description(filters)

def build_api_params_for_game(game: str, filters: Dict[str, Any]) -> Dict[str, Any]:
    """
    –°—Ç—Ä–æ–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è DMarket API –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    
    Args:
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, tf2, rust)
        filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è API
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FilterFactory –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    game_filter = FilterFactory.get_filter(game)
    return game_filter.build_api_params(filters)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram

async def handle_game_filters(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /filters - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–≥—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    keyboard = [
        [
            InlineKeyboardButton("üéÆ CS2", callback_data="select_game_filter:csgo"),
            InlineKeyboardButton("üéÆ Dota 2", callback_data="select_game_filter:dota2")
        ],
        [
            InlineKeyboardButton("üéÆ TF2", callback_data="select_game_filter:tf2"),
            InlineKeyboardButton("üéÆ Rust", callback_data="select_game_filter:rust")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="arbitrage")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
        reply_markup=reply_markup
    )

async def handle_select_game_filter_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
    data = query.data.split(":")
    game = data[1] if len(data) > 1 else "csgo"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = get_current_filters(context, game)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    description = get_filter_description(game, filters)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    reply_markup = get_game_filter_keyboard(game)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    game_names = {
        "csgo": "CS2 (CS:GO)",
        "dota2": "Dota 2",
        "tf2": "Team Fortress 2",
        "rust": "Rust"
    }
    
    game_name = game_names.get(game, game)
    
    message_text = f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game_name}:\n\n"
    
    if description:
        message_text += f"üìã –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n{description}\n"
    else:
        message_text += "üìã –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
    
    await query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def handle_price_range_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
    data = query.data.split(":")
    game = data[1] if len(data) > 1 else "csgo"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = get_current_filters(context, game)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    keyboard = [
        [
            InlineKeyboardButton("$1-10", callback_data=f"filter:price_range:1:10:{game}"),
            InlineKeyboardButton("$10-50", callback_data=f"filter:price_range:10:50:{game}")
        ],
        [
            InlineKeyboardButton("$50-100", callback_data=f"filter:price_range:50:100:{game}"),
            InlineKeyboardButton("$100-500", callback_data=f"filter:price_range:100:500:{game}")
        ],
        [
            InlineKeyboardButton("$500+", callback_data=f"filter:price_range:500:10000:{game}"),
            InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"filter:price_range:reset:{game}")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_game_filter:{game}")]]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    min_price = filters.get("min_price", DEFAULT_FILTERS[game]["min_price"])
    max_price = filters.get("max_price", DEFAULT_FILTERS[game]["max_price"])
    
    await query.edit_message_text(
        text=f"üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω:\n\n–¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${min_price:.2f} - ${max_price:.2f}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:",
        reply_markup=reply_markup
    )

async def handle_float_range_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Float (–¥–ª—è CS2).
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
    data = query.data.split(":")
    game = data[1] if len(data) > 1 else "csgo"
    
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ CS2, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if game != "csgo":
        await query.edit_message_text(
            text="–î–∏–∞–ø–∞–∑–æ–Ω Float –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è CS2.",
            reply_markup=get_game_filter_keyboard(game)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = get_current_filters(context, game)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Float
    keyboard = [
        [
            InlineKeyboardButton("Factory New (0.00-0.07)", callback_data=f"filter:float_range:0.00:0.07:{game}"),
            InlineKeyboardButton("Minimal Wear (0.07-0.15)", callback_data=f"filter:float_range:0.07:0.15:{game}")
        ],
        [
            InlineKeyboardButton("Field-Tested (0.15-0.38)", callback_data=f"filter:float_range:0.15:0.38:{game}"),
            InlineKeyboardButton("Well-Worn (0.38-0.45)", callback_data=f"filter:float_range:0.38:0.45:{game}")
        ],
        [
            InlineKeyboardButton("Battle-Scarred (0.45-1.00)", callback_data=f"filter:float_range:0.45:1.00:{game}"),
            InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"filter:float_range:reset:{game}")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_game_filter:{game}")]]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    float_min = filters.get("float_min", DEFAULT_FILTERS[game]["float_min"])
    float_max = filters.get("float_max", DEFAULT_FILTERS[game]["float_max"])
    
    await query.edit_message_text(
        text=f"üî¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Float:\n\n–¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {float_min:.2f} - {float_max:.2f}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω Float:",
        reply_markup=reply_markup
    )

async def handle_set_category_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è CS2).
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
    data = query.data.split(":")
    game = data[1] if len(data) > 1 else "csgo"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = get_current_filters(context, game)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞–≤–∏—Å—è—â—É—é –æ—Ç –∏–≥—Ä—ã
    keyboard = []
    categories = []
    
    if game == "csgo":
        categories = CS2_CATEGORIES
    elif game == "rust":
        categories = RUST_CATEGORIES
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    row = []
    for i, category in enumerate(categories):
        row.append(InlineKeyboardButton(category, callback_data=f"filter:category:{category}:{game}"))
        
        # –ö–∞–∂–¥—ã–µ 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π
        if len(row) == 2 or i == len(categories) - 1:
            keyboard.append(row.copy())
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"filter:category:reset:{game}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_game_filter:{game}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_category = filters.get("category", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    category_type = "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏" if game == "csgo" else "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    
    await query.edit_message_text(
        text=f"üî´ –í—ã–±–æ—Ä {category_type}:\n\n–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {current_category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )

async def handle_set_rarity_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
    data = query.data.split(":")
    game = data[1] if len(data) > 1 else "csgo"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = get_current_filters(context, game)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–≥—Ä—ã
    if game == "csgo":
        rarities = CS2_RARITIES
    elif game == "dota2":
        rarities = DOTA2_RARITIES
    elif game == "rust":
        rarities = RUST_RARITIES
    else:
        rarities = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
    keyboard = []
    row = []
    
    for i, rarity in enumerate(rarities):
        row.append(InlineKeyboardButton(rarity, callback_data=f"filter:rarity:{rarity}:{game}"))
        
        # –ö–∞–∂–¥—ã–µ 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π
        if len(row) == 2 or i == len(rarities) - 1:
            keyboard.append(row.copy())
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"filter:rarity:reset:{game}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_game_filter:{game}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_rarity = filters.get("rarity", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    
    await query.edit_message_text(
        text=f"‚≠ê –í—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏:\n\n–¢–µ–∫—É—â–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: {current_rarity}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å:",
        reply_markup=reply_markup
    )

async def handle_set_exterior_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ (–¥–ª—è CS2).
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
    data = query.data.split(":")
    game = data[1] if len(data) > 1 else "csgo"
    
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ CS2, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if game != "csgo":
        await query.edit_message_text(
            text="–í—ã–±–æ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è CS2.",
            reply_markup=get_game_filter_keyboard(game)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = get_current_filters(context, game)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    keyboard = []
    
    for exterior in CS2_EXTERIORS:
        keyboard.append([
            InlineKeyboardButton(exterior, callback_data=f"filter:exterior:{exterior}:{game}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"filter:exterior:reset:{game}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_game_filter:{game}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_exterior = filters.get("exterior", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    
    await query.edit_message_text(
        text=f"üß© –í—ã–±–æ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞:\n\n–¢–µ–∫—É—â–∏–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥: {current_exterior}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥:",
        reply_markup=reply_markup
    )

async def handle_set_hero_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è (–¥–ª—è Dota 2).
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
    data = query.data.split(":")
    game = data[1] if len(data) > 1 else "dota2"
    
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ Dota 2, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if game != "dota2":
        await query.edit_message_text(
            text="–í—ã–±–æ—Ä –≥–µ—Ä–æ—è –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Dota 2.",
            reply_markup=get_game_filter_keyboard(game)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = get_current_filters(context, game)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è
    keyboard = []
    row = []
    
    for i, hero in enumerate(DOTA2_HEROES):
        row.append(InlineKeyboardButton(hero, callback_data=f"filter:hero:{hero}:{game}"))
        
        # –ö–∞–∂–¥—ã–µ 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π
        if len(row) == 2 or i == len(DOTA2_HEROES) - 1:
            keyboard.append(row.copy())
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"filter:hero:reset:{game}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_game_filter:{game}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_hero = filters.get("hero", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    
    await query.edit_message_text(
        text=f"ü¶∏ –í—ã–±–æ—Ä –≥–µ—Ä–æ—è:\n\n–¢–µ–∫—É—â–∏–π –≥–µ—Ä–æ–π: {current_hero}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è:",
        reply_markup=reply_markup
    )

async def handle_set_class_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ (–¥–ª—è TF2).
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
    data = query.data.split(":")
    game = data[1] if len(data) > 1 else "tf2"
    
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ TF2, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if game != "tf2":
        await query.edit_message_text(
            text="–í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Team Fortress 2.",
            reply_markup=get_game_filter_keyboard(game)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = get_current_filters(context, game)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
    keyboard = []
    
    for tf_class in TF2_CLASSES:
        keyboard.append([
            InlineKeyboardButton(tf_class, callback_data=f"filter:class:{tf_class}:{game}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"filter:class:reset:{game}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_game_filter:{game}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_class = filters.get("class", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    
    await query.edit_message_text(
        text=f"üë§ –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞:\n\n–¢–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å: {current_class}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        reply_markup=reply_markup
    )

async def handle_filter_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data = query.data.split(":")
    
    if len(data) < 3:
        await query.edit_message_text(
            text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="arbitrage")]])
        )
        return
    
    filter_type = data[1]
    filter_value = data[2]
    game = data[3] if len(data) > 3 else "csgo"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = get_current_filters(context, game)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
    
    # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
    if filter_type == "price_range":
        if filter_value == "reset":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω—ã
            if "min_price" in filters:
                del filters["min_price"]
            if "max_price" in filters:
                del filters["max_price"]
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
            min_price = float(filter_value)
            max_price = float(data[3])
            filters["min_price"] = min_price
            filters["max_price"] = max_price
            game = data[4] if len(data) > 4 else "csgo"
    
    # –î–∏–∞–ø–∞–∑–æ–Ω Float
    elif filter_type == "float_range":
        if filter_value == "reset":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã Float
            if "float_min" in filters:
                del filters["float_min"]
            if "float_max" in filters:
                del filters["float_max"]
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω Float
            float_min = float(filter_value)
            float_max = float(data[3])
            filters["float_min"] = float_min
            filters["float_max"] = float_max
            game = data[4] if len(data) > 4 else "csgo"
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    elif filter_type == "category":
        if filter_value == "reset":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if "category" in filters:
                del filters["category"]
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            filters["category"] = filter_value
    
    # –†–µ–¥–∫–æ—Å—Ç—å
    elif filter_type == "rarity":
        if filter_value == "reset":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏
            if "rarity" in filters:
                del filters["rarity"]
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
            filters["rarity"] = filter_value
    
    # –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
    elif filter_type == "exterior":
        if filter_value == "reset":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
            if "exterior" in filters:
                del filters["exterior"]
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
            filters["exterior"] = filter_value
    
    # –ì–µ—Ä–æ–π
    elif filter_type == "hero":
        if filter_value == "reset":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≥–µ—Ä–æ—è
            if "hero" in filters:
                del filters["hero"]
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ—Ä–æ—è
            filters["hero"] = filter_value
    
    # –ö–ª–∞—Å—Å
    elif filter_type == "class":
        if filter_value == "reset":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–ª–∞—Å—Å–∞
            if "class" in filters:
                del filters["class"]
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å
            filters["class"] = filter_value
    
    # –ë—É–ª–µ–≤—ã —Ñ–∏–ª—å—Ç—Ä—ã (–≤–∫–ª/–≤—ã–∫–ª)
    elif filter_type in ["stattrak", "souvenir", "tradable", "australium"]:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        filters[filter_type] = not filters.get(filter_type, False)
    
    # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    elif filter_type == "reset":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        filters = DEFAULT_FILTERS.get(game, {}).copy()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    update_filters(context, game, filters)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await handle_select_game_filter_callback(update, context)

async def handle_back_to_filters_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data = query.data.split(":")
    
    if len(data) < 2:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É", callback_data="arbitrage")]
        ]
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_type = data[1]
    
    if back_type == "main":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã
        await handle_game_filters(update, context)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É", callback_data="arbitrage")]
        ]
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
