"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–≥—Ä –≤ Telegram –±–æ—Ç–µ.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö
—á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram –±–æ—Ç–∞.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Telegram Bot API: https://core.telegram.org/bots/api
"""

import logging
import json
from pathlib import Path
from typing import Dict, List, Any, Optional, Callable, Union, Tuple

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    CallbackQuery
)
from telegram.ext import (
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters
)

from src.dmarket.game_filters import (
    get_csgo_filters,
    get_dota2_filters,
    get_rust_filters,
    apply_filters_to_query
)
from src.telegram_bot.keyboards import (
    get_games_keyboard,
    get_filter_keyboard,
    get_csgo_exterior_keyboard,
    get_csgo_weapon_type_keyboard,
    get_rarity_keyboard,
    get_price_range_keyboard,
    get_pagination_keyboard
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    SELECT_GAME,
    APPLY_FILTERS,
    SET_PRICE_RANGE,
    SET_WEAPON_TYPE,
    SET_EXTERIOR,
    SET_RARITY,
    SET_COLLECTION,
    SET_HERO,
    SET_SLOT,
    SET_TOURNAMENT,
    SET_CUSTOM_FILTER,
    SEARCH_BY_NAME
) = range(12)

# –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
USER_FILTERS_DIR = Path(__file__).parents[2] / "data" / "user_filters"
# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
USER_FILTERS_DIR.mkdir(parents=True, exist_ok=True)

# –°–ª–æ–≤–∞—Ä—å —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –§–æ—Ä–º–∞—Ç: {user_id: {game: {filter_name: filter_value}}}
_user_filters = {}


def get_user_filters_file(user_id: int) -> Path:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return USER_FILTERS_DIR / f"user_{user_id}_filters.json"


def load_user_filters(user_id: int) -> Dict[str, Dict[str, Any]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–≥—Ä–∞–º
    """
    filters_file = get_user_filters_file(user_id)
    
    if filters_file.exists():
        try:
            with open(filters_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    return {}


def save_user_filters(user_id: int, filters_data: Dict[str, Dict[str, Any]]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        filters_data: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–≥—Ä–∞–º
    """
    filters_file = get_user_filters_file(user_id)
    
    try:
        with open(filters_file, "w", encoding="utf-8") as f:
            json.dump(filters_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


def get_active_filters(user_id: int, game: str) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–≥—Ä—ã.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, rust, tf2)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    """
    global _user_filters
    
    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    if user_id not in _user_filters:
        _user_filters[user_id] = load_user_filters(user_id)
    
    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    if game not in _user_filters[user_id]:
        _user_filters[user_id][game] = {}
    
    return _user_filters[user_id][game]


def update_filter(user_id: int, game: str, filter_name: str, filter_value: Any) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, rust, tf2)
        filter_name: –ò–º—è —Ñ–∏–ª—å—Ç—Ä–∞
        filter_value: –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    """
    global _user_filters
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters_data = get_active_filters(user_id, game)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    filters_data[filter_name] = filter_value
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    _user_filters[user_id][game] = filters_data
    save_user_filters(user_id, _user_filters[user_id])


def reset_filters(user_id: int, game: str) -> None:
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–≥—Ä—ã.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, rust, tf2)
    """
    global _user_filters
    
    # –û—á–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã
    if user_id in _user_filters and game in _user_filters[user_id]:
        _user_filters[user_id][game] = {}
        save_user_filters(user_id, _user_filters[user_id])


def format_filters_summary(filters_data: Dict[str, Any], game: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        filters_data: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, rust, tf2)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    """
    if not filters_data:
        return "üîç –§–∏–ª—å—Ç—Ä—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    summary = "üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    for filter_name, filter_value in filters_data.items():
        if filter_name == "price_range":
            min_price, max_price = filter_value
            summary += f"üí∞ –¶–µ–Ω–∞: ${min_price} - ${max_price}\n"
        elif filter_name == "exterior" and game == "csgo":
            summary += f"‚ú® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥: {filter_value}\n"
        elif filter_name == "weapon_type" and game == "csgo":
            summary += f"üî´ –¢–∏–ø –æ—Ä—É–∂–∏—è: {filter_value}\n"
        elif filter_name == "rarity":
            summary += f"üé® –†–µ–¥–∫–æ—Å—Ç—å: {filter_value}\n"
        elif filter_name == "search_query":
            summary += f"üîç –ü–æ–∏—Å–∫: {filter_value}\n"
        # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    return summary


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤

async def start_filters(update: Update, context: CallbackContext) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä.
    """
    query = update.callback_query
    if query:
        await query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    keyboard = get_games_keyboard(callback_prefix="filter_game")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message:
        await update.message.reply_text(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
            reply_markup=keyboard
        )
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫
    elif query:
        await query.edit_message_text(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
            reply_markup=keyboard
        )
    
    return SELECT_GAME


async def select_game(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–≥—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –∏–∑ callback_data
    game = query.data.split("_")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["selected_game"] = game
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    filters_data = get_active_filters(user_id, game)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters_summary = format_filters_summary(filters_data, game)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    keyboard = get_filter_keyboard(game)
    
    await query.edit_message_text(
        f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n{filters_summary}",
        reply_markup=keyboard
    )
    
    return APPLY_FILTERS


async def handle_filter_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    # –§–æ—Ä–º–∞—Ç: filter_GAME_FILTER_TYPE
    parts = query.data.split("_")
    game = parts[1]
    filter_type = parts[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["filter_type"] = filter_type
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if filter_type == "price":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        keyboard = get_price_range_keyboard()
        await query.edit_message_text(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:",
            reply_markup=keyboard
        )
        return SET_PRICE_RANGE
        
    elif filter_type == "weapon_type" and game == "csgo":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è
        keyboard = get_csgo_weapon_type_keyboard()
        await query.edit_message_text(
            "üî´ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:",
            reply_markup=keyboard
        )
        return SET_WEAPON_TYPE
        
    elif filter_type == "exterior" and game == "csgo":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        keyboard = get_csgo_exterior_keyboard()
        await query.edit_message_text(
            "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥:",
            reply_markup=keyboard
        )
        return SET_EXTERIOR
        
    elif filter_type == "rarity":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
        keyboard = get_rarity_keyboard(game)
        await query.edit_message_text(
            "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤:",
            reply_markup=keyboard
        )
        return SET_RARITY
        
    elif filter_type == "search":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        await query.edit_message_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:"
        )
        return SEARCH_BY_NAME
        
    elif filter_type == "reset":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        reset_filters(user_id, game)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard = get_filter_keyboard(game)
        await query.edit_message_text(
            f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\nüîç –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã",
            reply_markup=keyboard
        )
        return APPLY_FILTERS
        
    elif filter_type == "apply":
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        user_id = update.effective_user.id
        filters_data = get_active_filters(user_id, game)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filters_summary = format_filters_summary(filters_data, game)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard = get_filter_keyboard(game)
        await query.edit_message_text(
            f"üéÆ –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è {game.upper()}\n\n{filters_summary}",
            reply_markup=keyboard
        )
        return APPLY_FILTERS
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    return APPLY_FILTERS


async def handle_price_range(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    game = context.user_data.get("selected_game", "csgo")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    if query.data == "back_to_filters":
        keyboard = get_filter_keyboard(game)
        
        user_id = update.effective_user.id
        filters_data = get_active_filters(user_id, game)
        filters_summary = format_filters_summary(filters_data, game)
        
        await query.edit_message_text(
            f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n{filters_summary}",
            reply_markup=keyboard
        )
        return APPLY_FILTERS
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    if query.data == "price_custom":
        await query.edit_message_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ú–ò–ù –ú–ê–ö–°\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 50 (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç $10 –¥–æ $50)"
        )
        return SET_PRICE_RANGE
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    # –§–æ—Ä–º–∞—Ç: price_MIN_MAX
    parts = query.data.split("_")
    if len(parts) == 3 and parts[0] == "price":
        try:
            min_price = float(parts[1])
            max_price = float(parts[2])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.effective_user.id
            update_filter(user_id, game, "price_range", (min_price, max_price))
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
            keyboard = get_filter_keyboard(game)
            
            filters_data = get_active_filters(user_id, game)
            filters_summary = format_filters_summary(filters_data, game)
            
            await query.edit_message_text(
                f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n"
                f"üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${min_price} - ${max_price}\n\n"
                f"{filters_summary}",
                reply_markup=keyboard
            )
            return APPLY_FILTERS
            
        except (ValueError, IndexError):
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await query.edit_message_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_price_range_keyboard()
            )
            return SET_PRICE_RANGE
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    return SET_PRICE_RANGE


async def handle_custom_price_range(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    message = update.message.text.strip()
    game = context.user_data.get("selected_game", "csgo")
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        parts = message.split()
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            
        min_price = float(parts[0])
        max_price = float(parts[1])
        
        if min_price < 0 or max_price < 0 or min_price > max_price:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        update_filter(user_id, game, "price_range", (min_price, max_price))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard = get_filter_keyboard(game)
        
        filters_data = get_active_filters(user_id, game)
        filters_summary = format_filters_summary(filters_data, game)
        
        await update.message.reply_text(
            f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n"
            f"üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${min_price} - ${max_price}\n\n"
            f"{filters_summary}",
            reply_markup=keyboard
        )
        return APPLY_FILTERS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 50",
        )
        return SET_PRICE_RANGE


async def handle_weapon_type(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è –¥–ª—è CS:GO."""
    query = update.callback_query
    await query.answer()
    
    game = context.user_data.get("selected_game", "csgo")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    if query.data == "back_to_csgo_filters":
        keyboard = get_filter_keyboard(game)
        
        user_id = update.effective_user.id
        filters_data = get_active_filters(user_id, game)
        filters_summary = format_filters_summary(filters_data, game)
        
        await query.edit_message_text(
            f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n{filters_summary}",
            reply_markup=keyboard
        )
        return APPLY_FILTERS
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è
    # –§–æ—Ä–º–∞—Ç: weapon_TYPE
    parts = query.data.split("_")
    if len(parts) >= 2 and parts[0] == "weapon":
        weapon_type = parts[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ—Ä—É–∂–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        
        if weapon_type == "all":
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–∏–ø—ã, —É–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
            filters_data = get_active_filters(user_id, game)
            if "weapon_type" in filters_data:
                del filters_data["weapon_type"]
                _user_filters[user_id][game] = filters_data
                save_user_filters(user_id, _user_filters[user_id])
        else:
            # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            update_filter(user_id, game, "weapon_type", weapon_type)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard = get_filter_keyboard(game)
        
        filters_data = get_active_filters(user_id, game)
        filters_summary = format_filters_summary(filters_data, game)
        
        await query.edit_message_text(
            f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n{filters_summary}",
            reply_markup=keyboard
        )
        return APPLY_FILTERS
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    return SET_WEAPON_TYPE


async def handle_exterior(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –¥–ª—è CS:GO."""
    query = update.callback_query
    await query.answer()
    
    game = context.user_data.get("selected_game", "csgo")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    if query.data == "back_to_csgo_filters":
        keyboard = get_filter_keyboard(game)
        
        user_id = update.effective_user.id
        filters_data = get_active_filters(user_id, game)
        filters_summary = format_filters_summary(filters_data, game)
        
        await query.edit_message_text(
            f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n{filters_summary}",
            reply_markup=keyboard
        )
        return APPLY_FILTERS
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    # –§–æ—Ä–º–∞—Ç: exterior_TYPE
    parts = query.data.split("_")
    if len(parts) >= 2 and parts[0] == "exterior":
        exterior = parts[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        
        if exterior == "all":
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–∏–ø—ã, —É–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
            filters_data = get_active_filters(user_id, game)
            if "exterior" in filters_data:
                del filters_data["exterior"]
                _user_filters[user_id][game] = filters_data
                save_user_filters(user_id, _user_filters[user_id])
        else:
            # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            update_filter(user_id, game, "exterior", exterior)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard = get_filter_keyboard(game)
        
        filters_data = get_active_filters(user_id, game)
        filters_summary = format_filters_summary(filters_data, game)
        
        await query.edit_message_text(
            f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n{filters_summary}",
            reply_markup=keyboard
        )
        return APPLY_FILTERS
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    return SET_EXTERIOR


async def handle_rarity(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    game = context.user_data.get("selected_game", "csgo")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    if query.data.startswith("back_to_"):
        keyboard = get_filter_keyboard(game)
        
        user_id = update.effective_user.id
        filters_data = get_active_filters(user_id, game)
        filters_summary = format_filters_summary(filters_data, game)
        
        await query.edit_message_text(
            f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n{filters_summary}",
            reply_markup=keyboard
        )
        return APPLY_FILTERS
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏
    # –§–æ—Ä–º–∞—Ç: rarity_TYPE
    parts = query.data.split("_")
    if len(parts) >= 2 and parts[0] == "rarity":
        rarity = parts[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        
        if rarity == "all":
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–∏–ø—ã, —É–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
            filters_data = get_active_filters(user_id, game)
            if "rarity" in filters_data:
                del filters_data["rarity"]
                _user_filters[user_id][game] = filters_data
                save_user_filters(user_id, _user_filters[user_id])
        else:
            # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            update_filter(user_id, game, "rarity", rarity)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard = get_filter_keyboard(game)
        
        filters_data = get_active_filters(user_id, game)
        filters_summary = format_filters_summary(filters_data, game)
        
        await query.edit_message_text(
            f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n{filters_summary}",
            reply_markup=keyboard
        )
        return APPLY_FILTERS
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    return SET_RARITY


async def handle_search_query(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞."""
    message = update.message.text.strip()
    game = context.user_data.get("selected_game", "csgo")
    
    if not message:
        await update.message.reply_text(
            "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        return SEARCH_BY_NAME
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    update_filter(user_id, game, "search_query", message)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    keyboard = get_filter_keyboard(game)
    
    filters_data = get_active_filters(user_id, game)
    filters_summary = format_filters_summary(filters_data, game)
    
    await update.message.reply_text(
        f"üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {game.upper()}\n\n"
        f"üîç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {message}\n\n"
        f"{filters_summary}",
        reply_markup=keyboard
    )
    return APPLY_FILTERS


async def cancel_filters(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
    
    return ConversationHandler.END


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
def get_filters_conversation_handler() -> ConversationHandler:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    return ConversationHandler(
        entry_points=[
            CommandHandler("filters", start_filters),
            CallbackQueryHandler(start_filters, pattern="^filters$")
        ],
        states={
            SELECT_GAME: [
                CallbackQueryHandler(select_game, pattern="^filter_game_")
            ],
            APPLY_FILTERS: [
                CallbackQueryHandler(handle_filter_selection, pattern="^filter_"),
                CallbackQueryHandler(start_filters, pattern="^back_to_games$"),
                CallbackQueryHandler(cancel_filters, pattern="^back_to_main$")
            ],
            SET_PRICE_RANGE: [
                CallbackQueryHandler(handle_price_range, pattern="^(price_|back_to_filters)"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_price_range)
            ],
            SET_WEAPON_TYPE: [
                CallbackQueryHandler(handle_weapon_type, pattern="^(weapon_|back_to_csgo_filters)")
            ],
            SET_EXTERIOR: [
                CallbackQueryHandler(handle_exterior, pattern="^(exterior_|back_to_csgo_filters)")
            ],
            SET_RARITY: [
                CallbackQueryHandler(handle_rarity, pattern="^(rarity_|back_to_)")
            ],
            SEARCH_BY_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_query)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_filters),
            CallbackQueryHandler(cancel_filters, pattern="^cancel$")
        ],
        name="filters_conversation",
        persistent=False
    )
