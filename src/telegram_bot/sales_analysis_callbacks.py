"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂.
"""
import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext

from src.dmarket.arbitrage_sales_analysis import (
    analyze_item_liquidity,
    enhanced_arbitrage_search,
    get_sales_volume_stats,
)
from src.dmarket.sales_history import analyze_sales_history, get_sales_history
from src.telegram_bot.sales_analysis_handlers import get_liquidity_emoji, get_trend_emoji
from src.utils.api_error_handling import APIError
from src.utils.dmarket_api_utils import execute_api_request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


async def handle_sales_history_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: "sales_history:item_name"
    callback_data = query.data.split(":", 1)
    if len(callback_data) < 2:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.",
            parse_mode="Markdown",
        )
        return

    item_name = callback_data[1]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    await query.edit_message_text(
        f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:\n`{item_name}`\n\n" "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="Markdown",
    )

    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂
        async def fetch_history():
            result = await get_sales_history(
                item_names=[item_name],
                limit=20,
            )
            return result

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        sales_data = await execute_api_request(
            request_func=fetch_history,
            endpoint_type="last_sales",
            max_retries=2,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
        if "Error" in sales_data:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂: {sales_data['Error']}",
                parse_mode="Markdown",
            )
            return

        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        item_sales = None
        for item in sales_data.get("LastSales", []):
            if item.get("MarketHashName") == item_name:
                item_sales = item
                break

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ—Ç
        if not item_sales or not item_sales.get("Sales"):
            await query.edit_message_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:\n`{item_name}`",
                parse_mode="Markdown",
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_message = (
            f"üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂: `{item_name}`\n\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(item_sales['Sales'])} –ø—Ä–æ–¥–∞–∂:\n\n"
        )

        for i, sale in enumerate(item_sales.get("Sales", [])[:20], 1):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ –¥–∞—Ç—É
            from datetime import datetime

            date_str = datetime.fromtimestamp(sale.get("Timestamp", 0)).strftime("%Y-%m-%d %H:%M")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–∂–µ
            price = float(sale.get("Price", 0))
            formatted_message += (
                f"{i}. {date_str}\n"
                f"   üí∞ –¶–µ–Ω–∞: ${price:.2f} {sale.get('Currency', 'USD')}\n"
                f"   üîñ –¢–∏–ø: {sale.get('OrderType', 'Unknown')}\n\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂",
                        callback_data=f"refresh_sales:{item_name}",
                    ),
                    InlineKeyboardButton(
                        "üíß –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏",
                        callback_data=f"liquidity:{item_name}",
                    ),
                ],
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await query.edit_message_text(
            text=formatted_message,
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except APIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂: {e.message}",
            parse_mode="Markdown",
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂: {e!s}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e!s}",
            parse_mode="Markdown",
        )


async def handle_liquidity_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: "liquidity:item_name"
    callback_data = query.data.split(":", 1)
    if len(callback_data) < 2:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.",
            parse_mode="Markdown",
        )
        return

    item_name = callback_data[1]
    game = "csgo"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if hasattr(context, "user_data") and "current_game" in context.user_data:
        game = context.user_data["current_game"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    await query.edit_message_text(
        f"üîç –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:\n`{item_name}`\n\n" "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="Markdown",
    )

    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        async def get_liquidity_analysis():
            return await analyze_item_liquidity(
                item_name=item_name,
                game=game,
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        analysis = await execute_api_request(
            request_func=get_liquidity_analysis,
            endpoint_type="market",
            max_retries=2,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        sales_analysis = analysis.get("sales_analysis", {})
        if not sales_analysis.get("has_data"):
            await query.edit_message_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:\n`{item_name}`\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–¥–º–µ—Ç —Ä–µ–¥–∫–æ –ø—Ä–æ–¥–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ.",
                parse_mode="Markdown",
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        liquidity_emoji = get_liquidity_emoji(analysis.get("liquidity_category", "–ù–∏–∑–∫–∞—è"))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        formatted_message = (
            f"üíß –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: `{item_name}`\n\n"
            f"{liquidity_emoji} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis['liquidity_category']}\n"
            f"üìä –û—Ü–µ–Ω–∫–∞: {analysis['liquidity_score']}/7\n\n"
            f"üìà –¢—Ä–µ–Ω–¥ —Ü–µ–Ω—ã: {get_trend_emoji(sales_analysis.get('price_trend', 'stable'))}\n"
            f"üîÑ –ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å: {sales_analysis.get('sales_per_day', 0):.2f}\n"
            f"üìÜ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {sales_analysis.get('sales_volume', 0)}\n"
            f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${sales_analysis.get('avg_price', 0):.2f}\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
        market_data = analysis.get("market_data", {})
        formatted_message += (
            f"üõí –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ: {market_data.get('offers_count', 0)}\n"
            f"‚¨áÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${market_data.get('lowest_price', 0):.2f}\n"
            f"‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${market_data.get('highest_price', 0):.2f}\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É
        if analysis["liquidity_category"] in ["–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è", "–í—ã—Å–æ–∫–∞—è"]:
            formatted_message += "‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞!\n"
        elif analysis["liquidity_category"] == "–°—Ä–µ–¥–Ω—è—è":
            formatted_message += (
                "‚ö†Ô∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –ú–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –Ω–æ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.\n"
            )
        else:
            formatted_message += (
                "‚ùå *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂",
                        callback_data=f"sales_history:{item_name}",
                    ),
                    InlineKeyboardButton(
                        "üîç –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
                        callback_data=f"refresh_liquidity:{item_name}",
                    ),
                ],
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        await query.edit_message_text(
            text=formatted_message,
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except APIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e.message}",
            parse_mode="Markdown",
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e!s}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e!s}",
            parse_mode="Markdown",
        )


async def handle_refresh_sales_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: "refresh_sales:item_name"
    callback_data = query.data.split(":", 1)
    if len(callback_data) < 2:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.",
            parse_mode="Markdown",
        )
        return

    item_name = callback_data[1]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    await query.edit_message_text(
        f"üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è:\n`{item_name}`\n\n" "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="Markdown",
    )

    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂
        async def get_analysis():
            return await analyze_sales_history(
                item_name=item_name,
                days=14,  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞ 2 –Ω–µ–¥–µ–ª–∏
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        analysis = await execute_api_request(
            request_func=get_analysis,
            endpoint_type="last_sales",
            max_retries=2,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        if not analysis.get("has_data"):
            await query.edit_message_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:\n`{item_name}`\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–¥–º–µ—Ç —Ä–µ–¥–∫–æ –ø—Ä–æ–¥–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ.",
                parse_mode="Markdown",
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        formatted_message = (
            f"üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂: `{item_name}`\n\n"
            f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${analysis['avg_price']:.2f}\n"
            f"‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${analysis['max_price']:.2f}\n"
            f"‚¨áÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${analysis['min_price']:.2f}\n"
            f"üìà –¢—Ä–µ–Ω–¥ —Ü–µ–Ω—ã: {get_trend_emoji(analysis['price_trend'])}\n"
            f"üîÑ –ü—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥: {analysis['sales_volume']}\n"
            f"üìÜ –ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å: {analysis['sales_per_day']:.2f}\n"
            f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {analysis['period_days']} –¥–Ω–µ–π\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö
        if analysis["recent_sales"]:
            formatted_message += "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂
            for sale in analysis["recent_sales"][:5]:
                formatted_message += f"‚Ä¢ {sale['date']} - ${sale['price']:.2f} {sale['currency']}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
                        callback_data=f"sales_history:{item_name}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        "üíß –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏",
                        callback_data=f"liquidity:{item_name}",
                    ),
                ],
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        await query.edit_message_text(
            text=formatted_message,
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except APIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö: {e.message}",
            parse_mode="Markdown",
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂: {e!s}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e!s}",
            parse_mode="Markdown",
        )


async def handle_refresh_liquidity_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏."""
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    # –¢–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    update.callback_query.data = update.callback_query.data.replace(
        "refresh_liquidity:", "liquidity:"
    )
    await handle_liquidity_callback(update, context)


async def handle_all_arbitrage_sales_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–∞–∂."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–≥—Ä—É –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: "all_arbitrage_sales:game"
    callback_data = query.data.split(":", 1)
    if len(callback_data) < 2:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.",
            parse_mode="Markdown",
        )
        return

    game = callback_data[1]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    await query.edit_message_text(
        f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–∞–∂ –¥–ª—è {game}...\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="Markdown",
    )

    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        async def search_arbitrage():
            return await enhanced_arbitrage_search(
                game=game,
                max_items=20,  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                min_profit=1.0,
                min_profit_percent=5.0,
                min_sales_per_day=0.3,  # –ú–∏–Ω–∏–º—É–º 1 –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ 3 –¥–Ω—è
                time_period_days=7,
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        results = await execute_api_request(
            request_func=search_arbitrage,
            endpoint_type="market",
            max_retries=2,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        opportunities = results.get("opportunities", [])
        if not opportunities:
            await query.edit_message_text(
                f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è {game}.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É.",
                parse_mode="Markdown",
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        formatted_message = (
            f"üìä –í—Å–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–∞–∂ –¥–ª—è {game}\n\n"
            f"üîé –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(opportunities)}\n"
            f"üìÜ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {results['filters']['time_period_days']} –¥–Ω–µ–π\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        for i, item in enumerate(opportunities, 1):
            sales_analysis = item.get("sales_analysis", {})

            formatted_message += (
                f"üèÜ {i}. `{item['market_hash_name']}`\n"
                f"üí∞ –ü—Ä–∏–±—ã–ª—å: ${item['profit']:.2f} ({item['profit_percent']:.1f}%)\n"
                f"üõí –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${item['buy_price']:.2f}\n"
                f"üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${item['sell_price']:.2f}\n"
                f"üìà –¢—Ä–µ–Ω–¥: {get_trend_emoji(sales_analysis.get('price_trend', 'stable'))}\n"
                f"üîÑ –ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å: {sales_analysis.get('sales_per_day', 0):.2f}\n\n"
            )

            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
            if i == 10 and len(opportunities) > 10:
                formatted_message += (
                    f"_–ü–æ–∫–∞–∑–∞–Ω—ã 10 –∏–∑ {len(opportunities)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π._\n\n"
                )
                break

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üîç –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=f"refresh_arbitrage_sales:{game}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                        callback_data=f"setup_sales_filters:{game}",
                    ),
                ],
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        await query.edit_message_text(
            text=formatted_message,
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except APIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e.message}",
            parse_mode="Markdown",
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e!s}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e!s}",
            parse_mode="Markdown",
        )


async def handle_refresh_arbitrage_sales_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–∞–∂."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–≥—Ä—É –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: "refresh_arbitrage_sales:game"
    callback_data = query.data.split(":", 1)
    if len(callback_data) < 2:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.",
            parse_mode="Markdown",
        )
        return

    game = callback_data[1]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if hasattr(context, "user_data"):
        context.user_data["current_game"] = game

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    update.message = query.message
    await handle_arbitrage_with_sales(update, context)


async def handle_setup_sales_filters_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–∞–∂."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–≥—Ä—É –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: "setup_sales_filters:game"
    callback_data = query.data.split(":", 1)
    if len(callback_data) < 2:
        game = "csgo"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    else:
        game = callback_data[1]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if hasattr(context, "user_data"):
        context.user_data["current_game"] = game

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_data = getattr(context, "user_data", {})
    filters = user_data.get("sales_filters", {})

    min_profit = filters.get("min_profit", 1.0)
    min_profit_percent = filters.get("min_profit_percent", 5.0)
    min_sales_per_day = filters.get("min_sales_per_day", 0.3)
    price_trend = filters.get("price_trend", "all")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    formatted_message = (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–∞–∂ –¥–ª—è {game}\n\n"
        f"üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${min_profit:.2f}\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: {min_profit_percent:.1f}%\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º—É–º –ø—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å: {min_sales_per_day:.1f}\n"
        f"‚Ä¢ –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É —Ü–µ–Ω—ã: {price_trend_to_text(price_trend)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "üí∞ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å",
                    callback_data=f"filter_sales:profit:{game}",
                ),
                InlineKeyboardButton(
                    "üìà –ú–∏–Ω. –ø—Ä–æ—Ü–µ–Ω—Ç",
                    callback_data=f"filter_sales:percent:{game}",
                ),
            ],
            [
                InlineKeyboardButton(
                    "üîÑ –ú–∏–Ω. –ø—Ä–æ–¥–∞–∂/–¥–µ–Ω—å",
                    callback_data=f"filter_sales:sales:{game}",
                ),
                InlineKeyboardButton(
                    "üìä –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É",
                    callback_data=f"filter_sales:trend:{game}",
                ),
            ],
            [
                InlineKeyboardButton(
                    "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å",
                    callback_data=f"apply_sales_filters:{game}",
                ),
            ],
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    await query.edit_message_text(
        text=formatted_message,
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


async def handle_all_volume_stats_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–≥—Ä—É –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: "all_volume_stats:game"
    callback_data = query.data.split(":", 1)
    if len(callback_data) < 2:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.",
            parse_mode="Markdown",
        )
        return

    game = callback_data[1]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    await query.edit_message_text(
        f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è {game}...\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="Markdown",
    )

    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂
        async def get_volume_stats():
            return await get_sales_volume_stats(
                game=game,
                top_items=30,  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 30 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        stats = await execute_api_request(
            request_func=get_volume_stats,
            endpoint_type="market",
            max_retries=2,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
        items = stats.get("items", [])
        if not items:
            await query.edit_message_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è {game}.",
                parse_mode="Markdown",
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_message = (
            f"üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è {game}\n\n"
            f"üîé –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {stats['count']}\n"
            f"‚¨ÜÔ∏è –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ä–∞—Å—Ç—É—â–µ–π —Ü–µ–Ω–æ–π: {stats['summary']['up_trend_count']}\n"
            f"‚¨áÔ∏è –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –ø–∞–¥–∞—é—â–µ–π —Ü–µ–Ω–æ–π: {stats['summary']['down_trend_count']}\n"
            f"‚û°Ô∏è –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π: {stats['summary']['stable_trend_count']}\n\n"
            f"üìà –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –æ–±—ä–µ–º—É –ø—Ä–æ–¥–∞–∂:\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        for i, item in enumerate(items, 1):
            formatted_message += (
                f"{i}. `{item['item_name']}`\n"
                f"   üîÑ –ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å: {item['sales_per_day']:.2f}\n"
                f"   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${item['avg_price']:.2f}\n"
                f"   üìà –¢—Ä–µ–Ω–¥: {get_trend_emoji(item['price_trend'])}\n\n"
            )

            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
            if i == 15 and len(items) > 15:
                formatted_message += f"_–ü–æ–∫–∞–∑–∞–Ω—ã 15 –∏–∑ {len(items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤._\n\n"
                break

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üîç –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=f"refresh_volume_stats:{game}",
                    ),
                ],
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await query.edit_message_text(
            text=formatted_message,
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except APIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e.message}",
            parse_mode="Markdown",
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂: {e!s}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e!s}",
            parse_mode="Markdown",
        )


async def handle_refresh_volume_stats_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–≥—Ä—É –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: "refresh_volume_stats:game"
    callback_data = query.data.split(":", 1)
    if len(callback_data) < 2:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.",
            parse_mode="Markdown",
        )
        return

    game = callback_data[1]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if hasattr(context, "user_data"):
        context.user_data["current_game"] = game

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    update.message = query.message
    await handle_sales_volume_stats(update, context)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏


def price_trend_to_text(trend: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–¥ —Ç—Ä–µ–Ω–¥–∞ —Ü–µ–Ω—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç."""
    if trend == "up":
        return "‚¨ÜÔ∏è –†–∞—Å—Ç—É—â–∞—è —Ü–µ–Ω–∞"
    if trend == "down":
        return "‚¨áÔ∏è –ü–∞–¥–∞—é—â–∞—è —Ü–µ–Ω–∞"
    if trend == "stable":
        return "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞"
    return "üîÑ –õ—é–±–æ–π —Ç—Ä–µ–Ω–¥"
