"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callbacks –¥–ª—è Telegram –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫.
"""

import logging
import traceback
from typing import Dict, Any, Optional, List, Union, Tuple

from telegram import Update, CallbackQuery
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CallbackContext

from src.telegram_bot.keyboards import (
    get_modern_arbitrage_keyboard,
    get_auto_arbitrage_keyboard,
    get_back_to_arbitrage_keyboard,
    get_game_selection_keyboard,
    get_dmarket_webapp_keyboard
)

from src.dmarket.arbitrage import GAMES
from src.utils.api_error_handling import APIError, handle_api_error
from src.telegram_bot.pagination import pagination_manager
from src.telegram_bot.auto_arbitrage import (
    handle_pagination,
    show_auto_stats_with_pagination,
    start_auto_trading
)

logger = logging.getLogger(__name__)

async def arbitrage_callback_impl(update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'arbitrage'.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
    """
    await update.callback_query.edit_message_text(
        "üîç <b>–ú–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b>",
        reply_markup=get_modern_arbitrage_keyboard(),
        parse_mode=ParseMode.HTML
    )

async def handle_dmarket_arbitrage_impl(update, context, mode="normal"):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'dmarket_arbitrage'.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
        mode: –†–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    await update.callback_query.edit_message_text(
        "üîç <b>DMarket –ê—Ä–±–∏—Ç—Ä–∞–∂</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=get_back_to_arbitrage_keyboard(),
        parse_mode=ParseMode.HTML
    )

async def handle_best_opportunities_impl(update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'best_opportunities'.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
    """
    await update.callback_query.edit_message_text(
        "üí∞ <b>–õ—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=get_back_to_arbitrage_keyboard(),
        parse_mode=ParseMode.HTML
    )

async def handle_game_selection_impl(update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'game_selection'.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
    """
    await update.callback_query.edit_message_text(
        "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b>",
        reply_markup=get_game_selection_keyboard(),
        parse_mode=ParseMode.HTML
    )

async def handle_game_selected_impl(update, context, game=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'game_selected:...'.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
        game: –ö–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
    if game is None and update.callback_query.data.startswith("game_selected:"):
        game = update.callback_query.data.split(":", 1)[1]
    
    game_name = GAMES.get(game, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞")
    await update.callback_query.edit_message_text(
        f"üéÆ <b>–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞: {game_name}</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=get_back_to_arbitrage_keyboard(),
        parse_mode=ParseMode.HTML
    )

async def handle_market_comparison_impl(update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'market_comparison'.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
    """
    from src.telegram_bot.keyboards import get_marketplace_comparison_keyboard
    await update.callback_query.edit_message_text(
        "üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–Ω–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
        reply_markup=get_marketplace_comparison_keyboard(),
        parse_mode=ParseMode.HTML
    )

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
    """
    query = update.callback_query
    callback_data = query.data

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await query.answer()
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        if callback_data == "arbitrage":
            await arbitrage_callback_impl(update, context)
            
        elif callback_data == "auto_arbitrage":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            keyboard = get_auto_arbitrage_keyboard()
            await query.edit_message_text(
                "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b>",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
        elif callback_data == "dmarket_arbitrage":
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await handle_dmarket_arbitrage_impl(update, context, mode="normal")
            
        elif callback_data == "best_opportunities":
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await handle_best_opportunities_impl(update, context)
            
        elif callback_data == "game_selection":
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await handle_game_selection_impl(update, context)
            
        elif callback_data.startswith("game_selected:"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
            game = callback_data.split(":", 1)[1]
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await handle_game_selected_impl(update, context, game=game)
            
        elif callback_data == "market_comparison":
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await handle_market_comparison_impl(update, context)
            
        elif callback_data == "market_analysis":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
            await query.edit_message_text(
                "üìä <b>–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –∏ —Ü–µ–Ω:",
                reply_markup=get_game_selection_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
        elif callback_data == "filter:" or callback_data.startswith("filter:"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            await query.edit_message_text(
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
                reply_markup=get_game_selection_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
        elif callback_data == "open_webapp":
            # –û—Ç–∫—Ä—ã—Ç–∏–µ WebApp —Å DMarket
            await query.edit_message_text(
                "üåê <b>DMarket WebApp</b>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å DMarket –ø—Ä—è–º–æ –≤ Telegram:",
                parse_mode=ParseMode.HTML,
                reply_markup=get_dmarket_webapp_keyboard()
            )
            
        elif callback_data.startswith("auto_start:"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            mode = callback_data.split(":", 1)[1]
            await start_auto_trading(query, context, mode)
            
        elif callback_data.startswith("paginate:"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            parts = callback_data.split(":")
            if len(parts) >= 3:
                direction = parts[1]  # prev –∏–ª–∏ next
                mode = parts[2]  # —Ä–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                await handle_pagination(query, context, direction, mode)
            else:
                await query.edit_message_text(
                    "‚ö†Ô∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_back_to_arbitrage_keyboard(),
                    parse_mode=ParseMode.HTML
                )
                
        elif callback_data == "auto_stats":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            await show_auto_stats_with_pagination(query, context)
            
        elif callback_data.startswith("auto_trade:"):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            mode = callback_data.split(":", 1)[1]
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–æ–¥—É–ª—é
            from src.telegram_bot.auto_arbitrage import handle_auto_trade
            await handle_auto_trade(query, context, mode)
            
        elif callback_data == "back_to_menu":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await query.edit_message_text(
                "üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode=ParseMode.HTML,
                reply_markup=get_modern_arbitrage_keyboard()
            )
            
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data}")
            await query.edit_message_text(
                "‚ö†Ô∏è <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                parse_mode=ParseMode.HTML,
                reply_markup=get_back_to_arbitrage_keyboard()
            )
            
    except APIError as e:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ API
        error_message = await handle_api_error(e)
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ API DMarket:</b>\n\n{error_message}",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_arbitrage_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {callback_data}: {e}")
        tb_string = traceback.format_exc()
        logger.error(f"Traceback: {tb_string}")
        
        await query.edit_message_text(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
            f"{str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_arbitrage_keyboard()
        )

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callbacks
__all__ = [
    'arbitrage_callback_impl',
    'handle_dmarket_arbitrage_impl',
    'handle_best_opportunities_impl',
    'handle_game_selection_impl',
    'handle_game_selected_impl',
    'handle_market_comparison_impl',
    'button_callback_handler',
]
