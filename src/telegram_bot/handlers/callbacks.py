"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callbacks –¥–ª—è Telegram –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫.
"""

import logging
import traceback

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from src.dmarket.arbitrage import GAMES, find_arbitrage_opportunities
from src.telegram_bot.auto_arbitrage import (
    handle_pagination,
    show_auto_stats_with_pagination,
    start_auto_trading,
)
from src.telegram_bot.keyboards import (
    get_auto_arbitrage_keyboard,
    get_back_to_arbitrage_keyboard,
    get_dmarket_webapp_keyboard,
    get_game_selection_keyboard,
    get_modern_arbitrage_keyboard,
    create_pagination_keyboard,
)
from src.telegram_bot.utils.formatters import format_opportunities
from src.telegram_bot.utils.api_client import setup_api_client
from src.utils.api_error_handling import APIError, handle_api_error

logger = logging.getLogger(__name__)


async def arbitrage_callback_impl(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'arbitrage'.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º

    """
    await update.callback_query.edit_message_text(
        "üîç <b>–ú–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b>",
        reply_markup=get_modern_arbitrage_keyboard(),
        parse_mode=ParseMode.HTML,
    )


async def handle_dmarket_arbitrage_impl(update, context, mode="normal"):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'dmarket_arbitrage'.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
        mode: –†–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞

    """
    query = update.callback_query
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª—Å—è –ø–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    await query.edit_message_text(
        "üîç <b>–ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...</b>\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        parse_mode=ParseMode.HTML
    )
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
    api_client = setup_api_client()
    if not api_client:
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç DMarket. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π.",
            reply_markup=get_back_to_arbitrage_keyboard(),
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        # –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        async with api_client:
            opportunities = await find_arbitrage_opportunities(api_client, mode=mode)
        
        if not opportunities:
            await query.edit_message_text(
                "üîç <b>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_arbitrage_keyboard(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data["arbitrage_opportunities"] = opportunities
        context.user_data["arbitrage_page"] = 0
        context.user_data["arbitrage_mode"] = mode
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_arbitrage_opportunities(query, context)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        logger.error(traceback.format_exc())
        
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_back_to_arbitrage_keyboard(),
            parse_mode=ParseMode.HTML
        )


async def show_arbitrage_opportunities(query, context, page=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        query: –û–±—ä–µ–∫—Ç callback_query
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ context.user_data)
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    opportunities = context.user_data.get("arbitrage_opportunities", [])
    current_page = page if page is not None else context.user_data.get("arbitrage_page", 0)
    mode = context.user_data.get("arbitrage_mode", "normal")
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    total_pages = max(1, (len(opportunities) + 2) // 3)  # –ø–æ 3 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if current_page >= total_pages:
        current_page = 0
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    context.user_data["arbitrage_page"] = current_page
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_text = format_opportunities(opportunities, current_page, 3)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = create_pagination_keyboard(
        current_page=current_page,
        total_pages=total_pages,
        prefix="arb_",
        with_nums=True,
        back_button=True,
        back_text="¬´ –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é",
        back_callback="back_to_menu"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        results_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


async def handle_arbitrage_pagination(query, context, direction):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        query: –û–±—ä–µ–∫—Ç callback_query
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
        direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (next_page –∏–ª–∏ prev_page)
    """
    current_page = context.user_data.get("arbitrage_page", 0)
    opportunities = context.user_data.get("arbitrage_opportunities", [])
    total_pages = max(1, (len(opportunities) + 2) // 3)
    
    if direction == "next_page" and current_page < total_pages - 1:
        current_page += 1
    elif direction == "prev_page" and current_page > 0:
        current_page -= 1
    
    context.user_data["arbitrage_page"] = current_page
    await show_arbitrage_opportunities(query, context, current_page)


async def handle_best_opportunities_impl(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'best_opportunities'.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º

    """
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å —Ä–µ–∂–∏–º–æ–º "best"
    await handle_dmarket_arbitrage_impl(update, context, mode="best")


async def handle_game_selection_impl(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'game_selection'.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º

    """
    await update.callback_query.edit_message_text(
        "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b>",
        reply_markup=get_game_selection_keyboard(),
        parse_mode=ParseMode.HTML,
    )


async def handle_game_selected_impl(update, context, game=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'game_selected:...'.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
        game: –ö–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã

    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
    if game is None and update.callback_query.data.startswith("game_selected:"):
        game = update.callback_query.data.split(":", 1)[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["selected_game"] = game
    
    game_name = GAMES.get(game, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞")
    await update.callback_query.edit_message_text(
        f"üéÆ <b>–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞: {game_name}</b>\n\n"
        f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è {game_name}...",
        parse_mode=ParseMode.HTML,
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    await handle_dmarket_arbitrage_impl(update, context, mode=f"game_{game}")


async def handle_market_comparison_impl(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback 'market_comparison'.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º

    """
    from src.telegram_bot.keyboards import get_marketplace_comparison_keyboard

    await update.callback_query.edit_message_text(
        "üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–Ω–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
        reply_markup=get_marketplace_comparison_keyboard(),
        parse_mode=ParseMode.HTML,
    )


async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º

    """
    query = update.callback_query
    callback_data = query.data

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await query.answer()

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        if callback_data == "arbitrage":
            await arbitrage_callback_impl(update, context)

        elif callback_data == "auto_arbitrage":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            keyboard = get_auto_arbitrage_keyboard()
            await query.edit_message_text(
                "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b>",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML,
            )

        elif callback_data == "dmarket_arbitrage":
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await handle_dmarket_arbitrage_impl(update, context, mode="normal")

        elif callback_data == "best_opportunities":
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await handle_best_opportunities_impl(update, context)

        elif callback_data == "game_selection":
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await handle_game_selection_impl(update, context)

        elif callback_data.startswith("game_selected:"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–≥—Ä—ã –∏–∑ callback_data
            game = callback_data.split(":", 1)[1]
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await handle_game_selected_impl(update, context, game=game)

        elif callback_data == "market_comparison":
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await handle_market_comparison_impl(update, context)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        elif callback_data.startswith("arb_next_page_") or callback_data.startswith("arb_prev_page_"):
            direction = "next_page" if callback_data.startswith("arb_next_page_") else "prev_page"
            await handle_arbitrage_pagination(query, context, direction)

        elif callback_data == "market_analysis":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
            await query.edit_message_text(
                "üìä <b>–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –∏ —Ü–µ–Ω:",
                reply_markup=get_game_selection_keyboard(),
                parse_mode=ParseMode.HTML,
            )

        elif callback_data == "filter:" or callback_data.startswith("filter:"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            await query.edit_message_text(
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
                reply_markup=get_game_selection_keyboard(),
                parse_mode=ParseMode.HTML,
            )

        elif callback_data == "open_webapp":
            # –û—Ç–∫—Ä—ã—Ç–∏–µ WebApp —Å DMarket
            await query.edit_message_text(
                "üåê <b>DMarket WebApp</b>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å DMarket –ø—Ä—è–º–æ –≤ Telegram:",
                parse_mode=ParseMode.HTML,
                reply_markup=get_dmarket_webapp_keyboard(),
            )

        elif callback_data.startswith("auto_start:"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            mode = callback_data.split(":", 1)[1]
            await start_auto_trading(query, context, mode)

        elif callback_data.startswith("paginate:"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            parts = callback_data.split(":")
            if len(parts) >= 3:
                direction = parts[1]  # prev –∏–ª–∏ next
                mode = parts[2]  # —Ä–µ–∂–∏–º –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                await handle_pagination(query, context, direction, mode)
            else:
                await query.edit_message_text(
                    "‚ö†Ô∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_back_to_arbitrage_keyboard(),
                    parse_mode=ParseMode.HTML,
                )

        elif callback_data == "auto_stats":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            await show_auto_stats_with_pagination(query, context)

        elif callback_data.startswith("auto_trade:"):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            mode = callback_data.split(":", 1)[1]

            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–æ–¥—É–ª—é
            from src.telegram_bot.auto_arbitrage import handle_auto_trade

            await handle_auto_trade(query, context, mode)

        elif callback_data == "back_to_menu":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await query.edit_message_text(
                "üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode=ParseMode.HTML,
                reply_markup=get_modern_arbitrage_keyboard(),
            )

        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data}")
            await query.edit_message_text(
                "‚ö†Ô∏è <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                parse_mode=ParseMode.HTML,
                reply_markup=get_back_to_arbitrage_keyboard(),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {callback_data}: {e}")
        logger.error(traceback.format_exc())
        
        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        try:
            await query.edit_message_text(
                f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=ParseMode.HTML,
                reply_markup=get_back_to_arbitrage_keyboard(),
            )
        except Exception as edit_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            # –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callbacks
__all__ = [
    "arbitrage_callback_impl",
    "button_callback_handler",
    "handle_best_opportunities_impl",
    "handle_dmarket_arbitrage_impl",
    "handle_game_selected_impl",
    "handle_game_selection_impl",
    "handle_market_comparison_impl",
]
