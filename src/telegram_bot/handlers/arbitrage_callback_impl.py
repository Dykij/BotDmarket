from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from src.dmarket.arbitrage import GAMES
from src.telegram_bot.keyboards import get_arbitrage_keyboard, get_auto_arbitrage_keyboard, get_game_selection_keyboard
from src.telegram_bot.utils.formatting import format_dmarket_results, format_best_opportunities

async def arbitrage_callback_impl(update, context):
    # –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—é–¥–∞ –ª–æ–≥–∏–∫—É –∏–∑ arbitrage_callback
    pass

from src.utils.api_error_handling import APIError
from src.utils.dmarket_api_utils import execute_api_request
from telegram.ext import CallbackContext

async def handle_dmarket_arbitrage_impl(query, context: CallbackContext, mode: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞ DMarket.
    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        mode: –†–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ ("boost", "mid", "pro")
    """
    game = "csgo"
    if hasattr(context, 'user_data') and "current_game" in context.user_data:
        game = context.user_data["current_game"]
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    context.user_data["last_arbitrage_mode"] = mode
    mode_display = {"boost": "–†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞", "mid": "–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä", "pro": "Trade Pro"}
    await query.edit_message_text(
        text=f"üîç –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ({mode_display.get(mode, mode)}) "
             f"–¥–ª—è –∏–≥—Ä—ã {GAMES.get(game, game)}...",
        reply_markup=None,
        parse_mode='HTML'
    )
    try:
        async def get_arbitrage_data():
            from src.dmarket.arbitrage import arbitrage_boost_async, arbitrage_mid_async, arbitrage_pro_async
            if mode == "boost":
                return await arbitrage_boost_async(game)
            elif mode == "pro":
                return await arbitrage_pro_async(game)
            else:
                return await arbitrage_mid_async(game)
        results = await execute_api_request(
            request_func=get_arbitrage_data,
            endpoint_type="market",
            max_retries=2
        )
        if results:
            from src.telegram_bot.pagination import pagination_manager, format_paginated_results
            user_id = query.from_user.id
            pagination_manager.add_items_for_user(user_id, results, mode)
            page_items, current_page, total_pages = pagination_manager.get_page(user_id)
            formatted_text = format_paginated_results(
                page_items, game, mode, current_page, total_pages
            )
            keyboard = []
            if total_pages > 1:
                pagination_row = []
                if current_page > 0:
                    pagination_row.append(
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                            callback_data=f"paginate:prev:{mode}"
                        )
                    )
                if current_page < total_pages - 1:
                    pagination_row.append(
                        InlineKeyboardButton(
                            "–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
                            callback_data=f"paginate:next:{mode}"
                        )
                    )
                if pagination_row:
                    keyboard.append(pagination_row)
            arbitrage_keyboard = get_arbitrage_keyboard().inline_keyboard
            keyboard.extend(arbitrage_keyboard)
            await query.edit_message_text(
                text=formatted_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        else:
            formatted_text = format_dmarket_results(results, mode, game)
            keyboard = get_arbitrage_keyboard()
            await query.edit_message_text(
                text=formatted_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
    except APIError as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e.message}")
        if e.status_code == 429:
            error_message = "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DMarket API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        elif e.status_code == 401:
            error_message = "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ DMarket API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π."
        elif e.status_code == 404:
            error_message = "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DMarket API."
        elif e.status_code >= 500:
            error_message = f"üîß –°–µ—Ä–≤–µ—Ä DMarket –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ DMarket API: {e.message}"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="arbitrage")]
        ])
        await query.edit_message_text(
            text=error_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {str(e)}")
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="arbitrage")]
        ])
        error_message = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        await query.edit_message_text(
            text=error_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

async def handle_best_opportunities_impl(query, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    game = "csgo"
    if hasattr(context, 'user_data') and "current_game" in context.user_data:
        game = context.user_data["current_game"]
    await query.edit_message_text(
        text=f"üîç –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è {GAMES.get(game, game)}...",
        reply_markup=None
    )
    try:
        from src.telegram_bot.arbitrage_scanner import find_arbitrage_opportunities
        opportunities = find_arbitrage_opportunities(
            game=game,
            min_profit_percentage=5.0,
            max_items=10
        )
        formatted_text = format_best_opportunities(opportunities, game)
        keyboard = get_arbitrage_keyboard()
        await query.edit_message_text(
            text=formatted_text,
            reply_markup=keyboard
        )
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {str(e)}")
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="arbitrage")]
        ])
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {str(e)}"
        await query.edit_message_text(text=error_message, reply_markup=keyboard)
