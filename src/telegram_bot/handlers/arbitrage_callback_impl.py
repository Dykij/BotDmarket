"""–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.

–†–µ–∞–ª–∏–∑—É–µ—Ç:
- –û–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
- –ü–∞–≥–∏–Ω–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
- –ò–Ω–¥–∏–∫–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ ChatAction
"""

import logging

from telegram import CallbackQuery, ChatAction, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import CallbackContext

from src.dmarket.arbitrage import GAMES
from src.telegram_bot.keyboards import (
    get_arbitrage_keyboard,
    get_game_selection_keyboard,
    get_marketplace_comparison_keyboard,
    get_modern_arbitrage_keyboard,
)
from src.telegram_bot.utils.formatting import format_best_opportunities, format_dmarket_results
from src.utils.api_error_handling import APIError
from src.utils.dmarket_api_utils import execute_api_request

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_GAME, SELECTING_MODE, CONFIRMING_ACTION = range(3)


async def arbitrage_callback_impl(update: Update, context: CallbackContext) -> int | None:
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ None

    """
    query = update.callback_query
    await query.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await update.effective_chat.send_action(ChatAction.TYPING)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI
    user_id = query.from_user.id
    user_data = context.user_data or {}

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ UI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    use_modern_ui = user_data.get("use_modern_ui", False)

    if use_modern_ui:
        keyboard = get_modern_arbitrage_keyboard()
    else:
        keyboard = get_arbitrage_keyboard()

    await query.edit_message_text(
        text="üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b>",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    return SELECTING_MODE


async def handle_dmarket_arbitrage_impl(
    query: CallbackQuery, context: CallbackContext, mode: str
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞ DMarket.

    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        mode: –†–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ ("boost", "mid", "pro")

    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
    user_data = context.user_data or {}
    game = user_data.get("current_game", "csgo")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    user_data["last_arbitrage_mode"] = mode

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    mode_display = {
        "boost": "–†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞",
        "mid": "–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä",
        "pro": "Trade Pro",
    }

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    await query.message.chat.send_action(ChatAction.TYPING)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞
    await query.edit_message_text(
        text=(
            f"üîç <b>–ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\n\n"
            f"–†–µ–∂–∏–º: <b>{mode_display.get(mode, mode)}</b>\n"
            f"–ò–≥—Ä–∞: <b>{GAMES.get(game, game)}</b>\n\n"
            f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>"
        ),
        reply_markup=None,
        parse_mode=ParseMode.HTML,
    )

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await query.message.chat.send_action(ChatAction.TYPING)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        async def get_arbitrage_data():
            from src.dmarket.arbitrage import (
                arbitrage_boost_async,
                arbitrage_mid_async,
                arbitrage_pro_async,
            )

            if mode == "boost":
                return await arbitrage_boost_async(game)
            if mode == "pro":
                return await arbitrage_pro_async(game)
            return await arbitrage_mid_async(game)

        # –í—ã–ø–æ–ª–Ω—è–µ–º API –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤
        results = await execute_api_request(
            request_func=get_arbitrage_data,
            endpoint_type="market",
            max_retries=2,
        )

        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results:
            from src.telegram_bot.pagination import format_paginated_results, pagination_manager

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            user_id = query.from_user.id
            pagination_manager.add_items_for_user(user_id, results, mode)
            page_items, current_page, total_pages = pagination_manager.get_page(user_id)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            formatted_text = format_paginated_results(
                page_items,
                game,
                mode,
                current_page,
                total_pages,
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
            if total_pages > 1:
                pagination_row = []

                if current_page > 0:
                    pagination_row.append(
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ü—Ä–µ–¥.",
                            callback_data=f"paginate:prev:{mode}",
                        ),
                    )

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                pagination_row.append(
                    InlineKeyboardButton(
                        f"{current_page + 1}/{total_pages}",
                        callback_data="page_info",
                    ),
                )

                if current_page < total_pages - 1:
                    pagination_row.append(
                        InlineKeyboardButton(
                            "–°–ª–µ–¥. ‚û°Ô∏è",
                            callback_data=f"paginate:next:{mode}",
                        ),
                    )

                if pagination_row:
                    keyboard.append(pagination_row)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            keyboard.append(
                [
                    InlineKeyboardButton(
                        "üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                        callback_data=f"analyze:{mode}",
                    ),
                    InlineKeyboardButton(
                        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=f"refresh:{mode}",
                    ),
                ]
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è DMarket
            keyboard.append(
                [
                    InlineKeyboardButton(
                        "üåê –û—Ç–∫—Ä—ã—Ç—å DMarket",
                        web_app={"url": "https://dmarket.com"},
                    ),
                ]
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            arbitrage_keyboard = get_arbitrage_keyboard().inline_keyboard
            keyboard.extend(arbitrage_keyboard[-1:])  # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await query.edit_message_text(
                text=formatted_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML,
            )
        else:
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted_text = format_dmarket_results(results, mode, game)
            keyboard = get_arbitrage_keyboard()

            await query.edit_message_text(
                text=formatted_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML,
            )

    except APIError as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ API
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e.message}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞
        if e.status_code == 429:
            error_message = (
                "‚è±Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DMarket API.</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        elif e.status_code == 401:
            error_message = (
                "üîê <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ DMarket API.</b>\n\n" "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π."
            )
        elif e.status_code == 404:
            error_message = (
                "üîç <b>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DMarket API.</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞."
            )
        elif e.status_code >= 500:
            error_message = (
                f"üîß <b>–°–µ—Ä–≤–µ—Ä DMarket –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: {e.status_code}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
            )
        else:
            error_message = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ DMarket API:</b>\n\n"
                f"–ö–æ–¥: {e.status_code}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {e.message}"
            )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–≤—Ç–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="arbitrage")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await query.edit_message_text(
            text=error_message,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
        )

    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e!s}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–≤—Ç–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="arbitrage")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = (
            f"‚ùå <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:</b>\n\n"
            f"<code>{e!s}</code>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º."
        )

        await query.edit_message_text(
            text=error_message,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
        )


async def handle_best_opportunities_impl(query: CallbackQuery, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.

    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
    user_data = context.user_data or {}
    game = user_data.get("current_game", "csgo")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    await query.message.chat.send_action(ChatAction.TYPING)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞
    await query.edit_message_text(
        text=(
            f"üîç <b>–ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\n\n"
            f"–ò–≥—Ä–∞: <b>{GAMES.get(game, game)}</b>\n\n"
            f"<i>–ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>"
        ),
        reply_markup=None,
        parse_mode=ParseMode.HTML,
    )

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await query.message.chat.send_action(ChatAction.TYPING)

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        from src.telegram_bot.arbitrage_scanner import find_arbitrage_opportunities

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await query.edit_message_text(
            text=(
                f"üîç <b>–ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\n\n"
                f"–ò–≥—Ä–∞: <b>{GAMES.get(game, game)}</b>\n\n"
                f"<i>–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω... (1/3)</i>"
            ),
            parse_mode=ParseMode.HTML,
        )

        # –ù–∞—Ö–æ–¥–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        opportunities = await find_arbitrage_opportunities(
            game=game,
            min_profit_percentage=5.0,
            max_items=10,
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await query.edit_message_text(
            text=(
                f"üîç <b>–ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\n\n"
                f"–ò–≥—Ä–∞: <b>{GAMES.get(game, game)}</b>\n\n"
                f"<i>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤... (3/3)</i>"
            ),
            parse_mode=ParseMode.HTML,
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_text = format_best_opportunities(opportunities, game)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="best_opportunities"),
                    InlineKeyboardButton("üåê DMarket", web_app={"url": "https://dmarket.com"}),
                ],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="arbitrage")],
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await query.edit_message_text(
            text=formatted_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
        )

    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e!s}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–≤—Ç–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="best_opportunities")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="arbitrage")],
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:</b>\n\n" f"<code>{e!s}</code>"
        )

        await query.edit_message_text(
            text=error_message,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
        )


async def handle_game_selection_impl(query: CallbackQuery, context: CallbackContext) -> int | None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–≥—Ä—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.

    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ None

    """
    await query.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await query.message.chat.send_action(ChatAction.TYPING)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    keyboard = get_game_selection_keyboard()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä—ã
    await query.edit_message_text(
        text=(
            "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b>\n\n"
            "<i>–î–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Å–≤–æ–∏ —Ä—ã–Ω–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</i>"
        ),
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    return SELECTING_GAME


async def handle_game_selected_impl(
    query: CallbackQuery, context: CallbackContext, game: str
) -> int | None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã.

    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        game: –í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ None

    """
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
    if not hasattr(context, "user_data"):
        context.user_data = {}

    context.user_data["current_game"] = game

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await query.message.chat.send_action(ChatAction.TYPING)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    keyboard = get_arbitrage_keyboard()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞
    await query.edit_message_text(
        text=(
            f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞:</b> {GAMES.get(game, game)}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:"
        ),
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    return SELECTING_MODE


async def handle_market_comparison_impl(query: CallbackQuery, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫.

    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    """
    await query.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await query.message.chat.send_action(ChatAction.TYPING)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
    keyboard = get_marketplace_comparison_keyboard()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    await query.edit_message_text(
        text=(
            "üîÑ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
            "<i>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ª—é–±—É—é –∏–∑ —ç—Ç–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫ –ø—Ä—è–º–æ –≤ Telegram</i>"
        ),
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
    )
