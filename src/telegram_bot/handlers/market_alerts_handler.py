"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Ä—ã–Ω–∫–µ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
–æ –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞ —Ä—ã–Ω–∫–µ, —Ç—Ä–µ–Ω–¥–∞—Ö –∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.
"""

import logging
from typing import Dict, Any, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext, CommandHandler, CallbackQueryHandler, 
    Application
)

from src.telegram_bot.market_alerts import get_alerts_manager
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from src.telegram_bot.notifier import (
    load_user_alerts, 
    add_price_alert, 
    remove_price_alert, 
    get_user_alerts,
    update_user_settings,
    register_notification_handlers,
    format_alert_message,
    NOTIFICATION_TYPES
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DMarketAPI –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from src.dmarket.dmarket_api_fixed import DMarketAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
ALERT_TYPES = {
    "price_changes": "üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω",
    "trending": "üî• –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
    "volatility": "üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞",
    "arbitrage": "üí∞ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
    "price_drop": "‚¨áÔ∏è –ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã",
    "price_rise": "‚¨ÜÔ∏è –†–æ—Å—Ç —Ü–µ–Ω—ã",
    "volume_increase": "üìä –†–æ—Å—Ç –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤",
    "good_deal": "üí∞ –í—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "trend_change": "üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞"
}


async def alerts_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /alerts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try:
        alerts_manager = get_alerts_manager()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_subscriptions = alerts_manager.get_user_subscriptions(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
        price_alerts = await get_user_alerts(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
        for alert_type, alert_name in ALERT_TYPES.items():
            if alert_type in ["price_changes", "trending", "volatility", "arbitrage"]:
                # –û—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                button_text = f"‚úÖ {alert_name}" if alert_type in user_subscriptions else alert_name
                
                keyboard.append([
                    InlineKeyboardButton(
                        button_text, 
                        callback_data=f"alerts:toggle:{alert_type}"
                    )
                ])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        keyboard.append([
            InlineKeyboardButton("üìä –ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="alerts:my_alerts")
        ])
        
        keyboard.append([
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data="alerts:create_alert")
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_row = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ", –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if len(user_subscriptions) < 4:  # –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö 4 —Ç–∏–ø–æ–≤
            control_row.append(
                InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ", callback_data="alerts:subscribe_all")
            )
        
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if user_subscriptions:
            control_row.append(
                InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="alerts:unsubscribe_all")
            )
        
        if control_row:
            keyboard.append(control_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞
        if user_subscriptions or price_alerts:
            keyboard.append([
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="alerts:settings")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="arbitrage")
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "üîî *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏*\n\n"
        
        if user_subscriptions:
            message_text += "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä—ã–Ω–∫–µ:\n"
            for alert_type in user_subscriptions:
                message_text += f"‚Ä¢ {ALERT_TYPES.get(alert_type, alert_type)}\n"
            message_text += "\n"
        
        if price_alerts:
            message_text += f"–£ –≤–∞—Å {len(price_alerts)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n"
            message_text += "–ù–∞–∂–º–∏—Ç–µ '–ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
            
        if not user_subscriptions and not price_alerts:
            message_text += (
                "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, "
                "–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n\n"
                "‚Ä¢ üìà *–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω* - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
                "‚Ä¢ üî• *–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã* - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —Å –≤—ã—Å–æ–∫–∏–º —Å–ø—Ä–æ—Å–æ–º\n"
                "‚Ä¢ üìä *–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞* - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞\n"
                "‚Ä¢ üí∞ *–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏* - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–¥–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n\n"
                "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤."
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /alerts: {e}")
        
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def alerts_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    user_id = query.from_user.id
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
    parts = query.data.split(":")
    
    if len(parts) < 2:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    action = parts[1]
    
    try:
        alerts_manager = get_alerts_manager()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action == "toggle":
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if len(parts) < 3:
                await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
                
            alert_type = parts[2]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_subscriptions = alerts_manager.get_user_subscriptions(user_id)
            
            if alert_type in user_subscriptions:
                # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º
                success = alerts_manager.unsubscribe(user_id, alert_type)
                if success:
                    await query.answer(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {ALERT_TYPES.get(alert_type, alert_type)}")
                else:
                    await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            else:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
                success = alerts_manager.subscribe(user_id, alert_type)
                if success:
                    await query.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ALERT_TYPES.get(alert_type, alert_type)}")
                else:
                    await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update_alerts_keyboard(query, alerts_manager, user_id)
            
        elif action == "subscribe_all":
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            success = True
            
            for alert_type in ["price_changes", "trending", "volatility", "arbitrage"]:
                if not alerts_manager.subscribe(user_id, alert_type):
                    success = False
            
            if success:
                await query.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            else:
                await query.answer("–í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update_alerts_keyboard(query, alerts_manager, user_id)
            
        elif action == "unsubscribe_all":
            # –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            success = alerts_manager.unsubscribe_all(user_id)
            
            if success:
                await query.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            else:
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update_alerts_keyboard(query, alerts_manager, user_id)
            
        elif action == "settings":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await show_alerts_settings(query, alerts_manager, user_id)
            
        elif action == "my_alerts":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await show_user_alerts_list(query, user_id)
            
        elif action == "create_alert":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            await show_create_alert_form(query, user_id)
            
        elif action == "remove_alert":
            # –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            if len(parts) < 3:
                await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
                
            alert_id = parts[2]
            success = await remove_price_alert(user_id, alert_id)
            
            if success:
                await query.answer("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
                await show_user_alerts_list(query, user_id)
            else:
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")
            
        elif action == "threshold":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if len(parts) < 4:
                await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
                
            alert_type = parts[2]
            direction = parts[3]  # "up" –∏–ª–∏ "down"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤
            threshold_key = {
                "price_changes": "price_change_percent",
                "trending": "trending_popularity",
                "volatility": "volatility_threshold",
                "arbitrage": "arbitrage_profit_percent"
            }.get(alert_type)
            
            if not threshold_key:
                await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return
                
            current_threshold = alerts_manager.alert_thresholds.get(threshold_key, 0)
            
            # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥
            if direction == "up":
                new_threshold = current_threshold * 1.5
            else:
                new_threshold = max(current_threshold * 0.7, 1.0)  # –ù–µ –º–µ–Ω—å—à–µ 1%
                
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            new_threshold = round(new_threshold, 1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥
            success = alerts_manager.update_alert_threshold(alert_type, new_threshold)
            
            if success:
                await query.answer(f"–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω: {new_threshold}")
            else:
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await show_alerts_settings(query, alerts_manager, user_id)
            
        elif action == "interval":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if len(parts) < 4:
                await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
                
            alert_type = parts[2]
            direction = parts[3]  # "up" –∏–ª–∏ "down"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            current_interval = alerts_manager.check_intervals.get(alert_type, 3600)
            
            # –ò–∑–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if direction == "up":
                new_interval = min(current_interval * 2, 86400)  # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
            else:
                new_interval = max(current_interval // 2, 300)  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            success = alerts_manager.update_check_interval(alert_type, new_interval)
            
            if success:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if new_interval >= 3600:
                    interval_display = f"{new_interval // 3600} —á"
                else:
                    interval_display = f"{new_interval // 60} –º–∏–Ω"
                    
                await query.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω: {interval_display}")
            else:
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await show_alerts_settings(query, alerts_manager, user_id)
            
        elif action == "back_to_alerts":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await update_alerts_keyboard(query, alerts_manager, user_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def update_alerts_keyboard(query, alerts_manager, user_id: int) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        alerts_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_subscriptions = alerts_manager.get_user_subscriptions(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
    price_alerts = await get_user_alerts(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
    for alert_type, alert_name in ALERT_TYPES.items():
        if alert_type in ["price_changes", "trending", "volatility", "arbitrage"]:
            # –û—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            button_text = f"‚úÖ {alert_name}" if alert_type in user_subscriptions else alert_name
            
            keyboard.append([
                InlineKeyboardButton(
                    button_text, 
                    callback_data=f"alerts:toggle:{alert_type}"
                )
            ])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
    keyboard.append([
        InlineKeyboardButton("üìä –ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="alerts:my_alerts")
    ])
    
    keyboard.append([
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data="alerts:create_alert")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_row = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ", –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if len(user_subscriptions) < 4:  # –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö 4 —Ç–∏–ø–æ–≤
        control_row.append(
            InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ", callback_data="alerts:subscribe_all")
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if user_subscriptions:
        control_row.append(
            InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="alerts:unsubscribe_all")
        )
    
    if control_row:
        keyboard.append(control_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞
    if user_subscriptions or price_alerts:
        keyboard.append([
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="alerts:settings")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="arbitrage")
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üîî *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏*\n\n"
    
    if user_subscriptions:
        message_text += "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä—ã–Ω–∫–µ:\n"
        for alert_type in user_subscriptions:
            message_text += f"‚Ä¢ {ALERT_TYPES.get(alert_type, alert_type)}\n"
        message_text += "\n"
    
    if price_alerts:
        message_text += f"–£ –≤–∞—Å {len(price_alerts)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n"
        message_text += "–ù–∞–∂–º–∏—Ç–µ '–ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        
    if not user_subscriptions and not price_alerts:
        message_text += (
            "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, "
            "–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n\n"
            "‚Ä¢ üìà *–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω* - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
            "‚Ä¢ üî• *–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã* - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —Å –≤—ã—Å–æ–∫–∏–º —Å–ø—Ä–æ—Å–æ–º\n"
            "‚Ä¢ üìä *–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞* - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞\n"
            "‚Ä¢ üí∞ *–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏* - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–¥–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n\n"
            "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤."
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )


async def show_user_alerts_list(query, user_id: int) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è notifier.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    alerts = await get_user_alerts(user_id)
    
    if not alerts:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data="alerts:create_alert")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º", callback_data="alerts:back_to_alerts")
            ]
        ]
        
        await query.edit_message_text(
            "üîî *–ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è*\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    message_text = f"üîî *–ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è ({len(alerts)})*\n\n"
    
    for i, alert in enumerate(alerts, 1):
        alert_type = NOTIFICATION_TYPES.get(alert["type"], alert["type"])
        title = alert["title"]
        threshold = alert["threshold"]
        
        if alert["type"] == "price_drop":
            message_text += f"{i}. ‚¨áÔ∏è *{title}*\n"
            message_text += f"   –¢–∏–ø: {alert_type}\n"
            message_text += f"   –ü–æ—Ä–æ–≥: ${threshold:.2f}\n\n"
        elif alert["type"] == "price_rise":
            message_text += f"{i}. ‚¨ÜÔ∏è *{title}*\n"
            message_text += f"   –¢–∏–ø: {alert_type}\n"
            message_text += f"   –ü–æ—Ä–æ–≥: ${threshold:.2f}\n\n"
        elif alert["type"] == "volume_increase":
            message_text += f"{i}. üìä *{title}*\n"
            message_text += f"   –¢–∏–ø: {alert_type}\n"
            message_text += f"   –ü–æ—Ä–æ–≥: {int(threshold)}\n\n"
        elif alert["type"] == "good_deal":
            message_text += f"{i}. üí∞ *{title}*\n"
            message_text += f"   –¢–∏–ø: {alert_type}\n"
            message_text += f"   –ü–æ—Ä–æ–≥: {threshold:.2f}%\n\n"
        elif alert["type"] == "trend_change":
            message_text += f"{i}. üìà *{title}*\n"
            message_text += f"   –¢–∏–ø: {alert_type}\n"
            message_text += f"   –ü–æ—Ä–æ–≥: {threshold:.2f}%\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    for i, alert in enumerate(alerts, 1):
        if i <= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ùå –£–¥–∞–ª–∏—Ç—å #{i} ({alert['title'][:15]}...)", 
                    callback_data=f"alerts:remove_alert:{alert['id']}"
                )
            ])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data="alerts:create_alert")
    ])
    
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º", callback_data="alerts:back_to_alerts")
    ])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )


async def show_create_alert_form(query, user_id: int) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    message_text = (
        "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è*\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/alert <item_id> <—Ç–∏–ø_–æ–ø–æ–≤–µ—â–µ–Ω–∏—è> <–ø–æ—Ä–æ–≥>`\n\n"
        "*–¢–∏–ø—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:*\n"
        "‚Ä¢ `price_drop` - —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ (–≤ $)\n"
        "‚Ä¢ `price_rise` - —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ (–≤ $)\n"
        "‚Ä¢ `volume_increase` - –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –ø—Ä–µ–≤—ã—Å–∏–ª –ø–æ—Ä–æ–≥ (–∫–æ–ª-–≤–æ)\n"
        "‚Ä¢ `good_deal` - –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å–∫–∏–¥–∫–æ–π –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞ (%)\n"
        "‚Ä¢ `trend_change` - –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç—Ä–µ–Ω–¥ —Ü–µ–Ω—ã (–ø–æ—Ä–æ–≥ –≤ % —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)\n\n"
        "*–ü—Ä–∏–º–µ—Ä:*\n"
        "`/alert 12345abcde price_drop 50.0`\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–µ–¥–º–µ—Ç–∞, –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ –Ω–∞ DMarket –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ URL."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π", callback_data="alerts:my_alerts")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º", callback_data="alerts:back_to_alerts")
        ]
    ]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )


async def show_alerts_settings(query, alerts_manager, user_id: int) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    
    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        alerts_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_subscriptions = alerts_manager.get_user_subscriptions(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    message_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
    
    if user_subscriptions:
        message_text += "*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä—ã–Ω–∫–µ:*\n"
        
        for alert_type in user_subscriptions:
            alert_name = ALERT_TYPES.get(alert_type, alert_type)
            threshold = 0
            interval = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            if alert_type == "price_changes":
                threshold = alerts_manager.alert_thresholds.get("price_change_percent", 15.0)
                message_text += f"‚Ä¢ {alert_name}\n"
                message_text += f"  –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {threshold}%\n"
            elif alert_type == "trending":
                threshold = alerts_manager.alert_thresholds.get("trending_popularity", 50.0)
                message_text += f"‚Ä¢ {alert_name}\n"
                message_text += f"  –ü–æ—Ä–æ–≥ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏: {threshold}\n"
            elif alert_type == "volatility":
                threshold = alerts_manager.alert_thresholds.get("volatility_threshold", 25.0)
                message_text += f"‚Ä¢ {alert_name}\n"
                message_text += f"  –ü–æ—Ä–æ–≥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {threshold}\n"
            elif alert_type == "arbitrage":
                threshold = alerts_manager.alert_thresholds.get("arbitrage_profit_percent", 10.0)
                message_text += f"‚Ä¢ {alert_name}\n"
                message_text += f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {threshold}%\n"
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            current_interval = alerts_manager.check_intervals.get(alert_type, 3600)
            if current_interval >= 3600:
                interval = f"{current_interval // 3600} —á"
            else:
                interval = f"{current_interval // 60} –º–∏–Ω"
                
            message_text += f"  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    message_text += "*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:*\n"
    message_text += "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ª–∏—á–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
    message_text += "`/alertsettings <–ø–∞—Ä–∞–º–µ—Ç—Ä>=<–∑–Ω–∞—á–µ–Ω–∏–µ>`\n\n"
    message_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
    message_text += "‚Ä¢ `enabled=true|false` - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
    message_text += "‚Ä¢ `min_interval=–º–∏–Ω—É—Ç—ã` - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏\n"
    message_text += "‚Ä¢ `quiet_start=—á–∞—Å` - –Ω–∞—á–∞–ª–æ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è)\n"
    message_text += "‚Ä¢ `quiet_end=—á–∞—Å` - –∫–æ–Ω–µ—Ü —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤\n"
    message_text += "‚Ä¢ `max_alerts=—á–∏—Å–ª–æ` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n\n"
    message_text += "–ü—Ä–∏–º–µ—Ä: `/alertsettings enabled=true min_interval=30`"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    for alert_type in user_subscriptions:
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞–º–∏
        threshold_row = [
            InlineKeyboardButton(
                f"‚¨áÔ∏è –ü–æ—Ä–æ–≥ {alert_type}", 
                callback_data=f"alerts:threshold:{alert_type}:down"
            ),
            InlineKeyboardButton(
                f"‚¨ÜÔ∏è –ü–æ—Ä–æ–≥ {alert_type}", 
                callback_data=f"alerts:threshold:{alert_type}:up"
            )
        ]
        keyboard.append(threshold_row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        interval_row = [
            InlineKeyboardButton(
                f"‚¨áÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª {alert_type}", 
                callback_data=f"alerts:interval:{alert_type}:down"
            ),
            InlineKeyboardButton(
                f"‚¨ÜÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª {alert_type}", 
                callback_data=f"alerts:interval:{alert_type}:up"
            )
        ]
        keyboard.append(interval_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º", callback_data="alerts:back_to_alerts")
    ])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )


def register_alerts_handlers(application: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.
    
    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    load_user_alerts()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Ä—ã–Ω–∫–µ
    application.add_handler(CommandHandler("alerts", alerts_command))
    application.add_handler(CallbackQueryHandler(alerts_callback, pattern="^alerts:"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –æ —Ü–µ–Ω–∞—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    register_notification_handlers(application)


async def initialize_alerts_manager(application: Application) -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    
    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    """
    try:
        # –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}") 