"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–Ω—É—Ç—Ä–∏—Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞ DMarket."""

import asyncio
import logging
from typing import Dict, List, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler

from src.dmarket.arbitrage import GAMES
from src.dmarket.intramarket_arbitrage import (
    scan_for_intramarket_opportunities,
    find_price_anomalies,
    find_trending_items,
    find_mispriced_rare_items,
    PriceAnomalyType,
)
from src.telegram_bot.keyboards import get_arbitrage_keyboard
from src.telegram_bot.pagination import pagination_manager, format_paginated_results

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
INTRA_ARBITRAGE_ACTION = "intra"
ANOMALY_ACTION = "anomaly"
TRENDING_ACTION = "trend"
RARE_ACTION = "rare"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def format_intramarket_result(result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω—É—Ç—Ä–∏—Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    result_type = result.get("type", "")
    
    if result_type == PriceAnomalyType.UNDERPRICED:
        # –¶–µ–Ω–æ–≤–∞—è –∞–Ω–æ–º–∞–ª–∏—è (–Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç)
        item_to_buy = result.get("item_to_buy", {})
        item_title = item_to_buy.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        buy_price = result.get("buy_price", 0.0)
        sell_price = result.get("sell_price", 0.0)
        profit_percentage = result.get("profit_percentage", 0.0)
        profit_after_fee = result.get("profit_after_fee", 0.0)
        similarity = result.get("similarity", 0.0)
        
        return (
            f"üîç *{item_title}*\n"
            f"üí∞ –ö—É–ø–∏—Ç—å –∑–∞ ${buy_price:.2f}, –ø—Ä–æ–¥–∞—Ç—å –∑–∞ ${sell_price:.2f}\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: ${profit_after_fee:.2f} ({profit_percentage:.1f}%)\n"
            f"üîÑ –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.0%}\n"
            f"üè∑Ô∏è ID –¥–ª—è –ø–æ–∫—É–ø–∫–∏: `{item_to_buy.get('itemId', '')}`"
        )
    
    elif result_type == PriceAnomalyType.TRENDING_UP:
        # –†–∞—Å—Ç—É—â–∞—è —Ü–µ–Ω–∞
        item = result.get("item", {})
        item_title = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        current_price = result.get("current_price", 0.0)
        projected_price = result.get("projected_price", 0.0)
        price_change_percent = result.get("price_change_percent", 0.0)
        potential_profit_percent = result.get("potential_profit_percent", 0.0)
        sales_velocity = result.get("sales_velocity", 0)
        
        return (
            f"üìà *{item_title}*\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}\n"
            f"üöÄ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã: ${projected_price:.2f} (+{price_change_percent:.1f}%)\n"
            f"üíµ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${projected_price-current_price:.2f} ({potential_profit_percent:.1f}%)\n"
            f"üîÑ –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {sales_velocity} —à—Ç.\n"
            f"üè∑Ô∏è ID –¥–ª—è –ø–æ–∫—É–ø–∫–∏: `{item.get('itemId', '')}`"
        )
    
    elif result_type == PriceAnomalyType.RARE_TRAITS:
        # –ü—Ä–µ–¥–º–µ—Ç —Å —Ä–µ–¥–∫–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        item = result.get("item", {})
        item_title = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        current_price = result.get("current_price", 0.0)
        estimated_value = result.get("estimated_value", 0.0)
        price_difference_percent = result.get("price_difference_percent", 0.0)
        rare_traits = result.get("rare_traits", [])
        
        traits_text = "\n".join([f"  ‚Ä¢ {trait}" for trait in rare_traits])
        
        return (
            f"üíé *{item_title}*\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}\n"
            f"‚≠ê –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${estimated_value:.2f} (+{price_difference_percent:.1f}%)\n"
            f"‚ú® –†–µ–¥–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n{traits_text}\n"
            f"üè∑Ô∏è ID –¥–ª—è –ø–æ–∫—É–ø–∫–∏: `{item.get('itemId', '')}`"
        )
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"

async def start_intramarket_arbitrage(
    update: Update,
    context: CallbackContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ –≤–Ω—É—Ç—Ä–∏—Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    query = update.callback_query
    if query:
        await query.answer()
    
    user_id = update.effective_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    message = await context.bot.send_message(
        chat_id=user_id,
        text="üîç *–ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –≤–Ω—É—Ç—Ä–∏ DMarket*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "üîÑ –¶–µ–Ω–æ–≤—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏", 
                    callback_data=f"{INTRA_ARBITRAGE_ACTION}_{ANOMALY_ACTION}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üìà –†–∞—Å—Ç—É—â–∏–µ –≤ —Ü–µ–Ω–µ", 
                    callback_data=f"{INTRA_ARBITRAGE_ACTION}_{TRENDING_ACTION}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üíé –†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã", 
                    callback_data=f"{INTRA_ARBITRAGE_ACTION}_{RARE_ACTION}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="arbitrage_menu"
                )
            ]
        ])
    )

async def handle_intramarket_callback(
    update: Update,
    context: CallbackContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤–Ω—É—Ç—Ä–∏—Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    callback_data = query.data
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    data_parts = callback_data.split("_")
    if len(data_parts) < 2:
        await query.edit_message_text(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.",
            parse_mode="Markdown"
        )
        return
    
    action_type = data_parts[1]
    game = "csgo"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CS2
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∏–≥—Ä–∞
    if len(data_parts) >= 3:
        game = data_parts[2]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.edit_message_text(
        f"üîç *–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {GAMES.get(game, game)}*\n\n"
        f"–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="Markdown"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    results = []
    
    try:
        if action_type == ANOMALY_ACTION:
            # –ü–æ–∏—Å–∫ —Ü–µ–Ω–æ–≤—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
            anomalies = await find_price_anomalies(
                game=game,
                max_results=50,
            )
            results = anomalies
            title = f"üîç –¶–µ–Ω–æ–≤—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è {GAMES.get(game, game)}"
            
        elif action_type == TRENDING_ACTION:
            # –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ä–∞—Å—Ç—É—â–µ–π —Ü–µ–Ω–æ–π
            trending = await find_trending_items(
                game=game,
                max_results=50,
            )
            results = trending
            title = f"üìà –†–∞—Å—Ç—É—â–∏–µ –≤ —Ü–µ–Ω–µ {GAMES.get(game, game)}"
            
        elif action_type == RARE_ACTION:
            # –ü–æ–∏—Å–∫ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            rare_items = await find_mispriced_rare_items(
                game=game,
                max_results=50,
            )
            results = rare_items
            title = f"üíé –†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã {GAMES.get(game, game)}"
            
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            await query.edit_message_text(
                "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
                parse_mode="Markdown"
            )
            return
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        if not results:
            await query.edit_message_text(
                f"‚ÑπÔ∏è *{title}*\n\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∏–≥—Ä—É.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                            callback_data=f"{INTRA_ARBITRAGE_ACTION}"
                        )
                    ]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        pagination_id = f"intra_{action_type}_{game}_{user_id}"
        pagination_manager.add_items(
            pagination_id, 
            results, 
            format_function=format_intramarket_result
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        paginated_text = await format_paginated_results(
            pagination_id,
            title,
            page=1
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = [
            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            [
                InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"page_{pagination_id}_prev"),
                InlineKeyboardButton("1", callback_data=f"page_{pagination_id}_current"),
                InlineKeyboardButton("‚û°Ô∏è", callback_data=f"page_{pagination_id}_next"),
            ],
            # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
            [
                InlineKeyboardButton(
                    "CS2 üî´", 
                    callback_data=f"{INTRA_ARBITRAGE_ACTION}_{action_type}_csgo"
                ),
                InlineKeyboardButton(
                    "Dota 2 üßô", 
                    callback_data=f"{INTRA_ARBITRAGE_ACTION}_{action_type}_dota2"
                ),
            ],
            [
                InlineKeyboardButton(
                    "TF2 üé≠", 
                    callback_data=f"{INTRA_ARBITRAGE_ACTION}_{action_type}_tf2"
                ),
                InlineKeyboardButton(
                    "Rust üèïÔ∏è", 
                    callback_data=f"{INTRA_ARBITRAGE_ACTION}_{action_type}_rust"
                ),
            ],
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            [
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data=f"{INTRA_ARBITRAGE_ACTION}"
                )
            ]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await query.edit_message_text(
            paginated_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–Ω—É—Ç—Ä–∏—Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
        await query.edit_message_text(
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏*\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data=f"{INTRA_ARBITRAGE_ACTION}"
                    )
                ]
            ])
        )

# –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
handlers = [
    CallbackQueryHandler(
        start_intramarket_arbitrage, 
        pattern=f"^{INTRA_ARBITRAGE_ACTION}$"
    ),
    CallbackQueryHandler(
        handle_intramarket_callback, 
        pattern=f"^{INTRA_ARBITRAGE_ACTION}_"
    ),
] 