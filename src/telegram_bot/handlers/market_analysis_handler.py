"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π.
"""

import logging
from typing import Any

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler

from src.dmarket.arbitrage import GAMES
from src.dmarket.dmarket_api import DMarketAPI
from src.dmarket.market_analysis import (
    analyze_market_volatility,
    analyze_price_changes,
    find_trending_items,
    generate_market_report,
)
from src.telegram_bot.pagination import pagination_manager
from src.telegram_bot.keyboards import create_pagination_keyboard, get_arbitrage_keyboard
from src.telegram_bot.utils.formatters import format_market_items
from src.telegram_bot.utils.api_client import create_api_client_from_env

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ü–µ–Ω
from src.utils.price_analyzer import find_undervalued_items, get_investment_recommendations

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


async def market_analysis_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /market_analysis –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    keyboard = [
        [
            InlineKeyboardButton("üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω", callback_data="analysis:price_changes:csgo"),
            InlineKeyboardButton("üî• –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="analysis:trending:csgo"),
        ],
        [
            InlineKeyboardButton("üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", callback_data="analysis:volatility:csgo"),
            InlineKeyboardButton("üìë –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="analysis:report:csgo"),
        ],
        [
            InlineKeyboardButton(
                "üí∞ –ù–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="analysis:undervalued:csgo"
            ),
            InlineKeyboardButton("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="analysis:recommendations:csgo"),
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É", callback_data="arbitrage"),
        ],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä—ã
    game_row = []
    for game_code, game_name in GAMES.items():
        game_row.append(
            InlineKeyboardButton(
                game_name,
                callback_data=f"analysis:select_game:{game_code}",
            ),
        )

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≤—Ç–æ—Ä–æ–π –∏–≥—Ä—ã
        if len(game_row) == 2:
            keyboard.insert(-2, game_row)
            game_row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–≥—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    if game_row:
        keyboard.insert(-2, game_row)

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üîé *–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ DMarket*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏–≥—Ä—É –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π —Ä—ã–Ω–∫–∞ "
        "–∏ –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\n\n"
        "–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: *CS2*",
        reply_markup=reply_markup,
        parse_mode="Markdown",
    )


async def market_analysis_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    user_id = query.from_user.id

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
    parts = query.data.split(":")

    if len(parts) < 2:
        return

    action = parts[1]
    game = parts[2] if len(parts) > 2 else "csgo"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not context.user_data.get("market_analysis"):
        context.user_data["market_analysis"] = {
            "current_game": "csgo",
            "period": "24h",
            "min_price": 1.0,
            "max_price": 500.0,
        }

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
    if action == "select_game":
        context.user_data["market_analysis"]["current_game"] = game

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä–æ–π
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω", callback_data=f"analysis:price_changes:{game}"
                ),
                InlineKeyboardButton(
                    "üî• –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data=f"analysis:trending:{game}"
                ),
            ],
            [
                InlineKeyboardButton(
                    "üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", callback_data=f"analysis:volatility:{game}"
                ),
                InlineKeyboardButton("üìë –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data=f"analysis:report:{game}"),
            ],
            [
                InlineKeyboardButton(
                    "üí∞ –ù–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data=f"analysis:undervalued:{game}"
                ),
                InlineKeyboardButton(
                    "üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"analysis:recommendations:{game}"
                ),
            ],
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä—ã
        game_row = []
        for game_code, game_name in GAMES.items():
            # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
            button_text = f"‚úÖ {game_name}" if game_code == game else game_name

            game_row.append(
                InlineKeyboardButton(
                    button_text,
                    callback_data=f"analysis:select_game:{game_code}",
                ),
            )

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≤—Ç–æ—Ä–æ–π –∏–≥—Ä—ã
            if len(game_row) == 2:
                keyboard.append(game_row)
                game_row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–≥—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if game_row:
            keyboard.append(game_row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append(
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É", callback_data="arbitrage"),
            ]
        )

        game_name = GAMES.get(game, game)

        await query.edit_message_text(
            f"üîé *–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ DMarket*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏–≥—Ä—É –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π —Ä—ã–Ω–∫–∞ "
            f"–∏ –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\n\n"
            f"–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: *{game_name}*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown",
        )

        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = context.user_data["market_analysis"]
    current_game = user_settings.get("current_game", game)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await query.edit_message_text(
        f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è {GAMES.get(current_game, current_game)}...",
        parse_mode="Markdown",
    )

    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        api_client = create_api_client_from_env()
        
        if api_client is None:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π.",
                reply_markup=get_back_to_market_analysis_keyboard(current_game),
                parse_mode="Markdown",
            )
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if action == "price_changes":
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
            results = await analyze_price_changes(
                game=current_game,
                period=user_settings.get("period", "24h"),
                min_price=user_settings.get("min_price", 1.0),
                max_price=user_settings.get("max_price", 500.0),
                dmarket_api=api_client,
                limit=20,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_manager.set_items(user_id, results, "price_changes")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await show_price_changes_results(query, context, current_game)

        elif action == "trending":
            # –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            results = await find_trending_items(
                game=current_game,
                min_price=user_settings.get("min_price", 1.0),
                max_price=user_settings.get("max_price", 500.0),
                dmarket_api=api_client,
                limit=20,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_manager.set_items(user_id, results, "trending")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await show_trending_items_results(query, context, current_game)

        elif action == "volatility":
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            results = await analyze_market_volatility(
                game=current_game,
                min_price=user_settings.get("min_price", 1.0),
                max_price=user_settings.get("max_price", 500.0),
                dmarket_api=api_client,
                limit=20,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_manager.set_items(user_id, results, "volatility")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await show_volatility_results(query, context, current_game)

        elif action == "report":
            # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä—ã–Ω–∫–µ
            report = await generate_market_report(
                game=current_game,
                dmarket_api=api_client,
            )

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—á–µ—Ç
            await show_market_report(query, context, report)

        elif action == "undervalued":
            # –ü–æ–∏—Å–∫ –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è price_analyzer
            results = await find_undervalued_items(
                api_client,
                game=current_game,
                price_from=user_settings.get("min_price", 1.0),
                price_to=user_settings.get("max_price", 500.0),
                discount_threshold=15.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
                max_results=20,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_manager.set_items(user_id, results, "undervalued")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await show_undervalued_items_results(query, context, current_game)

        elif action == "recommendations":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è price_analyzer
            results = await get_investment_recommendations(
                api_client,
                game=current_game,
                budget=user_settings.get("max_price", 100.0),
                risk_level="medium",  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_manager.set_items(user_id, results, "recommendations")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await show_investment_recommendations_results(query, context, current_game)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: {e}")
        import traceback

        logger.error(traceback.format_exc())

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞:\n\n{e!s}",
            reply_markup=get_back_to_market_analysis_keyboard(current_game),
        )
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
        if "api_client" in locals() and hasattr(api_client, "_close_client"):
            try:
                await api_client._close_client()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ API: {e}")


async def handle_pagination_analysis(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
    parts = data.split(":")
    if len(parts) < 3:
        return

    direction = parts[1]  # prev/next
    analysis_type = parts[2]  # price_changes/trending/volatility/etc.
    game = parts[3] if len(parts) > 3 else "csgo"

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if direction == "next":
        pagination_manager.next_page(user_id)
    elif direction == "prev":
        pagination_manager.prev_page(user_id)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
    if analysis_type == "price_changes":
        await show_price_changes_results(query, context, game)
    elif analysis_type == "trending":
        await show_trending_items_results(query, context, game)
    elif analysis_type == "volatility":
        await show_volatility_results(query, context, game)
    elif analysis_type == "undervalued":
        await show_undervalued_items_results(query, context, game)
    elif analysis_type == "recommendations":
        await show_investment_recommendations_results(query, context, game)


async def show_price_changes_results(query, context, game: str) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã
    """
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items, current_page, total_pages = pagination_manager.get_page(user_id)

    if not items:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await query.edit_message_text(
            f"üìâ *–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω*\n\n"
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –¥–ª—è –∏–≥—Ä—ã {GAMES.get(game, game)} "
            f"—Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=get_back_to_market_analysis_keyboard(game),
            parse_mode="Markdown",
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ü–µ–Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    formatted_text = format_market_items(
        items=items,
        current_page=current_page,
        items_per_page=pagination_manager.get_items_per_page(user_id),
        show_price_change=True,
        show_liquidity=True
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω
    header_text = (
        f"üìâ *–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω - {GAMES.get(game, game)}*\n\n"
        f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    period_buttons = [
        InlineKeyboardButton("24 —á–∞—Å–∞", callback_data=f"period_change:24h:{game}"),
        InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data=f"period_change:7d:{game}"),
        InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data=f"period_change:30d:{game}"),
    ]

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_keyboard = create_pagination_keyboard(
        current_page=current_page,
        total_pages=total_pages,
        prefix=f"paginate:price_changes:{game}_",
        with_nums=True
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞
    keyboard = pagination_keyboard.inline_keyboard
    keyboard.append(period_buttons)
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞", callback_data=f"analysis:select_game:{game}")
    ])

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await query.edit_message_text(
        header_text + formatted_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown",
    )


async def show_trending_items_results(query, context, game: str) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã
    """
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items, current_page, total_pages = pagination_manager.get_page(user_id)

    if not items:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await query.edit_message_text(
            f"üî• *–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã*\n\n"
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã {GAMES.get(game, game)} "
            f"—Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=get_back_to_market_analysis_keyboard(game),
            parse_mode="Markdown",
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    formatted_text = format_market_items(
        items=items,
        current_page=current_page,
        items_per_page=pagination_manager.get_items_per_page(user_id),
        show_trend=True,
        show_volume=True
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    header_text = (
        f"üî• *–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã - {GAMES.get(game, game)}*\n\n"
        f"–ü–æ–∫–∞–∑–∞–Ω—ã —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.\n"
    )

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_keyboard = create_pagination_keyboard(
        current_page=current_page,
        total_pages=total_pages,
        prefix=f"paginate:trending:{game}_",
        with_nums=True
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞
    keyboard = pagination_keyboard.inline_keyboard
    keyboard.append([
        InlineKeyboardButton("üîΩ –¶–µ–Ω–∞ $1-50", callback_data=f"price_filter:1:50:{game}"),
        InlineKeyboardButton("üîº –¶–µ–Ω–∞ $50+", callback_data=f"price_filter:50:500:{game}"),
    ])
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞", callback_data=f"analysis:select_game:{game}")
    ])

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await query.edit_message_text(
        header_text + formatted_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown",
    )


async def show_volatility_results(query, context, game: str) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞.

    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã

    """
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items, current_page, total_pages = pagination_manager.get_page(user_id)

    if not items:
        await query.edit_message_text(
            f"‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {GAMES.get(game, game)}",
            reply_markup=get_back_to_market_analysis_keyboard(game),
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    text = f"üìä *–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ {GAMES.get(game, game)}*\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
    for i, item in enumerate(items, 1):
        name = item.get("market_hash_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        current_price = item.get("current_price", 0)
        change_24h = item.get("change_24h_percent", 0)
        change_7d = item.get("change_7d_percent", 0)
        volatility_score = item.get("volatility_score", 0)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if volatility_score > 30:
            volatility_level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
        elif volatility_score > 20:
            volatility_level = "–í—ã—Å–æ–∫–∞—è"
        elif volatility_score > 10:
            volatility_level = "–°—Ä–µ–¥–Ω—è—è"
        else:
            volatility_level = "–ù–∏–∑–∫–∞—è"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        item_text = (
            f"{i}. *{name}*\n"
            f"   üí∞ –¶–µ–Ω–∞: ${current_price:.2f}\n"
            f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): {change_24h:.1f}%\n"
            f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (7–¥): {change_7d:.1f}%\n"
            f"   üîÑ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_level} ({volatility_score:.1f})\n\n"
        )

        text += item_text

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    if current_page > 0:
        pagination_row.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"analysis_page:prev:volatility:{game}"),
        )

    if current_page < total_pages - 1:
        pagination_row.append(
            InlineKeyboardButton(
                "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"analysis_page:next:volatility:{game}"
            ),
        )

    if pagination_row:
        keyboard.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–Ω–∞–ª–∏–∑—É
    keyboard.append(
        [
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data=f"analysis:select_game:{game}"
            ),
        ]
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown",
    )


async def show_market_report(query, context, report: dict[str, Any]) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä—ã–Ω–∫–∞.

    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        report: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞

    """
    game = report.get("game", "csgo")
    game_name = GAMES.get(game, game)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
    if "error" in report:
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:\n\n{report['error']}",
            reply_markup=get_back_to_market_analysis_keyboard(game),
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    market_summary = report.get("market_summary", {})

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
    market_direction = market_summary.get("price_change_direction", "stable")
    direction_icon = {
        "up": "üîº –†–∞—Å—Ç—É—â–∏–π",
        "down": "üîΩ –ü–∞–¥–∞—é—â–∏–π",
        "stable": "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π",
    }.get(market_direction, "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
    volatility_level = market_summary.get("market_volatility_level", "low")
    volatility_display = {
        "low": "–ù–∏–∑–∫–∞—è",
        "medium": "–°—Ä–µ–¥–Ω—è—è",
        "high": "–í—ã—Å–æ–∫–∞—è",
    }.get(volatility_level, "–ù–∏–∑–∫–∞—è")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    trending_categories = market_summary.get("top_trending_categories", ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"])

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = market_summary.get("recommended_actions", ["–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    text = (
        f"üìë *–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä—ã–Ω–∫–∞ {game_name}*\n\n"
        f"*–û–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞:* {direction_icon}\n"
        f"*–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:* {volatility_display}\n"
        f"*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(trending_categories)}\n\n"
        f"*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    for i, rec in enumerate(recommendations, 1):
        text += f"{i}. {rec}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ü–µ–Ω
    price_changes = report.get("price_changes", [])
    if price_changes:
        text += "\n*–¢–æ–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:*\n"
        for i, item in enumerate(price_changes[:3], 1):
            name = item.get("market_hash_name", "")
            change_percent = item.get("change_percent", 0)
            direction = "üîº" if change_percent > 0 else "üîΩ"
            text += f"{i}. {name}: {direction} {abs(change_percent):.1f}%\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–µ–Ω–¥–æ–≤—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
    trending_items = report.get("trending_items", [])
    if trending_items:
        text += "\n*–¢–æ–ø —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:*\n"
        for i, item in enumerate(trending_items[:3], 1):
            name = item.get("market_hash_name", "")
            sales = item.get("sales_volume", 0)
            text += f"{i}. {name}: {sales} –ø—Ä–æ–¥–∞–∂\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton(
                "üìà –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω", callback_data=f"analysis:price_changes:{game}"
            ),
        ],
        [
            InlineKeyboardButton(
                "üî• –í—Å–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data=f"analysis:trending:{game}"
            ),
        ],
        [
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data=f"analysis:select_game:{game}"
            ),
        ],
    ]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—á–µ—Ç
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown",
    )


async def handle_period_change(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    """
    query = update.callback_query
    user_id = query.from_user.id

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
    parts = query.data.split(":")

    if len(parts) < 2:
        return

    period = parts[1]
    game = parts[2] if len(parts) > 2 else "csgo"

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.user_data.get("market_analysis"):
        context.user_data["market_analysis"] = {}

    context.user_data["market_analysis"]["period"] = period

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
    await query.answer("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
    query.data = f"analysis:price_changes:{game}"
    await market_analysis_callback(update, context)


def get_back_to_market_analysis_keyboard(game: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞.

    Args:
        game: –ö–æ–¥ –∏–≥—Ä—ã

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞

    """
    keyboard = [
        [
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞", callback_data=f"analysis:select_game:{game}"
            ),
        ],
    ]

    return InlineKeyboardMarkup(keyboard)


def register_market_analysis_handlers(dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.

    Args:
        dispatcher: –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

    """
    dispatcher.add_handler(CommandHandler("market_analysis", market_analysis_command))
    dispatcher.add_handler(CallbackQueryHandler(market_analysis_callback, pattern="^analysis:"))
    dispatcher.add_handler(
        CallbackQueryHandler(handle_pagination_analysis, pattern="^analysis_page:")
    )
    dispatcher.add_handler(CallbackQueryHandler(handle_period_change, pattern="^analysis_period:"))
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    dispatcher.add_handler(
        CallbackQueryHandler(handle_risk_level_change, pattern="^analysis_risk:")
    )


async def show_undervalued_items_results(query, context, game: str) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.

    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã

    """
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items, current_page, total_pages = pagination_manager.get_page(user_id)

    if not items:
        await query.edit_message_text(
            f"‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è {GAMES.get(game, game)}",
            reply_markup=get_back_to_market_analysis_keyboard(game),
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    text = f"üí∞ *–ù–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ {GAMES.get(game, game)}*\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
    for i, item in enumerate(items, 1):
        name = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        current_price = item.get("current_price", 0)
        avg_price = item.get("avg_price", 0)
        discount = item.get("discount", 0)
        trend = item.get("trend", "stable")
        volume = item.get("volume", 0)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ–Ω–¥–∞
        trend_icon = "‚û°Ô∏è"
        if trend == "upward":
            trend_icon = "üîº"
        elif trend == "downward":
            trend_icon = "üîΩ"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        item_text = (
            f"{i}. *{name}*\n"
            f"   üí∞ –¶–µ–Ω–∞: ${current_price:.2f} (—Å—Ä–µ–¥–Ω—è—è: ${avg_price:.2f})\n"
            f"   üîñ –°–∫–∏–¥–∫–∞: {discount:.1f}%\n"
            f"   {trend_icon} –¢—Ä–µ–Ω–¥: {trend}\n"
            f"   üìä –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {volume}\n\n"
        )

        text += item_text

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    if current_page > 0:
        pagination_row.append(
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"analysis_page:prev:undervalued:{game}"
            ),
        )

    if current_page < total_pages - 1:
        pagination_row.append(
            InlineKeyboardButton(
                "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"analysis_page:next:undervalued:{game}"
            ),
        )

    if pagination_row:
        keyboard.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–Ω–∞–ª–∏–∑—É
    keyboard.append(
        [
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data=f"analysis:select_game:{game}"
            ),
        ]
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown",
    )


async def show_investment_recommendations_results(query, context, game: str) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

    Args:
        query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã

    """
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items, current_page, total_pages = pagination_manager.get_page(user_id)

    if not items:
        await query.edit_message_text(
            f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {GAMES.get(game, game)}",
            reply_markup=get_back_to_market_analysis_keyboard(game),
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    text = f"üíº *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {GAMES.get(game, game)}*\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
    for i, item in enumerate(items, 1):
        name = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        current_price = item.get("current_price", 0)
        discount = item.get("discount", 0)
        liquidity = item.get("liquidity", "low")
        investment_score = item.get("investment_score", 0)
        reason = item.get("reason", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        liquidity_icon = "üü°"  # –°—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        if liquidity == "high":
            liquidity_icon = "üü¢"  # –í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        elif liquidity == "low":
            liquidity_icon = "üî¥"  # –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        item_text = (
            f"{i}. *{name}*\n"
            f"   üí∞ –¶–µ–Ω–∞: ${current_price:.2f}\n"
            f"   üîñ –°–∫–∏–¥–∫–∞: {discount:.1f}%\n"
            f"   {liquidity_icon} –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {liquidity}\n"
            f"   ‚≠ê –û—Ü–µ–Ω–∫–∞: {investment_score:.1f}\n"
            f"   üìù –ü–æ—á–µ–º—É: {reason}\n\n"
        )

        text += item_text

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    if current_page > 0:
        pagination_row.append(
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"analysis_page:prev:recommendations:{game}"
            ),
        )

    if current_page < total_pages - 1:
        pagination_row.append(
            InlineKeyboardButton(
                "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"analysis_page:next:recommendations:{game}"
            ),
        )

    if pagination_row:
        keyboard.append(pagination_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    risk_row = []
    for risk, label in [("low", "üîµ –ù–∏–∑–∫–∏–π"), ("medium", "üü° –°—Ä–µ–¥–Ω–∏–π"), ("high", "üî¥ –í—ã—Å–æ–∫–∏–π")]:
        risk_row.append(
            InlineKeyboardButton(label, callback_data=f"analysis_risk:{risk}:{game}"),
        )

    keyboard.append(risk_row)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–Ω–∞–ª–∏–∑—É
    keyboard.append(
        [
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data=f"analysis:select_game:{game}"
            ),
        ]
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown",
    )


async def handle_risk_level_change(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    """
    query = update.callback_query
    user_id = query.from_user.id

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
    parts = query.data.split(":")

    if len(parts) < 3:
        return

    risk_level = parts[1]  # low, medium, high
    game = parts[2]

    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.user_data.get("market_analysis"):
        context.user_data["market_analysis"] = {}

    context.user_data["market_analysis"]["risk_level"] = risk_level

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —Ä–∏—Å–∫–∞
    await query.answer(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {risk_level}")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    query.data = f"analysis:recommendations:{game}"
    await market_analysis_callback(update, context)
