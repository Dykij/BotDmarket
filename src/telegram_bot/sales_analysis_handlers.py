"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ–¥–∞–∂ –∏ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.
"""
import logging
from typing import Dict, List, Any, Optional, cast
import json
from datetime import datetime, timedelta

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, CallbackQueryHandler

from src.dmarket.sales_history import analyze_sales_history, get_sales_history
from src.dmarket.arbitrage_sales_analysis import (
    enhanced_arbitrage_search,
    get_sales_volume_stats,
    analyze_item_liquidity
)
from src.utils.api_error_handling import APIError
from src.utils.dmarket_api_utils import execute_api_request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è games.py
GAMES = {
    "csgo": "CS2",
    "dota2": "Dota 2",
    "tf2": "Team Fortress 2",
    "rust": "Rust"
}


async def handle_sales_analysis(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /sales_analysis –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç–∞.
    
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    /sales_analysis AWP | Asiimov (Field-Tested)
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = update.message.text.strip()
    parts = message.split(" ", 1)
    
    if len(parts) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞!\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/sales_analysis AWP | Asiimov (Field-Tested)`",
            parse_mode='Markdown'
        )
        return
    
    item_name = parts[1].strip()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    reply_message = await update.message.reply_text(
        f"üîç –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:\n`{item_name}`\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode='Markdown'
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂
        async def get_analysis():
            return await analyze_sales_history(
                item_name=item_name,
                days=14  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞ 2 –Ω–µ–¥–µ–ª–∏
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        analysis = await execute_api_request(
            request_func=get_analysis,
            endpoint_type="last_sales",
            max_retries=2
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        if not analysis.get("has_data"):
            await reply_message.edit_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:\n`{item_name}`\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–¥–º–µ—Ç —Ä–µ–¥–∫–æ –ø—Ä–æ–¥–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ.",
                parse_mode='Markdown'
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        formatted_message = (
            f"üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂: `{item_name}`\n\n"
            f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${analysis['avg_price']:.2f}\n"
            f"‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${analysis['max_price']:.2f}\n"
            f"‚¨áÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${analysis['min_price']:.2f}\n"
            f"üìà –¢—Ä–µ–Ω–¥ —Ü–µ–Ω—ã: {get_trend_emoji(analysis['price_trend'])}\n"
            f"üîÑ –ü—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥: {analysis['sales_volume']}\n"
            f"üìÜ –ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å: {analysis['sales_per_day']:.2f}\n"
            f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {analysis['period_days']} –¥–Ω–µ–π\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö
        if analysis['recent_sales']:
            formatted_message += "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂
            for sale in analysis['recent_sales'][:5]:
                formatted_message += (
                    f"‚Ä¢ {sale['date']} - ${sale['price']:.2f} {sale['currency']}\n"
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
                    callback_data=f"sales_history:{item_name}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üíß –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏",
                    callback_data=f"liquidity:{item_name}"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        await reply_message.edit_text(
            text=formatted_message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    except APIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–¥–∞–∂: {e}")
        await reply_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö: {e.message}",
            parse_mode='Markdown'
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–¥–∞–∂: {str(e)}")
        await reply_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            parse_mode='Markdown'
        )


async def handle_arbitrage_with_sales(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /arbitrage_sales –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π 
    —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSGO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    game = "csgo"
    if hasattr(context, 'user_data') and "current_game" in context.user_data:
        game = context.user_data["current_game"]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    reply_message = await update.message.reply_text(
        f"üîç –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è {GAMES.get(game, game)}...\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode='Markdown'
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        async def search_arbitrage():
            return await enhanced_arbitrage_search(
                game=game,
                max_items=10,
                min_profit=1.0,
                min_profit_percent=5.0,
                min_sales_per_day=0.3,  # –ú–∏–Ω–∏–º—É–º 1 –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ 3 –¥–Ω—è
                time_period_days=7
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        results = await execute_api_request(
            request_func=search_arbitrage,
            endpoint_type="market",
            max_retries=2
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        opportunities = results.get("opportunities", [])
        if not opportunities:
            await reply_message.edit_text(
                f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è {GAMES.get(game, game)}.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É.",
                parse_mode='Markdown'
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        formatted_message = (
            f"üìä –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–∞–∂ –¥–ª—è {GAMES.get(game, game)}\n\n"
            f"üîé –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(opportunities)}\n"
            f"üìÜ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {results['filters']['time_period_days']} –¥–Ω–µ–π\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        for i, item in enumerate(opportunities[:5], 1):
            sales_analysis = item.get("sales_analysis", {})
            
            formatted_message += (
                f"üèÜ {i}. `{item['market_hash_name']}`\n"
                f"üí∞ –ü—Ä–∏–±—ã–ª—å: ${item['profit']:.2f} ({item['profit_percent']:.1f}%)\n"
                f"üõí –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${item['buy_price']:.2f}\n"
                f"üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${item['sell_price']:.2f}\n"
                f"üìà –¢—Ä–µ–Ω–¥: {get_trend_emoji(sales_analysis.get('price_trend', 'stable'))}\n"
                f"üîÑ –ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å: {sales_analysis.get('sales_per_day', 0):.2f}\n\n"
            )
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫–∞–∑–µ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏
        if len(opportunities) > 5:
            formatted_message += (
                f"_–ü–æ–∫–∞–∑–∞–Ω—ã 5 –∏–∑ {len(opportunities)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π._\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "üìä –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", 
                    callback_data=f"all_arbitrage_sales:{game}"
                ),
                InlineKeyboardButton(
                    "üîç –û–±–Ω–æ–≤–∏—Ç—å", 
                    callback_data=f"refresh_arbitrage_sales:{game}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", 
                    callback_data=f"setup_sales_filters:{game}"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        await reply_message.edit_text(
            text=formatted_message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    except APIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–∞–∂: {e}")
        await reply_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e.message}",
            parse_mode='Markdown'
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–∞–∂: {str(e)}")
        await reply_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            parse_mode='Markdown'
        )


async def handle_liquidity_analysis(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /liquidity –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.
    
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    /liquidity AWP | Asiimov (Field-Tested)
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = update.message.text.strip()
    parts = message.split(" ", 1)
    
    if len(parts) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞!\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/liquidity AWP | Asiimov (Field-Tested)`",
            parse_mode='Markdown'
        )
        return
    
    item_name = parts[1].strip()
    game = "csgo"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º CS2
    
    # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–¥–∞–Ω–∞ –∏–≥—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if hasattr(context, 'user_data') and "current_game" in context.user_data:
        game = context.user_data["current_game"]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    reply_message = await update.message.reply_text(
        f"üîç –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:\n`{item_name}`\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode='Markdown'
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        async def get_liquidity_analysis():
            return await analyze_item_liquidity(
                item_name=item_name,
                game=game
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        analysis = await execute_api_request(
            request_func=get_liquidity_analysis,
            endpoint_type="market",
            max_retries=2
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        sales_analysis = analysis.get("sales_analysis", {})
        if not sales_analysis.get("has_data"):
            await reply_message.edit_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:\n`{item_name}`\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–¥–º–µ—Ç —Ä–µ–¥–∫–æ –ø—Ä–æ–¥–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ.",
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        liquidity_emoji = get_liquidity_emoji(analysis.get("liquidity_category", "–ù–∏–∑–∫–∞—è"))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        formatted_message = (
            f"üíß –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: `{item_name}`\n\n"
            f"{liquidity_emoji} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis['liquidity_category']}\n"
            f"üìä –û—Ü–µ–Ω–∫–∞: {analysis['liquidity_score']}/7\n\n"
            f"üìà –¢—Ä–µ–Ω–¥ —Ü–µ–Ω—ã: {get_trend_emoji(sales_analysis.get('price_trend', 'stable'))}\n"
            f"üîÑ –ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å: {sales_analysis.get('sales_per_day', 0):.2f}\n"
            f"üìÜ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {sales_analysis.get('sales_volume', 0)}\n"
            f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${sales_analysis.get('avg_price', 0):.2f}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
        market_data = analysis.get("market_data", {})
        formatted_message += (
            f"üõí –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ: {market_data.get('offers_count', 0)}\n"
            f"‚¨áÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${market_data.get('lowest_price', 0):.2f}\n"
            f"‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${market_data.get('highest_price', 0):.2f}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É
        if analysis['liquidity_category'] in ['–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è', '–í—ã—Å–æ–∫–∞—è']:
            formatted_message += "‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞!\n"
        elif analysis['liquidity_category'] == '–°—Ä–µ–¥–Ω—è—è':
            formatted_message += "‚ö†Ô∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –ú–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –Ω–æ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.\n"
        else:
            formatted_message += "‚ùå *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂",
                    callback_data=f"sales_history:{item_name}"
                ),
                InlineKeyboardButton(
                    "üîç –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
                    callback_data=f"refresh_liquidity:{item_name}"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        await reply_message.edit_text(
            text=formatted_message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    except APIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}")
        await reply_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e.message}",
            parse_mode='Markdown'
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {str(e)}")
        await reply_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            parse_mode='Markdown'
        )


async def handle_sales_volume_stats(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /sales_volume –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSGO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    game = "csgo"
    if hasattr(context, 'user_data') and "current_game" in context.user_data:
        game = context.user_data["current_game"]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    reply_message = await update.message.reply_text(
        f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è {GAMES.get(game, game)}...\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode='Markdown'
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂
        async def get_volume_stats():
            return await get_sales_volume_stats(
                game=game,
                top_items=30  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 30 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        stats = await execute_api_request(
            request_func=get_volume_stats,
            endpoint_type="market",
            max_retries=2
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
        items = stats.get("items", [])
        if not items:
            await reply_message.edit_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è {GAMES.get(game, game)}.",
                parse_mode='Markdown'
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è {GAMES.get(game, game)}\n\n"
            f"üîé –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {stats['count']}\n"
            f"‚¨ÜÔ∏è –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ä–∞—Å—Ç—É—â–µ–π —Ü–µ–Ω–æ–π: {stats['summary']['up_trend_count']}\n"
            f"‚¨áÔ∏è –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –ø–∞–¥–∞—é—â–µ–π —Ü–µ–Ω–æ–π: {stats['summary']['down_trend_count']}\n"
            f"‚û°Ô∏è –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π: {stats['summary']['stable_trend_count']}\n\n"
            f"üìà –¢–æ–ø-5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –æ–±—ä–µ–º—É –ø—Ä–æ–¥–∞–∂:\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –ø—Ä–æ–¥–∞–∂
        for i, item in enumerate(items[:5], 1):
            formatted_message += (
                f"{i}. `{item['item_name']}`\n"
                f"   üîÑ –ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å: {item['sales_per_day']:.2f}\n"
                f"   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${item['avg_price']:.2f}\n"
                f"   üìà –¢—Ä–µ–Ω–¥: {get_trend_emoji(item['price_trend'])}\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
                    callback_data=f"all_volume_stats:{game}"
                ),
                InlineKeyboardButton(
                    "üîç –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data=f"refresh_volume_stats:{game}"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await reply_message.edit_text(
            text=formatted_message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    except APIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂: {e}")
        await reply_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e.message}",
            parse_mode='Markdown'
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂: {str(e)}")
        await reply_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            parse_mode='Markdown'
        )


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_trend_emoji(trend: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞ —Ü–µ–Ω—ã."""
    if trend == "up":
        return "‚¨ÜÔ∏è –†–∞—Å—Ç–µ—Ç"
    elif trend == "down":
        return "‚¨áÔ∏è –ü–∞–¥–∞–µ—Ç"
    else:
        return "‚û°Ô∏è –°—Ç–∞–±–∏–ª–µ–Ω"


def get_liquidity_emoji(liquidity_category: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏."""
    if liquidity_category == "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è":
        return "üíßüíßüíßüíß"
    elif liquidity_category == "–í—ã—Å–æ–∫–∞—è":
        return "üíßüíßüíß"
    elif liquidity_category == "–°—Ä–µ–¥–Ω—è—è":
        return "üíßüíß"
    else:
        return "üíß"
