"""
–ú–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ DMarket.
"""

import asyncio
import logging
import os
import sys
import json
import time
from typing import Dict, List, Any, Optional, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
python_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
if python_path not in sys.path:
    sys.path.insert(0, python_path)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã telegram-–±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º API (–≤–µ—Ä—Å–∏—è 20+)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, CallbackContext, MessageHandler, filters
)
from dotenv import load_dotenv

from src.dmarket.arbitrage import arbitrage_boost_async, arbitrage_mid_async, arbitrage_pro_async, GAMES
from src.telegram_bot.keyboards import (
    get_arbitrage_keyboard, get_game_selection_keyboard,
    get_auto_arbitrage_keyboard, get_back_to_arbitrage_keyboard,
    get_settings_keyboard, get_language_keyboard
)
from src.utils.api_error_handling import APIError, handle_response, retry_request
from src.utils.dmarket_api_utils import execute_api_request
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
from src.telegram_bot.auto_arbitrage import start_auto_trading, stop_auto_trading, show_auto_stats
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –∏–≥—Ä–∞–º
from src.telegram_bot.game_filter_handlers import (
    handle_game_filters, handle_filter_callback, handle_price_range_callback,
    handle_float_range_callback, handle_set_category_callback, 
    handle_set_rarity_callback, handle_set_exterior_callback,
    handle_set_hero_callback, handle_set_class_callback,
    handle_select_game_filter_callback, handle_back_to_filters_callback
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞
env_path = os.path.join(os.path.dirname(__file__), '.env')
load_dotenv(dotenv_path=env_path)
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∏–∑ {env_path}: {TOKEN}")

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
LANGUAGES = {
    "ru": "–†—É—Å—Å–∫–∏–π",
    "en": "English",
    "es": "Espa√±ol",
    "de": "Deutsch"
}

# –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–∞–∑–æ–≤—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
LOCALIZATIONS = {
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç, {user}! üëã\n\n–Ø –±–æ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ DMarket. –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ —Å–¥–µ–ª–∫–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–µ–ª–∞–µ–º–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        "help": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/arbitrage - –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n/dmarket - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å DMarket API\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
        "select_mode": "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
        "checking_api": "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å DMarket API...",
        "api_ok": "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n\nüïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —á—Ç–æ",
        "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è",
        "language": "üåê –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {lang}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        "language_set": "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}",
        "balance": "üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}",
        "insufficient_balance": "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ${balance:.2f}"
    },
    "en": {
        "welcome": "Hello, {user}! üëã\n\nI'm a DMarket arbitrage bot. I'll help you find profitable deals.\n\nUse the menu to select your desired operation:",
        "help": "Available commands:\n\n/start - Start working with the bot\n/arbitrage - Open arbitrage menu\n/dmarket - Check DMarket API status\n/settings - Profile settings\n/help - Show this help",
        "select_mode": "üìä Select arbitrage mode:",
        "checking_api": "üîç Checking DMarket API status...",
        "api_ok": "‚úÖ API is working normally.\n\nüïí Last update: just now",
        "settings": "‚öôÔ∏è Profile settings",
        "language": "üåê Current language: {lang}\n\nSelect interface language:",
        "language_set": "‚úÖ Language set to: {lang}",
        "balance": "üí∞ Balance: ${balance:.2f}",
        "insufficient_balance": "‚ö†Ô∏è Insufficient balance: ${balance:.2f}"
    }
}

# –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
USER_PROFILES = {}
USER_PROFILES_FILE = os.path.join(os.path.dirname(__file__), "user_profiles.json")

def save_user_profiles():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USER_PROFILES_FILE, 'w', encoding='utf-8') as f:
            json.dump(USER_PROFILES, f, ensure_ascii=False, indent=2)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(USER_PROFILES)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {str(e)}")

def load_user_profiles():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global USER_PROFILES
    try:
        if os.path.exists(USER_PROFILES_FILE):
            with open(USER_PROFILES_FILE, 'r', encoding='utf-8') as f:
                USER_PROFILES = json.load(f)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(USER_PROFILES)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π: {str(e)}")
        USER_PROFILES = {}

def get_user_profile(user_id: int) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
    """
    user_id_str = str(user_id)
    
    if user_id_str not in USER_PROFILES:
        USER_PROFILES[user_id_str] = {
            "language": "ru",
            "api_key": "",
            "api_secret": "",
            "auto_trading_enabled": False,
            "trade_settings": {
                "min_profit": 2.0,
                "max_price": 50.0,
                "max_trades": 3,
                "risk_level": "medium"
            },
            "last_activity": time.time()
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        save_user_profiles()
        
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    USER_PROFILES[user_id_str]["last_activity"] = time.time()
    
    return USER_PROFILES[user_id_str]

def get_localized_text(user_id: int, key: str, **kwargs) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        key: –ö–ª—é—á –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
        
    Returns:
        –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    profile = get_user_profile(user_id)
    lang = profile["language"]
    
    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
    if lang not in LOCALIZATIONS:
        lang = "ru"
        
    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    if key not in LOCALIZATIONS[lang]:
        if key in LOCALIZATIONS["ru"]:
            text = LOCALIZATIONS["ru"][key]
        else:
            text = f"[Missing: {key}]"
    else:
        text = LOCALIZATIONS[lang][key]
        
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if kwargs:
        text = text.format(**kwargs)
        
    return text

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    user_id = user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_message = get_localized_text(
        user_id, "welcome", user=user.mention_html()
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_arbitrage_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_html(welcome_message, reply_markup=keyboard)


async def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    user_id = update.effective_user.id
    help_text = get_localized_text(user_id, "help")
    
    await update.message.reply_text(help_text)


async def dmarket_status(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dmarket –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await update.message.reply_text(
        "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å DMarket API..."
    )
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
        from src.dmarket.dmarket_api import DMarketAPI
        from src.utils.rate_limiter import RateLimiter
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–∏–º–∏—Ç–µ—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        limiter = RateLimiter(is_authorized=False)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        async def check_api_health(**kwargs):
            api = DMarketAPI()
            return await api.ping()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º retry_request
        result = await retry_request(
            check_api_health,
            limiter=limiter,
            endpoint_type="other",
            max_retries=1
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result and getattr(result, "status", 0) == 200:
            # API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            await message.edit_text(
                "‚úÖ API DMarket —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n\n"
                "üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —á—Ç–æ\n\n"
                "üîÑ –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–æ—Ä–º–µ."
            )
        else:
            # –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API
            await message.edit_text(
                "‚ö†Ô∏è API DMarket –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏.\n\n"
                f"–°—Ç–∞—Ç—É—Å: {getattr(result, 'status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                "üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —á—Ç–æ"
            )
            
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ API: {str(e)}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ DMarket API.\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            "üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —á—Ç–æ"
        )


async def arbitrage_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /arbitrage."""
    keyboard = get_arbitrage_keyboard()
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
        reply_markup=keyboard
    )


def format_dmarket_results(results: List[Dict], mode: str, game: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    
    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        mode: –†–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        game: –ö–æ–¥ –∏–≥—Ä—ã
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    mode_display = {
        "boost": "–†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞",
        "mid": "–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä",
        "pro": "Trade Pro",
        "best": "–õ—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "auto": "–ê–≤—Ç–æ-–∞—Ä–±–∏—Ç—Ä–∞–∂"
    }
    
    if not results:
        return (f"{mode_display.get(mode, mode)}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö "
                f"—Å–∫–∏–Ω–æ–≤ –¥–ª—è {GAMES.get(game, game)}.")
    
    game_name = GAMES.get(game, game)
    header = f"üìä {mode_display.get(mode, mode)} | {game_name}\n\n"
    result_texts = []
    
    for i, item in enumerate(results[:5], start=1):
        name = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        buy_price = item.get("price", {}).get("amount", "0")
        profit = item.get("profit", 0)
        
        # –¶–µ–Ω—ã –æ–±—ã—á–Ω–æ –≤ —Ü–µ–Ω—Ç–∞—Ö
        buy_price_usd = float(buy_price) / 100
        profit_usd = float(profit) / 100
        
        result_text = (
            f"{i}. {name}\n"
            f"   üíµ –¶–µ–Ω–∞: ${buy_price_usd:.2f}\n"
            f"   üí∞ –ü—Ä–∏–±—ã–ª—å: ${profit_usd:.2f}\n"
        )
        result_texts.append(result_text)
    
    if len(results) > 5:
        result_texts.append(f"... –∏ –µ—â–µ {len(results) - 5} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    
    return header + "\n".join(result_texts)


def format_best_opportunities(opportunities: List[Dict], game: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª—É—á—à–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        opportunities: –°–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        game: –ö–æ–¥ –∏–≥—Ä—ã
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    if not opportunities:
        return f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è {GAMES.get(game, game)}."
    
    game_name = GAMES.get(game, game)
    header = f"üåü –õ—É—á—à–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ | {game_name}\n\n"
    result_texts = []
    
    for i, opp in enumerate(opportunities[:10], start=1):
        name = opp.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        buy_price = float(opp.get("buyPrice", 0)) / 100  # –¶–µ–Ω—ã –æ–±—ã—á–Ω–æ –≤ —Ü–µ–Ω—Ç–∞—Ö
        sell_price = float(opp.get("sellPrice", 0)) / 100
        profit_amount = float(opp.get("profit", 0)) / 100
        profit_percentage = opp.get("profitPercent", 0)
        
        result_text = (
            f"{i}. {name}\n"
            f"   üíµ –ö—É–ø–∏—Ç—å: ${buy_price:.2f}\n"
            f"   üí∏ –ü—Ä–æ–¥–∞—Ç—å: ${sell_price:.2f}\n"
            f"   üí∞ –ü—Ä–∏–±—ã–ª—å: ${profit_amount:.2f} ({profit_percentage:.1f}%)\n"
        )
        result_texts.append(result_text)
    
    return header + "\n".join(result_texts)


async def arbitrage_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º callback_data
    data = query.data
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å—ã
    if data == "arbitrage":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        keyboard = get_arbitrage_keyboard()
        await query.edit_message_text(
            text="üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=keyboard
        )
    elif data == "arbitrage_boost":
        # –†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞
        await handle_dmarket_arbitrage(query, context, "boost")
    elif data == "arbitrage_mid":
        # –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä
        await handle_dmarket_arbitrage(query, context, "mid")
    elif data == "arbitrage_pro":
        # Trade Pro
        await handle_dmarket_arbitrage(query, context, "pro")
    elif data == "best_opportunities":
        # –õ—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        await handle_best_opportunities(query, context)
    elif data == "select_game":
        # –í—ã–±–æ—Ä –∏–≥—Ä—ã
        keyboard = get_game_selection_keyboard()
        await query.edit_message_text(
            text="üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
            reply_markup=keyboard
        )
    elif data.startswith("game:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
        game = data.split(":")[1]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not hasattr(context, 'user_data'):
            context.user_data = {}
        context.user_data["current_game"] = game
          # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        keyboard = get_arbitrage_keyboard()
        await query.edit_message_text(
            text=f"üéÆ –í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞: {GAMES.get(game, game)}\n\nüìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=keyboard
        )
    elif data == "auto_arbitrage":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        keyboard = get_auto_arbitrage_keyboard()
        await query.edit_message_text(
            text="ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=keyboard
        )
    elif data.startswith("auto_start:"):
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        mode = data.split(":")[1]
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        try:
            from src.telegram_bot.auto_arbitrage import start_auto_trading
            await start_auto_trading(query, context, mode)
        except Exception as e:
            import traceback
            error_traceback = traceback.format_exc()
            logger.error(f"–û—à–∏–±–∫–∞ –≤ auto_start: {str(e)}\n{error_traceback}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="auto_arbitrage")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="arbitrage")]
            ])
            
            await query.edit_message_text(
                text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:\n"
                     f"{str(e)}\n\n"
                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                reply_markup=keyboard
            )
    elif data == "auto_stop":
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        from src.telegram_bot.auto_arbitrage import stop_auto_trading
        await stop_auto_trading(query, context)
    elif data == "auto_stats":
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        from src.telegram_bot.auto_arbitrage import show_auto_stats
        await show_auto_stats(query, context)
    elif data.startswith("paginate:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        parts = data.split(":")
        action = parts[1]  # "next" –∏–ª–∏ "prev"
        mode = parts[2] if len(parts) > 2 else "auto"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if mode.startswith("auto"):
            # –î–ª—è –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            from src.telegram_bot.auto_arbitrage import show_auto_stats
            await show_auto_stats(query, context)
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            from src.telegram_bot.pagination import pagination_manager
              # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            user_id = query.from_user.id
            
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if action == "next":
                items, current_page, total_pages = pagination_manager.next_page(user_id)
            else:  # prev
                items, current_page, total_pages = pagination_manager.prev_page(user_id)
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
        game = "csgo"
        if hasattr(context, 'user_data') and "current_game" in context.user_data:
            game = context.user_data["current_game"]
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        from src.telegram_bot.pagination import format_paginated_results
        formatted_text = format_paginated_results(
            items, game, mode, current_page, total_pages
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_row = []
        if current_page > 0:
            pagination_row.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"paginate:prev:{mode}")
            )
        
        if current_page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"paginate:next:{mode}")
            )
        
        if pagination_row:
            keyboard.append(pagination_row)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –º–µ–Ω—é
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="arbitrage")
        ])
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        await query.edit_message_text(
            text=formatted_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    elif data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/arbitrage - –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n"
                "/dmarket - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å DMarket API\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
        )
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
        await query.edit_message_text(
            text=f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}"
        )


async def handle_dmarket_arbitrage(query, context: CallbackContext, mode: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞ DMarket.
    
    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        mode: –†–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ ("boost", "mid", "pro")
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSGO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    game = "csgo"
    if hasattr(context, 'user_data') and "current_game" in context.user_data:
        game = context.user_data["current_game"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    context.user_data["last_arbitrage_mode"] = mode
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–µ–∂–∏–º–æ–≤
    mode_display = {
        "boost": "–†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞",
        "mid": "–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä",
        "pro": "Trade Pro"
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞
    await query.edit_message_text(
        text=f"üîç –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ({mode_display.get(mode, mode)}) "
             f"–¥–ª—è –∏–≥—Ä—ã {GAMES.get(game, game)}...",
        reply_markup=None,
        parse_mode='HTML'
    )
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º execute_api_request
        async def get_arbitrage_data():
            if mode == "boost":
                return await arbitrage_boost_async(game)
            elif mode == "pro":
                return await arbitrage_pro_async(game)
            else:  # mid
                return await arbitrage_mid_async(game)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        results = await execute_api_request(
            request_func=get_arbitrage_data,
            endpoint_type="market",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—ã–Ω–æ—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ª–∏–º–∏—Ç–∞
            max_retries=2  # –°–æ–∫—Ä–∞—Ç–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        )
            
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if results:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            from src.telegram_bot.pagination import pagination_manager
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            user_id = query.from_user.id
            pagination_manager.add_items_for_user(user_id, results, mode)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page_items, current_page, total_pages = pagination_manager.get_page(user_id)
                  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            from src.telegram_bot.pagination import format_paginated_results
            formatted_text = format_paginated_results(
                page_items, game, mode, current_page, total_pages
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if total_pages > 1:
                pagination_row = []
                if current_page > 0:
                    pagination_row.append(
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", 
                            callback_data=f"paginate:prev:{mode}"
                        )
                    )
                
                if current_page < total_pages - 1:
                    pagination_row.append(
                        InlineKeyboardButton(
                            "–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", 
                            callback_data=f"paginate:next:{mode}"
                        )
                    )
                
                if pagination_row:
                    keyboard.append(pagination_row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            arbitrage_keyboard = get_arbitrage_keyboard().inline_keyboard
            keyboard.extend(arbitrage_keyboard)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            await query.edit_message_text(
                text=formatted_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            formatted_text = format_dmarket_results(results, mode, game)
            keyboard = get_arbitrage_keyboard()
            await query.edit_message_text(
                text=formatted_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
    except APIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API DMarket
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e.message}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if e.status_code == 429:
            error_message = "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DMarket API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        elif e.status_code == 401:
            error_message = "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ DMarket API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π."
        elif e.status_code == 404:
            error_message = "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DMarket API."
        elif e.status_code >= 500:
            error_message = f"üîß –°–µ—Ä–≤–µ—Ä DMarket –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ DMarket API: {e.message}"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="arbitrage")]
        ])
        
        await query.edit_message_text(
            text=error_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {str(e)}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="arbitrage")]
        ])
        error_message = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        await query.edit_message_text(
            text=error_message, 
            reply_markup=keyboard, 
            parse_mode='HTML'
        )


async def handle_best_opportunities(query, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
    
    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSGO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    game = "csgo"
    if hasattr(context, 'user_data') and "current_game" in context.user_data:
        game = context.user_data["current_game"]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞
    await query.edit_message_text(
        text=f"üîç –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è {GAMES.get(game, game)}...",
        reply_markup=None
    )
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        from src.telegram_bot.arbitrage_scanner import find_arbitrage_opportunities
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        opportunities = find_arbitrage_opportunities(
            game=game,
            min_profit_percentage=5.0,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ—Ä–æ–≥, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            max_items=10  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 –ª—É—á—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_text = format_best_opportunities(opportunities, game)
        keyboard = get_arbitrage_keyboard()
        await query.edit_message_text(
            text=formatted_text,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {str(e)}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="arbitrage")]
        ])
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª—É—á—à–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {str(e)}"
        await query.edit_message_text(text=error_message, reply_markup=keyboard)


async def error_handler(update: Optional[Update], context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    error = context.error
    logger.error(f"–û—à–∏–±–∫–∞: {error}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
    error_message = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ APIError –∏–∑ –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è api_error_handling
    if isinstance(error, APIError):
        # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ API-–æ—à–∏–±–æ–∫
        if error.status_code == 429:  # RateLimitExceeded
            error_message = "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DMarket API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        elif error.status_code == 401:  # AuthenticationError
            error_message = "üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ DMarket API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        elif error.status_code == 404:  # NotFoundError
            error_message = "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DMarket."
        elif error.status_code >= 500:  # ServerError
            error_message = "üõë –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ DMarket API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ API –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            error_message = f"‚ùå –û—à–∏–±–∫–∞ DMarket API: {error.message}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if update and update.effective_message:
        await update.effective_message.reply_text(error_message)


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    try:
        if TOKEN is None or TOKEN == "YOUR_TOKEN_HERE":
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("dmarket", dmarket_status))
        application.add_handler(CommandHandler("arbitrage", arbitrage_command))
        application.add_handler(CommandHandler("filters", handle_game_filters))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        application.add_handler(CallbackQueryHandler(arbitrage_callback, pattern=r"^(?!filter:|price_range:|float_range:|set_|back_to_filters:|select_game)"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        application.add_handler(CallbackQueryHandler(handle_filter_callback, pattern=r"^filter:"))
        application.add_handler(CallbackQueryHandler(handle_price_range_callback, pattern=r"^price_range:"))
        application.add_handler(CallbackQueryHandler(handle_float_range_callback, pattern=r"^float_range:"))
        application.add_handler(CallbackQueryHandler(handle_set_category_callback, pattern=r"^set_category:"))
        application.add_handler(CallbackQueryHandler(handle_set_rarity_callback, pattern=r"^set_rarity:"))
        application.add_handler(CallbackQueryHandler(handle_set_exterior_callback, pattern=r"^set_exterior:"))
        application.add_handler(CallbackQueryHandler(handle_set_hero_callback, pattern=r"^set_hero:"))
        application.add_handler(CallbackQueryHandler(handle_set_class_callback, pattern=r"^set_class:"))
        application.add_handler(CallbackQueryHandler(handle_select_game_filter_callback, pattern=r"^select_game_filter:"))
        application.add_handler(CallbackQueryHandler(handle_back_to_filters_callback, pattern=r"^back_to_filters:"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")


if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_user_profiles()
    
    main()
