"""–ú–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ DMarket."""

import logging
import os
import traceback
from typing import Any, Dict, Optional

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

from src.dmarket.arbitrage import GAMES
from src.telegram_bot.keyboards import get_arbitrage_keyboard, get_auto_arbitrage_keyboard, get_game_selection_keyboard
from src.utils.api_error_handling import APIError
from src.utils.dmarket_api_utils import execute_api_request
from src.telegram_bot.game_filter_handlers import (
    handle_game_filters, handle_filter_callback, handle_price_range_callback,
    handle_float_range_callback, handle_set_category_callback, handle_set_rarity_callback,
    handle_set_exterior_callback, handle_set_hero_callback, handle_set_class_callback,
    handle_back_to_filters_callback, handle_select_game_filter_callback,
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API DMarket
DMARKET_PUBLIC_KEY = os.environ.get("DMARKET_PUBLIC_KEY", "")
DMARKET_SECRET_KEY = os.environ.get("DMARKET_SECRET_KEY", "")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
    """
    user = update.message.from_user

    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DMarket.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –º–µ–∂–¥—É –ø–ª–æ—â–∞–¥–∫–∞–º–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API DMarket\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

    keyboard = get_arbitrage_keyboard()
    await update.message.reply_text(welcome_message, reply_markup=keyboard)


async def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
    """
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API DMarket\n"
        "/dmarket - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DMarket API\n"
        "/arbitrage - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n"
    )
    await update.message.reply_text(help_text)


async def dmarket_status(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å API DMarket.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
    """
    message = await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API DMarket...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π API
    if DMARKET_PUBLIC_KEY and DMARKET_SECRET_KEY:
        status_text = (
            "‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
            "API endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        )
    else:
        status_text = (
            "‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DMARKET_PUBLIC_KEY –∏ DMARKET_SECRET_KEY –≤ .env —Ñ–∞–π–ª–µ."
        )

    await message.edit_text(status_text)


async def arbitrage_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /arbitrage.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
    """
    keyboard = get_arbitrage_keyboard()
    await update.message.reply_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
        reply_markup=keyboard
    )


async def arbitrage_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –æ—Ç –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
    """
    query = update.callback_query
    await query.answer()

    callback_data = query.data

    if callback_data == "arbitrage":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        keyboard = get_arbitrage_keyboard()
        await query.edit_message_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=keyboard
        )
    elif callback_data.startswith("arbitrage_"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        arb_type = callback_data.replace("arbitrage_", "")

        if arb_type == "game_selection":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä—ã
            keyboard = get_game_selection_keyboard()
            await query.edit_message_text(
                "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
                reply_markup=keyboard
            )
        elif arb_type == "auto":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–≤—Ç–æ–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            keyboard = get_auto_arbitrage_keyboard()
            await query.edit_message_text(
                "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂:",
                reply_markup=keyboard
            )
    elif callback_data.startswith("select_game_"):
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
        game = callback_data.replace("select_game_", "")
        context.user_data["current_game"] = game

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å–Ω–æ–≤–∞
        keyboard = get_arbitrage_keyboard()
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞: {GAMES.get(game, game)}\n\n"
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=keyboard
        )


async def button_callback_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext.
    """
    query = update.callback_query
    callback_data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    if callback_data == "arbitrage" or callback_data.startswith("arbitrage_"):
        await arbitrage_callback(update, context)
    elif callback_data == "select_game":
        await query.answer()
        keyboard = get_game_selection_keyboard()
        await query.edit_message_text(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=keyboard
        )
    elif callback_data.startswith("select_game_"):
        await arbitrage_callback(update, context)
    elif callback_data.startswith("auto_start:"):
        # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        await start_auto_trading(query, context, callback_data.split(":", 1)[1])
    elif callback_data.startswith("paginate:"):
        # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        await show_auto_stats(query, context)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def start_auto_trading(query: Any, context: CallbackContext, mode: str) -> None:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    pass


async def show_auto_stats(query: Any, context: CallbackContext) -> None:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    pass


# –ö–ª–∞—Å—Å-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
class PaginationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
        pass

    def paginate(self, query: Any, context: CallbackContext, page_action: str, current_page: int = 0) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
        pass


pagination_manager = PaginationManager()


async def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç CallbackContext —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ.
    """
    error = context.error

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logging.error(f"Exception while handling an update: {error}")
    logging.error(traceback.format_exc())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
    if isinstance(error, APIError):
        error_message = (
            f"‚ùå –û—à–∏–±–∫–∞ API DMarket:\n"
            f"–ö–æ–¥: {error.status_code}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error!s}"
        )
    else:
        error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    if update and update.effective_message:
        await update.effective_message.reply_text(error_message)


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    env_path = os.path.join(os.path.dirname(__file__), ".env")
    load_dotenv(dotenv_path=env_path)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ DMarket, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω
        try:
            from src.dmarket.dmarket_api_patches import apply_balance_patch
            logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ DMarket...")
            apply_balance_patch()
        except ImportError:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
            try:
                from src.dmarket.dmarket_api_patch import apply_patch
                logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ DMarket...")
                apply_patch()
            except ImportError:
                logger.warning("–ü–∞—Ç—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ DMarket –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if not TOKEN or TOKEN == "YOUR_TOKEN_HERE":
            logger.error(
                "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! "
                "–£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ"
            )
            return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application = Application.builder().token(TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", dmarket_status))
        application.add_handler(CommandHandler("dmarket", dmarket_status))
        application.add_handler(CommandHandler("arbitrage", arbitrage_command))
        application.add_handler(CommandHandler("filters", handle_game_filters))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        application.add_handler(
            CallbackQueryHandler(
                button_callback_handler,
                pattern=r"^(?!filter:|price_range:|float_range:|set_|back_to_filters:|select_game_filter)"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        application.add_handler(
            CallbackQueryHandler(handle_filter_callback, pattern=r"^filter:")
        )
        application.add_handler(
            CallbackQueryHandler(handle_price_range_callback, pattern=r"^price_range:")
        )
        application.add_handler(
            CallbackQueryHandler(handle_float_range_callback, pattern=r"^float_range:")
        )
        application.add_handler(
            CallbackQueryHandler(handle_set_category_callback, pattern=r"^set_category:")
        )
        application.add_handler(
            CallbackQueryHandler(handle_set_rarity_callback, pattern=r"^set_rarity:")
        )
        application.add_handler(
            CallbackQueryHandler(handle_set_exterior_callback, pattern=r"^set_exterior:")
        )
        application.add_handler(
            CallbackQueryHandler(handle_set_hero_callback, pattern=r"^set_hero:")
        )
        application.add_handler(
            CallbackQueryHandler(handle_set_class_callback, pattern=r"^set_class:")
        )
        application.add_handler(
            CallbackQueryHandler(
                handle_select_game_filter_callback, pattern=r"^select_game_filter:"
            )
        )
        application.add_handler(
            CallbackQueryHandler(
                handle_back_to_filters_callback, pattern=r"^back_to_filters:"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    from src.telegram_bot.profiles import load_user_profiles
    load_user_profiles()

    main()
