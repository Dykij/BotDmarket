"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Telegram-–±–æ—Ç–µ DMarket.
"""

import logging
import os
from typing import Any

from telegram import Update
from telegram.ext import CallbackContext

from src.telegram_bot.keyboards import (
    get_back_to_settings_keyboard,
    get_language_keyboard,
    get_risk_profile_keyboard,
    get_settings_keyboard,
)
from src.telegram_bot.localization import LANGUAGES, LOCALIZATIONS

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
try:
    from src.telegram_bot.bot_v2 import USER_PROFILES, get_user_profile
except ImportError:
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω
    USER_PROFILES = {}

    def get_user_profile(user_id: int) -> dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è

        """
        user_id_str = str(user_id)

        if user_id_str not in USER_PROFILES:
            import time

            USER_PROFILES[user_id_str] = {
                "language": "ru",
                "api_key": "",
                "api_secret": "",
                "auto_trading_enabled": False,
                "trade_settings": {
                    "min_profit": 2.0,
                    "max_price": 50.0,
                    "max_trades": 3,
                    "risk_level": "medium",
                },
                "last_activity": time.time(),
            }

        return USER_PROFILES[user_id_str]


def get_localized_text(user_id: int, key: str, **kwargs) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        key: –ö–ª—é—á –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏

    Returns:
        –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

    """
    profile = get_user_profile(user_id)
    lang = profile["language"]

    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
    if lang not in LOCALIZATIONS:
        lang = "ru"

    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    if key not in LOCALIZATIONS[lang]:
        if key in LOCALIZATIONS["ru"]:
            text = LOCALIZATIONS["ru"][key]
        else:
            text = f"[Missing: {key}]"
    else:
        text = LOCALIZATIONS[lang][key]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if kwargs:
        text = text.format(**kwargs)

    return text


def save_user_profiles():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        import json

        user_profiles_file = os.path.join(
            os.path.dirname(__file__),
            "user_profiles.json",
        )

        with open(user_profiles_file, "w", encoding="utf-8") as f:
            json.dump(USER_PROFILES, f, ensure_ascii=False, indent=2)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(USER_PROFILES)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e!s}")


async def settings_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings."""
    user_id = update.effective_user.id
    profile = get_user_profile(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_text = get_localized_text(user_id, "settings")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = get_settings_keyboard(
        auto_trading_enabled=profile.get("auto_trading_enabled", False),
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    await update.message.reply_text(settings_text, reply_markup=keyboard)


async def settings_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –æ–∂–∏–¥–∞–Ω–∏—è
    await query.answer()

    if data == "settings":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        profile = get_user_profile(user_id)
        settings_text = get_localized_text(user_id, "settings")
        keyboard = get_settings_keyboard(
            auto_trading_enabled=profile.get("auto_trading_enabled", False),
        )
        await query.edit_message_text(
            text=settings_text,
            reply_markup=keyboard,
        )

    elif data == "settings_language":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        profile = get_user_profile(user_id)
        current_language = profile.get("language", "ru")
        lang_display_name = LANGUAGES.get(current_language, current_language)

        language_text = get_localized_text(
            user_id,
            "language",
            lang=lang_display_name,
        )
        keyboard = get_language_keyboard(current_language)

        await query.edit_message_text(
            text=language_text,
            reply_markup=keyboard,
        )

    elif data.startswith("language:"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        lang_code = data.split(":")[1]
        if lang_code in LANGUAGES:
            profile = get_user_profile(user_id)
            profile["language"] = lang_code
            save_user_profiles()

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            lang_display = LANGUAGES.get(lang_code, lang_code)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
            confirmation_text = get_localized_text(
                user_id,
                "language_set",
                lang=lang_display,
            )

            keyboard = get_back_to_settings_keyboard()
            await query.edit_message_text(
                text=confirmation_text,
                reply_markup=keyboard,
            )
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫
            error_text = f"‚ö†Ô∏è –Ø–∑—ã–∫ {lang_code} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
            keyboard = get_language_keyboard("ru")
            await query.edit_message_text(
                text=error_text,
                reply_markup=keyboard,
            )

    elif data == "settings_api_keys":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π
        profile = get_user_profile(user_id)
        api_key = profile.get("api_key", "")
        api_secret = profile.get("api_secret", "")

        # –°–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –∫–ª—é—á–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if api_key:
            api_key_display = api_key[:5] + "..." + api_key[-5:]
        else:
            api_key_display = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        if api_secret:
            api_secret_display = api_secret[:3] + "..." + api_secret[-3:]
        else:
            api_secret_display = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        api_text = (
            f"üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API DMarket\n\n"
            f"–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {api_key_display}\n"
            f"–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: {api_secret_display}\n\n"
            f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup"
        )

        keyboard = get_back_to_settings_keyboard()
        await query.edit_message_text(
            text=api_text,
            reply_markup=keyboard,
        )

    elif data == "settings_toggle_trading":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        profile = get_user_profile(user_id)
        current_state = profile.get("auto_trading_enabled", False)

        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        profile["auto_trading_enabled"] = not current_state
        save_user_profiles()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_text = get_localized_text(user_id, "settings")
        keyboard = get_settings_keyboard(
            auto_trading_enabled=profile["auto_trading_enabled"],
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if profile["auto_trading_enabled"]:
            status_text = get_localized_text(user_id, "auto_trading_on")
        else:
            status_text = get_localized_text(user_id, "auto_trading_off")

        await query.edit_message_text(
            text=f"{settings_text}\n\n{status_text}",
            reply_markup=keyboard,
        )

    elif data == "settings_limits":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
        profile = get_user_profile(user_id)
        trade_settings = profile.get("trade_settings", {})

        min_profit = trade_settings.get("min_profit", 2.0)
        max_price = trade_settings.get("max_price", 50.0)
        max_trades = trade_settings.get("max_trades", 3)
        risk_level = trade_settings.get("risk_level", "medium")

        limits_text = (
            f"üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏\n\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${min_profit:.2f}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${max_price:.2f}\n"
            f"–ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫: {max_trades}\n"
            f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞:"
        )

        keyboard = get_risk_profile_keyboard(risk_level)
        await query.edit_message_text(
            text=limits_text,
            reply_markup=keyboard,
        )

    elif data.startswith("risk:"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞
        risk_profile = data.split(":")[1]
        profile = get_user_profile(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞
        if "trade_settings" not in profile:
            profile["trade_settings"] = {}

        profile["trade_settings"]["risk_level"] = risk_profile

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞
        if risk_profile == "low":
            profile["trade_settings"].update(
                {
                    "min_profit": 1.0,
                    "max_price": 30.0,
                    "max_trades": 2,
                }
            )
        elif risk_profile == "medium":
            profile["trade_settings"].update(
                {
                    "min_profit": 2.0,
                    "max_price": 50.0,
                    "max_trades": 5,
                }
            )
        elif risk_profile == "high":
            profile["trade_settings"].update(
                {
                    "min_profit": 5.0,
                    "max_price": 100.0,
                    "max_trades": 10,
                }
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_user_profiles()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        trade_settings = profile["trade_settings"]
        limits_text = (
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {risk_profile}\n\n"
            f"üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏:\n\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${trade_settings['min_profit']:.2f}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${trade_settings['max_price']:.2f}\n"
            f"–ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫: {trade_settings['max_trades']}\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
        )

        keyboard = get_back_to_settings_keyboard()
        await query.edit_message_text(
            text=limits_text,
            reply_markup=keyboard,
        )

    elif data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from src.telegram_bot.keyboards import get_arbitrage_keyboard

        keyboard = get_arbitrage_keyboard()
        welcome_text = get_localized_text(
            user_id,
            "welcome",
            user=query.from_user.mention_html(),
        )

        await query.edit_message_text(
            text=welcome_text,
            reply_markup=keyboard,
            parse_mode="HTML",
        )


async def setup_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π.
    """
    user_id = update.effective_user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
    api_key_prompt = get_localized_text(user_id, "api_key_prompt")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞
    if hasattr(context, "user_data"):
        context.user_data["setup_state"] = "waiting_api_key"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        f"üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π DMarket\n\n{api_key_prompt}",
    )


async def handle_setup_input(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π."""
    user_id = update.effective_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not hasattr(context, "user_data") or "setup_state" not in context.user_data:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    setup_state = context.user_data["setup_state"]

    if setup_state == "waiting_api_key":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π API –∫–ª—é—á
        profile = get_user_profile(user_id)
        profile["api_key"] = text
        save_user_profiles()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        api_secret_prompt = get_localized_text(user_id, "api_secret_prompt")
        context.user_data["setup_state"] = "waiting_api_secret"

        await update.message.reply_text(api_secret_prompt)

    elif setup_state == "waiting_api_secret":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        profile = get_user_profile(user_id)
        profile["api_secret"] = text
        save_user_profiles()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        api_keys_set = get_localized_text(user_id, "api_keys_set")
        context.user_data.pop("setup_state", None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await update.message.reply_text(api_keys_set)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å bot_v2.py
def register_localization_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –∏–∑ python-telegram-bot

    """
    from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler, filters

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("setup", setup_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(settings_callback, pattern="^settings"))
    application.add_handler(CallbackQueryHandler(settings_callback, pattern="^language:"))
    application.add_handler(CallbackQueryHandler(settings_callback, pattern="^risk:"))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_setup_input),
    )
