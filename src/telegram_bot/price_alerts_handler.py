"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö –≤ Telegram –±–æ—Ç–µ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–æ —Ü–µ–Ω–∞—Ö –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã DMarket –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ Telegram.
"""

import asyncio
from typing import List

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

from src.dmarket.dmarket_api import DMarketAPI
from src.dmarket.realtime_price_watcher import PriceAlert, RealtimePriceWatcher
from src.telegram_bot.constants import PRICE_ALERT_STORAGE_KEY

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ITEM_NAME, ALERT_PRICE, ALERT_CONDITION = range(3)

# –ö–æ–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
CALLBACK_ALERT_LIST = "alert_list"
CALLBACK_ADD_ALERT = "add_alert"
CALLBACK_REMOVE_ALERT = "rem_alert:"
CALLBACK_CANCEL = "alert_cancel"
CALLBACK_CONDITION_BELOW = "cond_below"
CALLBACK_CONDITION_ABOVE = "cond_above"


class PriceAlertsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö –≤ Telegram –±–æ—Ç–µ."""

    def __init__(self, api_client: DMarketAPI):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö.

        Args:
            api_client: –≠–∫–∑–µ–º–ø–ª—è—Ä DMarketAPI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API

        """
        self.api_client = api_client
        self.price_watcher = RealtimePriceWatcher(api_client)
        self._user_temp_data = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        self._is_watcher_started = False

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        self.price_watcher.register_alert_handler(self._handle_alert_triggered)

    async def ensure_watcher_started(self) -> None:
        """–£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Ü–µ–Ω–∞–º–∏ –∑–∞–ø—É—â–µ–Ω."""
        if not self._is_watcher_started:
            success = await self.price_watcher.start()
            self._is_watcher_started = success

    async def _handle_alert_triggered(
        self,
        alert: PriceAlert,
        current_price: float,
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.

        Args:
            alert: –°—Ä–∞–±–æ—Ç–∞–≤—à–µ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞

        """
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –û–¥–Ω–∞–∫–æ, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Telegram,
        # –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–∏
        # –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–µ –ø–æ–∑–∂–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Telegram.

    async def handle_price_alerts_command(
        self,
        update: Update,
        context: CallbackContext,
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price_alerts.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞

        """
        await self.ensure_watcher_started()

        keyboard = [
            [
                InlineKeyboardButton(
                    "üìã –°–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π",
                    callback_data=CALLBACK_ALERT_LIST,
                ),
            ],
            [
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ",
                    callback_data=CALLBACK_ADD_ALERT,
                ),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üîî *–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö*\n\n"
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
            "–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.",
            reply_markup=reply_markup,
            parse_mode="Markdown",
        )

    async def handle_alert_list_callback(
        self,
        update: Update,
        context: CallbackContext,
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞

        """
        query = update.callback_query
        await query.answer()

        user_id = str(update.effective_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_data
        alerts_data = context.user_data.get(PRICE_ALERT_STORAGE_KEY, {})

        if not alerts_data:
            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ",
                        callback_data=CALLBACK_ADD_ALERT,
                    ),
                ],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.",
                reply_markup=reply_markup,
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        message_text = "üîî *–í–∞—à–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö:*\n\n"

        keyboard = []

        for alert_id, alert_data in alerts_data.items():
            item_name = alert_data["market_hash_name"]
            target_price = alert_data["target_price"]
            condition = alert_data["condition"]
            condition_text = "‚â§" if condition == "below" else "‚â•"

            message_text += f"‚Ä¢ *{item_name}*\n"
            message_text += f"  –¶–µ–Ω–∞ {condition_text} ${target_price:.2f}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            keyboard.append(
                [
                    InlineKeyboardButton(
                        f"‚ùå –£–¥–∞–ª–∏—Ç—å {item_name}",
                        callback_data=f"{CALLBACK_REMOVE_ALERT}{alert_id}",
                    ),
                ],
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        keyboard.append(
            [
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ",
                    callback_data=CALLBACK_ADD_ALERT,
                ),
            ],
        )

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown",
        )

    async def handle_add_alert_callback(
        self,
        update: Update,
        context: CallbackContext,
    ) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (—à–∞–≥ 1).

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        """
        query = update.callback_query
        await query.answer()

        user_id = str(update.effective_user.id)
        self._user_temp_data[user_id] = {}

        await query.edit_message_text(
            "üîç *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ü–µ–Ω–µ*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (market_hash_name), "
            "–Ω–∞–ø—Ä–∏–º–µ—Ä: `AWP | Asiimov (Field-Tested)`\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="Markdown",
        )

        return ITEM_NAME

    async def handle_item_name_input(
        self,
        update: Update,
        context: CallbackContext,
    ) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (—à–∞–≥ 2).

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        """
        user_id = str(update.effective_user.id)
        item_name = update.message.text.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        self._user_temp_data[user_id]["item_name"] = item_name

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ API

        await update.message.reply_text(
            f"üìù –í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: *{item_name}*\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –≤ USD (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ), "
            "–Ω–∞–ø—Ä–∏–º–µ—Ä: `50.5` –¥–ª—è 50.50$\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="Markdown",
        )

        return ALERT_PRICE

    async def handle_alert_price_input(
        self,
        update: Update,
        context: CallbackContext,
    ) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (—à–∞–≥ 3).

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        """
        user_id = str(update.effective_user.id)
        price_text = update.message.text.strip()

        try:
            target_price = float(price_text)
            if target_price <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `50.5` –¥–ª—è 50.50$\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode="Markdown",
            )
            return ALERT_PRICE

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É
        self._user_temp_data[user_id]["target_price"] = target_price

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚¨áÔ∏è –¶–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –ù–ò–ñ–ï –∏–ª–∏ –†–ê–í–ù–ê",
                    callback_data=CALLBACK_CONDITION_BELOW,
                ),
            ],
            [
                InlineKeyboardButton(
                    "‚¨ÜÔ∏è –¶–µ–Ω–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –í–´–®–ï –∏–ª–∏ –†–ê–í–ù–ê",
                    callback_data=CALLBACK_CONDITION_ABOVE,
                ),
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CALLBACK_CANCEL)],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üí≤ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: *${target_price:.2f}*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode="Markdown",
        )

        return ALERT_CONDITION

    async def handle_alert_condition_callback(
        self,
        update: Update,
        context: CallbackContext,
    ) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (—à–∞–≥ 4).

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (ConversationHandler.END)

        """
        query = update.callback_query
        await query.answer()

        user_id = str(update.effective_user.id)
        callback_data = query.data

        if callback_data == CALLBACK_CANCEL:
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        condition = "below" if callback_data == CALLBACK_CONDITION_BELOW else "above"
        condition_text = "–Ω–∏–∂–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞" if condition == "below" else "–≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞"

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        item_data = self._user_temp_data.get(user_id, {})
        item_name = item_data.get("item_name", "")
        target_price = item_data.get("target_price", 0.0)

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        import uuid

        alert_id = str(uuid.uuid4())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ user_data
        if PRICE_ALERT_STORAGE_KEY not in context.user_data:
            context.user_data[PRICE_ALERT_STORAGE_KEY] = {}

        context.user_data[PRICE_ALERT_STORAGE_KEY][alert_id] = {
            "market_hash_name": item_name,
            "target_price": target_price,
            "condition": condition,
            "created_at": asyncio.get_event_loop().time(),
            "is_triggered": False,
        }

        # TODO: –ü–æ–ª—É—á–∏—Ç—å item_id –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ API –∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        # –≤ price_watcher

        await query.edit_message_text(
            f"‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"*{item_name}*\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –±—É–¥–µ—Ç {condition_text} "
            f"*${target_price:.2f}*",
            parse_mode="Markdown",
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in self._user_temp_data:
            del self._user_temp_data[user_id]

        return ConversationHandler.END

    async def handle_remove_alert_callback(
        self,
        update: Update,
        context: CallbackContext,
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞

        """
        query = update.callback_query
        await query.answer()

        user_id = str(update.effective_user.id)
        callback_data = query.data

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–∑ callback_data
        alert_id = callback_data.replace(CALLBACK_REMOVE_ALERT, "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        alerts_data = context.user_data.get(PRICE_ALERT_STORAGE_KEY, {})
        if alert_id not in alerts_data:
            await query.edit_message_text("‚ùå –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–æ–≤–µ—â–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        alert_info = alerts_data[alert_id]
        item_name = alert_info["market_hash_name"]

        # –£–¥–∞–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        del context.user_data[PRICE_ALERT_STORAGE_KEY][alert_id]

        # TODO: –£–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∏–∑ price_watcher, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –µ—Å—Ç—å

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        await self.handle_alert_list_callback(update, context)

    async def handle_cancel(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞

        Returns:
            int: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (ConversationHandler.END)

        """
        user_id = str(update.effective_user.id)

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in self._user_temp_data:
            del self._user_temp_data[user_id]

        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        )

        return ConversationHandler.END

    async def handle_alert_notification(
        self,
        alert: PriceAlert,
        current_price: float,
        context: CallbackContext,
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–∏.

        Args:
            alert: –°—Ä–∞–±–æ—Ç–∞–≤—à–µ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞

        """
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    def get_handlers(self) -> List:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.

        Returns:
            List: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram

        """
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price_alerts
        price_alerts_handler = CommandHandler(
            "price_alerts",
            self.handle_price_alerts_command,
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        alert_list_handler = CallbackQueryHandler(
            self.handle_alert_list_callback,
            pattern=f"^{CALLBACK_ALERT_LIST}$",
        )
        remove_alert_handler = CallbackQueryHandler(
            self.handle_remove_alert_callback,
            pattern=f"^{CALLBACK_REMOVE_ALERT}",
        )

        # –†–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        add_alert_conversation = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(
                    self.handle_add_alert_callback,
                    pattern=f"^{CALLBACK_ADD_ALERT}$",
                ),
            ],
            states={
                ITEM_NAME: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.handle_item_name_input,
                    ),
                ],
                ALERT_PRICE: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.handle_alert_price_input,
                    ),
                ],
                ALERT_CONDITION: [
                    CallbackQueryHandler(
                        self.handle_alert_condition_callback,
                        pattern=f"^({CALLBACK_CONDITION_BELOW}|{CALLBACK_CONDITION_ABOVE}|{CALLBACK_CANCEL})$",
                    ),
                ],
            },
            fallbacks=[CommandHandler("cancel", self.handle_cancel)],
            per_user=True,
        )

        return [
            price_alerts_handler,
            alert_list_handler,
            remove_alert_handler,
            add_alert_conversation,
        ]
