"""–ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–º–µ—Ç—ã –º–∞—Ä–∫–µ—Ç–∞,
–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –±–∞–ª–∞–Ω—Å –∏ —Ç.–¥.) –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram.
"""

import logging
from typing import List, Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
MAX_MESSAGE_LENGTH = 4096

def format_balance(balance_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç.
    
    Args:
        balance_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±–∞–ª–∞–Ω—Å–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–ª–∞–Ω—Å–µ
    """
    if balance_data.get("error"):
        return f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞*: {balance_data.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    balance = balance_data.get("balance", 0)
    available_balance = balance_data.get("available_balance", balance)
    total_balance = balance_data.get("total_balance", balance)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = [
        "üí∞ *–ë–∞–ª–∞–Ω—Å DMarket*",
        "",
        f"üíµ *–î–æ—Å—Ç—É–ø–Ω–æ*: ${available_balance:.2f} USD",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
    if total_balance > available_balance:
        message.append(f"üîí *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ*: ${total_balance - available_balance:.2f} USD")
    
    message.append(f"üìä *–í—Å–µ–≥–æ*: ${total_balance:.2f} USD")
    
    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    if available_balance < 1.0:
        message.extend([
            "",
            "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ*: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ $1. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        ])
    
    return "\n".join(message)

def format_market_item(item: Dict[str, Any], show_details: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ –º–∞—Ä–∫–µ—Ç–∞.
    
    Args:
        item: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
        show_details: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    """
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
    price_cents = item.get("price", {}).get("USD", 0)
    price_usd = price_cents / 100 if price_cents else 0
    
    message = [
        f"üè∑Ô∏è *{title}*",
        f"üí≤ –¶–µ–Ω–∞: *${price_usd:.2f}*"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if show_details:
        # –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ (–¥–ª—è CS:GO)
        if "extra" in item and "exteriorName" in item["extra"]:
            message.append(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ: _{item['extra']['exteriorName']}_")
        
        # Float (–¥–ª—è CS:GO)
        if "extra" in item and "floatValue" in item["extra"]:
            message.append(f"üìä Float: `{item['extra']['floatValue']}`")
        
        # –ù–∞–∫–ª–µ–π–∫–∏ (–¥–ª—è CS:GO)
        if "extra" in item and "stickers" in item["extra"] and item["extra"]["stickers"]:
            stickers = item["extra"]["stickers"]
            message.append(f"üèµÔ∏è –ù–∞–∫–ª–µ–π–∫–∏: {len(stickers)}")
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
        item_id = item.get("itemId", "")
        if item_id:
            message.append(f"üîó [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ DMarket](https://dmarket.com/ingame-items/item-list/csgo-skins?userOfferId={item_id})")
    
    return "\n".join(message)

def format_market_items(items: List[Dict[str, Any]], page: int = 0, items_per_page: int = 5) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        items: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    """
    if not items:
        return "üîç *–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*"
    
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(items))
    
    page_items = items[start_idx:end_idx]
    
    message = [f"üìã *–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items)}*"]
    message.append(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(len(items) + items_per_page - 1) // items_per_page}")
    message.append("")
    
    for i, item in enumerate(page_items, start=start_idx + 1):
        item_text = format_market_item(item, show_details=False)
        message.append(f"{i}. {item_text}")
        message.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
    
    return "\n".join(message)

def format_opportunities(opportunities: List[Dict[str, Any]], page: int = 0, items_per_page: int = 3) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        opportunities: –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    """
    if not opportunities:
        return "üîç <b>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>"
    
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(opportunities))
    
    page_items = opportunities[start_idx:end_idx]
    
    message = [f"üí∞ <b>–ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}</b>"]
    message.append(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(len(opportunities) + items_per_page - 1) // items_per_page}")
    message.append("")
    
    for i, opportunity in enumerate(page_items, start=start_idx + 1):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        item_name = opportunity.get("item_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        buy_price = opportunity.get("buy_price", 0)
        sell_price = opportunity.get("sell_price", 0)
        profit = opportunity.get("profit", 0)
        profit_percent = opportunity.get("profit_percent", 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        message.append(f"{i}. <b>{item_name}</b>")
        message.append(f"üí≤ –ü–æ–∫—É–ø–∫–∞: <b>${buy_price:.2f}</b> ‚û°Ô∏è –ü—Ä–æ–¥–∞–∂–∞: <b>${sell_price:.2f}</b>")
        message.append(f"üìà –ü—Ä–∏–±—ã–ª—å: <b>${profit:.2f}</b> ({profit_percent:.2f}%)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if "buy_link" in opportunity:
            message.append(f"üîó <a href='{opportunity['buy_link']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É</a>")
        
        message.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message.append(f"üïí <i>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {current_time}</i>")
    
    return "\n".join(message)

def format_error_message(error: Exception, user_friendly: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    
    Args:
        error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        user_friendly: –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    if user_friendly:
        return f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n{str(error)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    return f"‚ùå *–û—à–∏–±–∫–∞*: `{type(error).__name__}`\n\n```\n{str(error)}\n```"

def format_sales_history(sales: List[Dict[str, Any]], page: int = 0, items_per_page: int = 5) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂.
    
    Args:
        sales: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ–¥–∞–∂
    """
    if not sales:
        return "üìä *–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ –ø—É—Å—Ç–∞*"
    
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(sales))
    
    page_items = sales[start_idx:end_idx]
    
    message = [f"üìä *–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(sales)} –∑–∞–ø–∏—Å–µ–π)*"]
    message.append(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(len(sales) + items_per_page - 1) // items_per_page}")
    message.append("")
    
    for i, sale in enumerate(page_items, start=start_idx + 1):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        item_name = sale.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        price_cents = sale.get("price", {}).get("amount", 0)
        price_usd = price_cents / 100 if price_cents else 0
        
        date_str = sale.get("createdAt", "")
        if date_str:
            try:
                date = datetime.fromisoformat(date_str.replace("Z", "+00:00"))
                date_formatted = date.strftime("%d.%m.%Y %H:%M")
            except:
                date_formatted = date_str
        else:
            date_formatted = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        message.append(f"{i}. *{item_name}*")
        message.append(f"üí∞ –°—É–º–º–∞: *${price_usd:.2f}*")
        message.append(f"üïí –î–∞—Ç–∞: _{date_formatted}_")
        message.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–∂–∞–º–∏
    
    return "\n".join(message)

def split_long_message(message: str, max_length: int = MAX_MESSAGE_LENGTH) -> List[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    
    Args:
        message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if len(message) <= max_length:
        return [message]
    
    parts = []
    lines = message.split("\n")
    current_part = ""
    
    for line in lines:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É,
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
        if len(current_part) + len(line) + 1 > max_length:
            parts.append(current_part)
            current_part = line + "\n"
        else:
            current_part += line + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
    if current_part:
        parts.append(current_part)
    
    return parts 