"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ Telegram –±–æ—Ç–µ.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä:
- Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
- –û–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞
- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Å–æ–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ñ–∏–ª—å—Ç—Ä—ã, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Ç.–¥.)
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram: WebApp, –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Telegram Bot API: https://core.telegram.org/bots/api#inline-keyboard-markup
"""

from typing import List, Dict, Any, Optional, Union, Tuple

from telegram import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
    LoginUrl,
    ReplyKeyboardRemove,
)

from src.dmarket.arbitrage import GAMES

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –≤ –≤–∏–¥–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    keyboard = [
        [
            InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")
        ],
        [
            InlineKeyboardButton("üí∞ –ê—Ä–±–∏—Ç—Ä–∞–∂", callback_data="arbitrage"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ],
        [
            InlineKeyboardButton("üìà –†—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã", callback_data="market_trends"),
            InlineKeyboardButton("üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="alerts")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_settings_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞."""
    keyboard = [
        [
            InlineKeyboardButton("üîë API –∫–ª—é—á–∏", callback_data="settings_api_keys"),
            InlineKeyboardButton("üåê Proxy", callback_data="settings_proxy")
        ],
        [
            InlineKeyboardButton("üíµ –í–∞–ª—é—Ç–∞", callback_data="settings_currency"),
            InlineKeyboardButton("‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã", callback_data="settings_intervals")
        ],
        [
            InlineKeyboardButton("üìã –§–∏–ª—å—Ç—Ä—ã", callback_data="settings_filters"),
            InlineKeyboardButton("üîÑ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="settings_auto_refresh")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_games_keyboard(callback_prefix: str = "game") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã.
    
    Args:
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä
    """
    keyboard = []
    row = []
    
    game_icons = {
        "csgo": "üî´ CS:GO",
        "dota2": "üèÜ Dota 2",
        "rust": "üèúÔ∏è Rust",
        "tf2": "üéØ TF2"
    }
    
    for i, game in enumerate(GAMES):
        button_text = game_icons.get(game, game)
        row.append(InlineKeyboardButton(button_text, callback_data=f"{callback_prefix}_{game}"))
        
        # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if (i + 1) % 2 == 0 or i == len(GAMES) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)


def get_arbitrage_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞", callback_data="arbitrage_boost")],
        [InlineKeyboardButton("üíº –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä", callback_data="arbitrage_mid")],
        [InlineKeyboardButton("üíé Pro –ê—Ä–±–∏—Ç—Ä–∞–∂", callback_data="arbitrage_pro")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂", callback_data="auto_arbitrage")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])


def get_price_range_keyboard(min_price: int = 0, max_price: int = 1000) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    
    Args:
        min_price: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ USD
        max_price: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ USD
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    if max_price <= 100:
        ranges = [(0, 10), (10, 25), (25, 50), (50, 100)]
    elif max_price <= 500:
        ranges = [(0, 20), (20, 50), (50, 100), (100, 200), (200, 500)]
    else:
        ranges = [(0, 50), (50, 100), (100, 300), (300, 500), (500, 1000), (1000, 2000)]
    
    keyboard = []
    row = []
    
    for i, (low, high) in enumerate(ranges):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        if low > max_price:
            continue
            
        adjusted_high = min(high, max_price)
        row.append(InlineKeyboardButton(
            f"${low}-${adjusted_high}", 
            callback_data=f"price_{low}_{adjusted_high}"
        ))
        
        # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if (i + 1) % 2 == 0 or i == len(ranges) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    keyboard.append([InlineKeyboardButton("–î—Ä—É–≥–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", callback_data="price_custom")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_filters")])
    
    return InlineKeyboardMarkup(keyboard)


def get_confirm_cancel_keyboard(confirm_data: str, cancel_data: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã.
    
    Args:
        confirm_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cancel_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_data),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_data)
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤

def get_filter_keyboard(game: str = "csgo") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã.
    
    Args:
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, rust, tf2)
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"filter_{game}_price"),
            InlineKeyboardButton("üîÑ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data=f"filter_{game}_offers")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã —Ñ–∏–ª—å—Ç—Ä—ã
    if game == "csgo":
        keyboard.extend([
            [
                InlineKeyboardButton("üî´ –¢–∏–ø –æ—Ä—É–∂–∏—è", callback_data=f"filter_{game}_weapon_type"),
                InlineKeyboardButton("üé® –†–µ–¥–∫–æ—Å—Ç—å", callback_data=f"filter_{game}_rarity")
            ],
            [
                InlineKeyboardButton("‚ú® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥", callback_data=f"filter_{game}_exterior"),
                InlineKeyboardButton("üé≠ –ö–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data=f"filter_{game}_collection")
            ]
        ])
    elif game == "dota2":
        keyboard.extend([
            [
                InlineKeyboardButton("üë§ –ì–µ—Ä–æ–π", callback_data=f"filter_{game}_hero"),
                InlineKeyboardButton("üé® –†–µ–¥–∫–æ—Å—Ç—å", callback_data=f"filter_{game}_rarity")
            ],
            [
                InlineKeyboardButton("üß© –°–ª–æ—Ç", callback_data=f"filter_{game}_slot"),
                InlineKeyboardButton("üé≠ –¢—É—Ä–Ω–∏—Ä—ã", callback_data=f"filter_{game}_tournament")
            ]
        ])
    elif game == "rust":
        keyboard.extend([
            [
                InlineKeyboardButton("üîß –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"filter_{game}_category"),
                InlineKeyboardButton("üé® –†–µ–¥–∫–æ—Å—Ç—å", callback_data=f"filter_{game}_rarity")
            ]
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    keyboard.extend([
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data=f"filter_{game}_search"),
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data=f"filter_{game}_reset")
        ],
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data=f"filter_{game}_apply"),
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_games")
        ]
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_pagination_keyboard(
    current_page: int, 
    total_pages: int,
    items_per_page: int = 10,
    prefix: str = "page"
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    
    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    navigation = []
    
    # –ö–Ω–æ–ø–∫–∞ "–í –Ω–∞—á–∞–ª–æ" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if current_page > 1:
        navigation.append(InlineKeyboardButton("¬´ –ü–µ—Ä–≤–∞—è", callback_data=f"{prefix}_1"))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if current_page > 1:
        navigation.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"{prefix}_{current_page-1}"))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    navigation.append(InlineKeyboardButton(
        f"{current_page} / {total_pages}", 
        callback_data=f"current_page_{current_page}"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if current_page < total_pages:
        navigation.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"{prefix}_{current_page+1}"))
    
    # –ö–Ω–æ–ø–∫–∞ "–í –∫–æ–Ω–µ—Ü" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if current_page < total_pages:
        navigation.append(InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω—è—è ¬ª", callback_data=f"{prefix}_{total_pages}"))
    
    keyboard.append(navigation)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_filters")])
    
    return InlineKeyboardMarkup(keyboard)


def get_alert_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏."""
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data="alert_create"),
            InlineKeyboardButton("üëÅÔ∏è –ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="alert_list")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π", callback_data="alert_settings"),
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_alert_type_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è."""
    keyboard = [
        [
            InlineKeyboardButton("üìâ –ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã", callback_data="alert_type_price_drop"),
            InlineKeyboardButton("üìà –†–æ—Å—Ç —Ü–µ–Ω—ã", callback_data="alert_type_price_rise")
        ],
        [
            InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞", callback_data="alert_type_trend_change"),
            InlineKeyboardButton("üí∞ –í—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="alert_type_good_deal")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_alerts")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_alert_actions_keyboard(alert_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º.
    
    Args:
        alert_id: ID –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    """
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"alert_edit_{alert_id}"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"alert_delete_{alert_id}")
        ],
        [
            InlineKeyboardButton("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"alert_pause_{alert_id}"),
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_alert_list")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤

def get_csgo_exterior_keyboard(callback_prefix: str = "exterior") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ CS:GO.
    
    Args:
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    """
    exteriors = [
        ("Factory New", "FN"),
        ("Minimal Wear", "MW"),
        ("Field-Tested", "FT"),
        ("Well-Worn", "WW"),
        ("Battle-Scarred", "BS")
    ]
    
    keyboard = []
    row = []
    
    for i, (name, code) in enumerate(exteriors):
        row.append(InlineKeyboardButton(name, callback_data=f"{callback_prefix}_{code}"))
        
        # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if (i + 1) % 2 == 0 or i == len(exteriors) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –≤–Ω–µ—à–Ω–∏–µ –≤–∏–¥—ã"
    keyboard.append([InlineKeyboardButton("–í—Å–µ –≤–Ω–µ—à–Ω–∏–µ –≤–∏–¥—ã", callback_data=f"{callback_prefix}_all")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_csgo_filters")])
    
    return InlineKeyboardMarkup(keyboard)


def get_rarity_keyboard(game: str, callback_prefix: str = "rarity") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
    
    Args:
        game: –ö–æ–¥ –∏–≥—Ä—ã (csgo, dota2, rust, tf2)
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
    """
    rarities = []
    
    if game == "csgo":
        rarities = [
            ("üî¥ –¢–∞–π–Ω–æ–µ", "Covert"),
            ("üü£ –ó–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω–æ–µ", "Classified"),
            ("üîµ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ", "Restricted"),
            ("üü¢ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ", "Mil-Spec Grade"),
            ("‚ö™ –®–∏—Ä–ø–æ—Ç—Ä–µ–±", "Consumer Grade"),
            ("‚≠ê –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ", "Extraordinary"),
            ("üü° –ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞", "Contraband")
        ]
    elif game == "dota2":
        rarities = [
            ("üü£ Arcana", "Arcana"),
            ("üî¥ Immortal", "Immortal"),
            ("üü° Legendary", "Legendary"),
            ("üü† Mythical", "Mythical"),
            ("üîµ Rare", "Rare"),
            ("üü¢ Uncommon", "Uncommon"),
            ("‚ö™ Common", "Common")
        ]
    elif game == "rust":
        rarities = [
            ("üî¥ Extraordinary", "Extraordinary"),
            ("üü£ High End", "High End"),
            ("üü† Elite", "Elite"),
            ("üü° Rare", "Rare"),
            ("üîµ Uncommon", "Uncommon"),
            ("‚ö™ Common", "Common")
        ]
    
    keyboard = []
    row = []
    
    for i, (name, code) in enumerate(rarities):
        row.append(InlineKeyboardButton(name, callback_data=f"{callback_prefix}_{code}"))
        
        # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if (i + 1) % 2 == 0 or i == len(rarities) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Ä–µ–¥–∫–æ—Å—Ç–∏"
    keyboard.append([InlineKeyboardButton("–í—Å–µ —Ä–µ–¥–∫–æ—Å—Ç–∏", callback_data=f"{callback_prefix}_all")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"back_to_{game}_filters")])
    
    return InlineKeyboardMarkup(keyboard)


def get_csgo_weapon_type_keyboard(callback_prefix: str = "weapon") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è CS:GO.
    
    Args:
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è
    """
    weapon_types = [
        ("üî™ –ù–æ–∂–∏", "Knife"),
        ("üî´ –ü–∏—Å—Ç–æ–ª–µ—Ç—ã", "Pistol"),
        ("üî´ –í–∏–Ω—Ç–æ–≤–∫–∏", "Rifle"),
        ("üî´ –°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ", "Sniper Rifle"),
        ("üî´ –ü–∏—Å—Ç–æ–ª–µ—Ç—ã-–ø—É–ª–µ–º–µ—Ç—ã", "SMG"),
        ("üî´ –î—Ä–æ–±–æ–≤–∏–∫–∏", "Shotgun"),
        ("üî´ –ü—É–ª–µ–º–µ—Ç—ã", "Machinegun"),
        ("üß§ –ü–µ—Ä—á–∞—Ç–∫–∏", "Gloves"),
        ("ü•Ω –ù–∞–∫–ª–µ–π–∫–∏", "Sticker"),
        ("üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", "Container")
    ]
    
    keyboard = []
    row = []
    
    for i, (name, code) in enumerate(weapon_types):
        row.append(InlineKeyboardButton(name, callback_data=f"{callback_prefix}_{code}"))
        
        # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if (i + 1) % 2 == 0 or i == len(weapon_types) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Ç–∏–ø—ã"
    keyboard.append([InlineKeyboardButton("–í—Å–µ —Ç–∏–ø—ã", callback_data=f"{callback_prefix}_all")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_csgo_filters")])
    
    return InlineKeyboardMarkup(keyboard)

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram

def get_webapp_keyboard(title: str, webapp_url: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp.
    
    Args:
        title (str): –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        webapp_url (str): URL –¥–ª—è WebApp
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å WebApp –∫–Ω–æ–ø–∫–æ–π
    """
    keyboard = [
        [InlineKeyboardButton(
            title, 
            web_app=WebAppInfo(url=webapp_url)
        )]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_dmarket_webapp_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp DMarket."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(
            "üåê –û—Ç–∫—Ä—ã—Ç—å DMarket", web_app=WebAppInfo(url="https://dmarket.com")
        )],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

def get_payment_keyboard(title: str, payment_provider_token: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã.
    
    Args:
        title (str): –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        payment_provider_token (str): –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    """
    keyboard = [
        [InlineKeyboardButton(title, pay=True)]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_login_keyboard(title: str, login_url: str, forward_text: str = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram Login Widget.
    
    Args:
        title (str): –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        login_url (str): URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        forward_text (str, optional): –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤—Ö–æ–¥–∞
    """
    login_info = LoginUrl(
        url=login_url,
        forward_text=forward_text,
        bot_username=None
    )
    
    keyboard = [
        [InlineKeyboardButton(title, login_url=login_info)]
    ]
    return InlineKeyboardMarkup(keyboard)

def remove_keyboard() -> ReplyKeyboardRemove:
    """
    –£–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    
    Returns:
        ReplyKeyboardRemove: –û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    return ReplyKeyboardRemove()

def get_request_contact_keyboard(text: str = "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º") -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    """
    keyboard = [
        [KeyboardButton(text, request_contact=True)]
    ]
    return ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_request_location_keyboard(text: str = "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º") -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    """
    keyboard = [
        [KeyboardButton(text, request_location=True)]
    ]
    return ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_combined_web_app_keyboard(items: List[Tuple[str, str]]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ WebApp –∫–Ω–æ–ø–∫–∞–º–∏.
    
    Args:
        items (List[Tuple[str, str]]): –°–ø–∏—Å–æ–∫ –ø–∞—Ä (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, URL)
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å WebApp –∫–Ω–æ–ø–∫–∞–º–∏
    """
    keyboard = []
    row = []
    
    for i, (text, url) in enumerate(items):
        row.append(InlineKeyboardButton(
            text, 
            web_app=WebAppInfo(url=url)
        ))
        
        # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if (i + 1) % 2 == 0 or i == len(items) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

def get_marketplace_comparison_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî´ CS2 - Steam/DMarket", callback_data="compare:csgo:steam_dmarket")],
        [InlineKeyboardButton("üî´ CS2 - Skinport/DMarket", callback_data="compare:csgo:skinport_dmarket")],
        [InlineKeyboardButton("üèÜ Dota 2 - Steam/DMarket", callback_data="compare:dota2:steam_dmarket")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

def get_modern_arbitrage_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç DMarket –ê—Ä–±–∏—Ç—Ä–∞–∂", callback_data="dmarket_arbitrage")],
        [InlineKeyboardButton("üí∞ –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="best_opportunities")],
        [
            InlineKeyboardButton("üéÆ –í—ã–±–æ—Ä –∏–≥—Ä—ã", callback_data="game_selection"),
            InlineKeyboardButton("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã", callback_data="filter:")
        ],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂", callback_data="auto_arbitrage")],
        [
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", callback_data="market_analysis"),
            InlineKeyboardButton("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ", callback_data="market_comparison")
        ],
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å DMarket WebApp", callback_data="open_webapp")]
    ])

def get_auto_arbitrage_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ Boost (–ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å)", callback_data="auto_start:boost_low")],
        [InlineKeyboardButton("üí∞ Medium (–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å)", callback_data="auto_start:mid_medium")],
        [InlineKeyboardButton("üíé Pro (–í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å)", callback_data="auto_start:pro_high")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

def get_game_selection_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã."""
    games = {
        "csgo": "CS2",
        "dota2": "Dota 2",
        "rust": "Rust",
        "tf2": "Team Fortress 2"
    }
    keyboard = []
    icons = {"csgo": "üî´", "dota2": "üèÜ", "rust": "üèùÔ∏è", "tf2": "üé©"}
    
    for game_code, game_name in games.items():
        icon = icons.get(game_code, "üéÆ")
        keyboard.append([InlineKeyboardButton(f"{icon} {game_name}", callback_data=f"game_selected:{game_code}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_back_to_arbitrage_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É", callback_data="arbitrage")]
    ])

def get_webapp_button():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(
            "üåê –û—Ç–∫—Ä—ã—Ç—å DMarket", web_app=WebAppInfo(url="https://dmarket.com")
        )]
    ])

def get_permanent_reply_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞."""
    keyboard = [
        [
            KeyboardButton("üîç –ê—Ä–±–∏—Ç—Ä–∞–∂"),
            KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å")
        ],
        [
            KeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å DMarket"),
            KeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
        ],
        [
            KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
        ]
    ]
    return ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        persistent=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...",
        is_persistent=True,
        one_time_keyboard=False
    )
