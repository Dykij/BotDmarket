"""–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è keyboards.py.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram-–±–æ—Ç–∞.
"""

from telegram import InlineKeyboardMarkup

from src.telegram_bot.keyboards import (
    get_arbitrage_keyboard,
    get_auto_arbitrage_keyboard,
    get_back_to_arbitrage_keyboard,
    get_back_to_settings_keyboard,
    get_game_selection_keyboard,
    get_language_keyboard,
    get_risk_profile_keyboard,
    get_settings_keyboard,
)


def test_get_arbitrage_keyboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    keyboard = get_arbitrage_keyboard()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    assert len(keyboard.inline_keyboard) == 5

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
    buttons_text = [button.text for row in keyboard.inline_keyboard for button in row]
    assert "üöÄ –†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞" in buttons_text
    assert "üíº –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä" in buttons_text
    assert "üí∞ Trade Pro" in buttons_text
    assert "üåü –õ—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏" in buttons_text
    assert "ü§ñ –ê–≤—Ç–æ-–∞—Ä–±–∏—Ç—Ä–∞–∂" in buttons_text
    assert "üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É" in buttons_text
    assert "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" in buttons_text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
    for row in keyboard.inline_keyboard:
        for button in row:
            if button.text == "üöÄ –†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞":
                assert button.callback_data == "arbitrage_boost"
            elif button.text == "üíº –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä":
                assert button.callback_data == "arbitrage_mid"
            elif button.text == "üí∞ Trade Pro":
                assert button.callback_data == "arbitrage_pro"
            elif button.text == "ü§ñ –ê–≤—Ç–æ-–∞—Ä–±–∏—Ç—Ä–∞–∂":
                assert button.callback_data == "auto_arbitrage"
            elif button.text == "üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É":
                assert button.callback_data == "select_game"
            elif button.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
                assert button.callback_data == "back_to_menu"


def test_get_game_selection_keyboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã."""
    keyboard = get_game_selection_keyboard()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä
    buttons_text = [button.text for row in keyboard.inline_keyboard for button in row]
    assert "CS2" in buttons_text or "CS:GO" in buttons_text
    assert "Dota 2" in buttons_text
    assert "Team Fortress 2" in buttons_text
    assert "Rust" in buttons_text
    assert "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" in buttons_text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
    for row in keyboard.inline_keyboard:
        for button in row:
            if "CS" in button.text:  # CS:GO –∏–ª–∏ CS2
                assert button.callback_data == "game:csgo"
            elif button.text == "Dota 2":
                assert button.callback_data == "game:dota2"
            elif button.text == "Team Fortress 2":
                assert button.callback_data == "game:tf2"
            elif button.text == "Rust":
                assert button.callback_data == "game:rust"
            elif button.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                assert button.callback_data == "arbitrage"


def test_get_auto_arbitrage_keyboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    keyboard = get_auto_arbitrage_keyboard()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    assert len(keyboard.inline_keyboard) == 5

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
    buttons_text = [button.text for row in keyboard.inline_keyboard for button in row]
    assert "üí∞ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å" in buttons_text
    assert "üí∞üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å" in buttons_text
    assert "üí∞üí∞üí∞ –í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å" in buttons_text
    assert "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in buttons_text
    assert "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" in buttons_text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
    for row in keyboard.inline_keyboard:
        for button in row:
            if button.text == "üí∞ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å":
                assert button.callback_data == "auto_start:auto_low"
            elif button.text == "üí∞üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å":
                assert button.callback_data == "auto_start:auto_medium"
            elif button.text == "üí∞üí∞üí∞ –í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å":
                assert button.callback_data == "auto_start:auto_high"
            elif button.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                assert button.callback_data == "auto_stats"
            elif button.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                assert button.callback_data == "arbitrage"


def test_get_back_to_arbitrage_keyboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    keyboard = get_back_to_arbitrage_keyboard()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    assert len(keyboard.inline_keyboard) == 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏
    assert keyboard.inline_keyboard[0][0].text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"
    assert keyboard.inline_keyboard[0][0].callback_data == "arbitrage"


def test_get_settings_keyboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ-–∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º
    keyboard_off = get_settings_keyboard(auto_trading_enabled=False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard_off, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    assert len(keyboard_off.inline_keyboard) == 5

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
    buttons_text = [button.text for row in keyboard_off.inline_keyboard for button in row]
    assert "üîë API –∫–ª—é—á–∏" in buttons_text
    assert "üåê –Ø–∑—ã–∫" in buttons_text
    assert "ü§ñ –ê–≤—Ç–æ-—Ç–æ—Ä–≥–æ–≤–ª—è: ‚ùå –í—ã–∫–ª." in buttons_text
    assert "üí∞ –õ–∏–º–∏—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏" in buttons_text
    assert "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in buttons_text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ-–∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º
    keyboard_on = get_settings_keyboard(auto_trading_enabled=True)
    buttons_text = [button.text for row in keyboard_on.inline_keyboard for button in row]
    assert "ü§ñ –ê–≤—Ç–æ-—Ç–æ—Ä–≥–æ–≤–ª—è: ‚úÖ –í–∫–ª." in buttons_text


def test_get_language_keyboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–µ–∫—É—â–∏–º —è–∑—ã–∫–æ–º - —Ä—É—Å—Å–∫–∏–π
    keyboard_ru = get_language_keyboard(current_language="ru")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard_ru, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
    buttons_text = [button.text for row in keyboard_ru.inline_keyboard for button in row]
    assert "üá∑üá∫ –†—É—Å—Å–∫–∏–π ‚úÖ" in buttons_text  # –û—Ç–º–µ—á–µ–Ω —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
    assert "üá¨üáß English" in buttons_text
    assert "üá™üá∏ Espa√±ol" in buttons_text
    assert "üá©üá™ Deutsch" in buttons_text
    assert "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º" in buttons_text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–µ–∫—É—â–∏–º —è–∑—ã–∫–æ–º - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    keyboard_en = get_language_keyboard(current_language="en")
    buttons_text = [button.text for row in keyboard_en.inline_keyboard for button in row]
    assert "üá∑üá∫ –†—É—Å—Å–∫–∏–π" in buttons_text
    assert "üá¨üáß English ‚úÖ" in buttons_text  # –û—Ç–º–µ—á–µ–Ω —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫


def test_get_risk_profile_keyboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º - —Å—Ä–µ–¥–Ω–∏–π
    keyboard_medium = get_risk_profile_keyboard(current_profile="medium")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard_medium, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (3 –ø—Ä–æ—Ñ–∏–ª—è + –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥)
    assert len(keyboard_medium.inline_keyboard) == 4

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
    buttons_text = [button.text for row in keyboard_medium.inline_keyboard for button in row]
    assert "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫" in buttons_text
    assert "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ ‚úÖ" in buttons_text  # –û—Ç–º–µ—á–µ–Ω —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    assert "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫" in buttons_text
    assert "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ç–æ—Ä–≥–æ–≤–ª–∏" in buttons_text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º - –≤—ã—Å–æ–∫–∏–π
    keyboard_high = get_risk_profile_keyboard(current_profile="high")
    buttons_text = [button.text for row in keyboard_high.inline_keyboard for button in row]
    assert "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫" in buttons_text
    assert "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫" in buttons_text
    assert "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ ‚úÖ" in buttons_text  # –û—Ç–º–µ—á–µ–Ω —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å


def test_get_back_to_settings_keyboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º."""
    keyboard = get_back_to_settings_keyboard()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    assert len(keyboard.inline_keyboard) == 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏
    assert keyboard.inline_keyboard[0][0].text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
    assert keyboard.inline_keyboard[0][0].callback_data == "settings"
