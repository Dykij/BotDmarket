"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API.
"""

import asyncio
import logging
import re
import time
from typing import Any, Callable, Dict, Optional, TypeVar, Union, List, Tuple
import aiohttp
from aiohttp import ClientResponse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –¢–∏–ø –¥–ª—è –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
T = TypeVar('T')


class APIError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ API."""

    def __init__(self, message: str, status_code: int = 0,
                 response_data: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ API –æ—à–∏–±–∫–∏.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            status_code: HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
            response_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ API
        """
        self.message = message
        self.status_code = status_code
        self.response_data = response_data or {}
        super().__init__(self.message)

    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏."""
        return f"{self.message} (–°—Ç–∞—Ç—É—Å: {self.status_code})"
    
    @property
    def error_code(self) -> str:
        """–ö–æ–¥ –æ—à–∏–±–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API."""
        if isinstance(self.response_data, dict):
            # DMarket API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            return str(self.response_data.get('code', 
                self.response_data.get('error_code',
                    self.response_data.get('error', ''))))
        return ''
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {self.status_code}): {self.message}"


class AuthenticationError(APIError):
    """–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401)."""
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return (f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏ –∏–ª–∏ —Ç–æ–∫–µ–Ω.\n"
                f"–î–µ—Ç–∞–ª–∏: {self.message}")


class ForbiddenError(APIError):
    """–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)."""
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return (f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.\n"
                f"–î–µ—Ç–∞–ª–∏: {self.message}")


class NotFoundError(APIError):
    """–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (404)."""
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return (f"–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.\n"
                f"–î–µ—Ç–∞–ª–∏: {self.message}")


class RateLimitExceeded(APIError):
    """–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)."""

    def __init__(self, message: str, status_code: int = 429,
                 response_data: Optional[Dict[str, Any]] = None,
                 retry_after: int = 60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            status_code: HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
            response_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ API
            retry_after: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        super().__init__(message, status_code, response_data)
        self.retry_after = retry_after
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return (f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {self.retry_after} —Å–µ–∫—É–Ω–¥.\n"
                f"–î–µ—Ç–∞–ª–∏: {self.message}")


class ServerError(APIError):
    """–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ (5xx)."""
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return (f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n"
                f"–ö–æ–¥: {self.status_code}\n"
                f"–î–µ—Ç–∞–ª–∏: {self.message}")


class BadRequestError(APIError):
    """–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫–ª–∏–µ–Ω—Ç–∞ (400)."""
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return (f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
                f"–î–µ—Ç–∞–ª–∏: {self.message}")


class DMarketSpecificError(APIError):
    """–û—à–∏–±–∫–∏, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è DMarket API."""
    
    def __init__(self, message: str, status_code: int = 0,
                 response_data: Optional[Dict[str, Any]] = None,
                 error_code: str = ''):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è DMarket API.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            status_code: HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
            response_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ API
            error_code: –ö–æ–¥ –æ—à–∏–±–∫–∏ DMarket API
        """
        super().__init__(message, status_code, response_data)
        self._error_code = error_code
    
    @property
    def error_code(self) -> str:
        """–ö–æ–¥ –æ—à–∏–±–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API."""
        if self._error_code:
            return self._error_code
        return super().error_code
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        code_msg = f" (–∫–æ–¥ {self.error_code})" if self.error_code else ""
        return f"–û—à–∏–±–∫–∞ DMarket API{code_msg}: {self.message}"


class InsufficientFundsError(DMarketSpecificError):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏."


class ItemNotAvailableError(DMarketSpecificError):
    """–ü—Ä–µ–¥–º–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏."""
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return "–ü—Ä–µ–¥–º–µ—Ç –±–æ–ª–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏."


class TemporaryUnavailableError(DMarketSpecificError):
    """API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."""
    
    @property
    def human_readable(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return "API DMarket –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ DMarket –Ω–∞ –∫–ª–∞—Å—Å—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π
DMARKET_ERROR_MAPPING = {
    'InsuficientAmount': InsufficientFundsError,
    'NotEnoughMoney': InsufficientFundsError,
    'ItemNotFound': ItemNotAvailableError,
    'WalletNotFound': DMarketSpecificError,
    'OfferNotFound': ItemNotAvailableError,
    'TemporaryUnavailable': TemporaryUnavailableError,
    'ServiceUnavailable': TemporaryUnavailableError,
}


async def handle_api_error(error: APIError) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    Args:
        error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è APIError
        
    Returns:
        –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    if isinstance(error, RateLimitExceeded):
        return (
            f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {error.retry_after} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π."
        )
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏ API
    elif isinstance(error, AuthenticationError):
        return (
            "üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö API –∫–ª—é—á–µ–π."
        )
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–∞
    elif isinstance(error, ForbiddenError):
        return (
            "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
        )
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    elif isinstance(error, NotFoundError):
        return (
            "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Ä–µ—Å—É—Ä—Å –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω."
        )
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    elif isinstance(error, ServerError):
        return (
            "‚öôÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ API.\n"
            f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {error.status_code}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ DMarket
    elif isinstance(error, InsufficientFundsError):
        return (
            "üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏."
        )
    
    elif isinstance(error, ItemNotAvailableError):
        return (
            "üõí –ü—Ä–µ–¥–º–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–∂–µ –∫—É–ø–ª–µ–Ω –∏–ª–∏ —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏."
        )
    
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    return (
        f"‚ùå –û—à–∏–±–∫–∞ API (–∫–æ–¥ {error.status_code}):\n"
        f"{error.message}"
    )


async def handle_response(response: ClientResponse) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP-–æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.

    Args:
        response: HTTP-–æ—Ç–≤–µ—Ç –æ—Ç API

    Returns:
        –î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API

    Raises:
        APIError: –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É
    """
    status = response.status

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
    try:
        data = await response.json()
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ JSON
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
            text = await response.text()
            data = {"raw_text": text}
        except Exception:
            data = {}
        
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞: {e}")

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω—ã–π (2xx), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if 200 <= status < 300:
        return data

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    error_message = data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
    # –û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if isinstance(error_message, dict):
        error_message = str(error_message)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ DMarket, –µ—Å–ª–∏ –µ—Å—Ç—å
    dmarket_error_code = ''
    if isinstance(data, dict):
        dmarket_error_code = data.get('code', data.get('error_code', ''))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏
    error_class = None
    if dmarket_error_code and dmarket_error_code in DMARKET_ERROR_MAPPING:
        error_class = DMARKET_ERROR_MAPPING[dmarket_error_code]

    if status == 401:
        raise AuthenticationError(
            "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API", status, data
        )
    elif status == 403:
        raise ForbiddenError(
            "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", status, data
        )
    elif status == 404:
        raise NotFoundError(
            "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", status, data
        )
    elif status == 429:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º Retry-After –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        retry_after_header = response.headers.get('Retry-After', '')
        
        try:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Å–µ–∫—É–Ω–¥–∞–º–∏
            retry_after = int(retry_after_header) if retry_after_header else 60
        except ValueError:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ HTTP-–¥–∞—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            retry_after = 60

        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
        rate_limit_error = RateLimitExceeded(
            f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫.",
            status,
            data,
            retry_after=retry_after
        )
        raise rate_limit_error
    elif 500 <= status < 600:
        raise ServerError(
            f"–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ API (–∫–æ–¥ {status})", status, data
        )
    elif status == 400:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç—Ç–æ–π –æ—à–∏–±–∫–∏ DMarket
        if error_class:
            raise error_class(
                f"–û—à–∏–±–∫–∞ DMarket: {error_message}", status, data, dmarket_error_code
            )
        else:
            raise BadRequestError(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {error_message}", status, data
            )
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç—Ç–æ–π –æ—à–∏–±–∫–∏ DMarket
        if error_class:
            raise error_class(
                f"–û—à–∏–±–∫–∞ DMarket: {error_message}", status, data, dmarket_error_code
            )
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
            raise APIError(
                f"–û—à–∏–±–∫–∞ API: {error_message}", status, data
            )


class RetryStrategy:
    """–ö–ª–∞—Å—Å, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
    
    def __init__(self, 
                 max_retries: int = 3, 
                 initial_delay: float = 1.0,
                 max_delay: float = 30.0,
                 backoff_factor: float = 2.0,
                 status_codes_to_retry: Optional[List[int]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.
        
        Args:
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            initial_delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_delay: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            backoff_factor: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            status_codes_to_retry: –°–ø–∏—Å–æ–∫ HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
        """
        self.max_retries = max_retries
        self.initial_delay = initial_delay
        self.max_delay = max_delay
        self.backoff_factor = backoff_factor
        self.status_codes_to_retry = status_codes_to_retry or [429, 500, 502, 503, 504]
    
    def should_retry(self, attempt: int, status_code: int) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É.
        
        Args:
            attempt: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            status_code: HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        """
        return (attempt <= self.max_retries) and (status_code in self.status_codes_to_retry)
    
    def get_delay(self, attempt: int, retry_after: Optional[int] = None) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.
        
        Args:
            attempt: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            retry_after: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Retry-After
            
        Returns:
            –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if retry_after is not None:
            return float(retry_after)
        
        delay = self.initial_delay * (self.backoff_factor ** (attempt - 1))
        return min(delay, self.max_delay)


async def retry_request(
    request_func: Callable[..., T],
    limiter=None,
    endpoint_type: str = "other",
    retry_strategy: Optional[RetryStrategy] = None,
    **kwargs
) -> T:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

    Args:
        request_func: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        limiter: –û–±—ä–µ–∫—Ç RateLimiter –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        endpoint_type: –¢–∏–ø —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        retry_strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞

    Raises:
        APIError: –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ
    """
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if retry_strategy is None:
        retry_strategy = RetryStrategy()
    
    # –û–∂–∏–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç –ª–∏–º–∏—Ç–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if limiter:
        await limiter.wait_for_call(endpoint_type)

    attempt = 0
    last_error = None
    start_time = time.time()

    # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    while attempt <= retry_strategy.max_retries:
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = await request_func(**kwargs)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–º–∏—Ç–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if limiter:
                limiter.update_after_call(endpoint_type)
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–º, –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
            if attempt > 0:
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {attempt} –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
                
            return result
            
        except (aiohttp.ClientError, APIError) as e:
            last_error = e
            attempt += 1
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            status_code = 0
            retry_after = None
            
            if isinstance(e, aiohttp.ClientResponseError):
                status_code = getattr(e, 'status', 0)
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å Retry-After –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                headers = getattr(e, 'headers', {})
                if headers and 'Retry-After' in headers:
                    try:
                        retry_after = int(headers['Retry-After'])
                    except (ValueError, TypeError):
                        retry_after = None
            elif isinstance(e, APIError):
                status_code = e.status_code
                # –ï—Å–ª–∏ —ç—Ç–æ RateLimitExceeded, —É –Ω–µ–≥–æ –µ—Å—Ç—å retry_after
                if isinstance(e, RateLimitExceeded):
                    retry_after = e.retry_after

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            error_message = str(e)
            logger.warning(
                f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retry_strategy.max_retries + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: "
                f"–°—Ç–∞—Ç—É—Å {status_code} - {error_message}"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            if not retry_strategy.should_retry(attempt, status_code):
                logger.info(f"–ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ—Å–ª–µ {attempt} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
                break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
            if status_code == 429 and limiter:
                limiter.mark_rate_limited(endpoint_type, retry_after or 60)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            delay = retry_strategy.get_delay(attempt, retry_after)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
            logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫.")
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(delay)
            
    # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ –≤—Å–µ–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    total_time = time.time() - start_time
    logger.info(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {total_time:.2f} —Å–µ–∫.")
            
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –≤ APIError
    if isinstance(last_error, aiohttp.ClientResponseError):
        error_status = getattr(last_error, 'status', 0)
        error_message = getattr(last_error, 'message', str(last_error))
        
        raise APIError(
            f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {attempt} –ø–æ–ø—ã—Ç–æ–∫: {error_message}",
            error_status
        )
    elif isinstance(last_error, APIError):
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ APIError, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ –¥–∞–ª—å—à–µ
        raise last_error
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        raise APIError(
            f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {attempt} –ø–æ–ø—ã—Ç–æ–∫: {str(last_error)}",
            0
        )


# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ DMarket API
def classify_dmarket_error(status_code: int, response_data: Dict[str, Any]) -> APIError:
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ DMarket API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    
    Args:
        status_code: HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
        response_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ API
        
    Returns:
        –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ APIError
    """
    error_message = response_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ DMarket API')
    if isinstance(error_message, dict):
        error_message = str(error_message)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ DMarket
    dmarket_error_code = response_data.get('code', response_data.get('error_code', ''))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ DMarket –ø–æ –∫–æ–¥—É
    if dmarket_error_code in DMARKET_ERROR_MAPPING:
        error_class = DMARKET_ERROR_MAPPING[dmarket_error_code]
        return error_class(
            f"–û—à–∏–±–∫–∞ DMarket: {error_message}", 
            status_code, 
            response_data,
            dmarket_error_code
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥—É
    if status_code == 401:
        return AuthenticationError(
            "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ DMarket API", status_code, response_data
        )
    elif status_code == 403:
        return ForbiddenError(
            "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω DMarket API", status_code, response_data
        )
    elif status_code == 404:
        return NotFoundError(
            "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DMarket API", status_code, response_data
        )
    elif status_code == 429:
        retry_after = response_data.get('retry_after', 60)
        return RateLimitExceeded(
            f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DMarket API. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫.",
            status_code,
            response_data,
            retry_after=retry_after
        )
    elif 500 <= status_code < 600:
        return ServerError(
            f"–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ DMarket API (–∫–æ–¥ {status_code})", status_code, response_data
        )
    elif status_code == 400:
        return BadRequestError(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ DMarket API: {error_message}", status_code, response_data
        )
    else:
        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
        return DMarketSpecificError(
            f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ DMarket API: {error_message}", 
            status_code, 
            response_data,
            dmarket_error_code
        )
